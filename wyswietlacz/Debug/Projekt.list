
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d618  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800d7e8  0800d7e8  0001d7e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd1c  0800dd1c  00020328  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd1c  0800dd1c  0001dd1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd24  0800dd24  00020328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd24  0800dd24  0001dd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd28  0800dd28  0001dd28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800dd2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001e8  0800df14  000201e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000288  0800dfb4  00020288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000a18  20000328  0800e054  00020328  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000d40  0800e054  00020d40  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 15 .debug_info   00018845  00000000  00000000  0002039b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003067  00000000  00000000  00038be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001508  00000000  00000000  0003bc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001061  00000000  00000000  0003d150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002907a  00000000  00000000  0003e1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00018453  00000000  00000000  0006722b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fb496  00000000  00000000  0007f67e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000070f4  00000000  00000000  0017ab14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  00181c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000328 	.word	0x20000328
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d7d0 	.word	0x0800d7d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000032c 	.word	0x2000032c
 800020c:	0800d7d0 	.word	0x0800d7d0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08e      	sub	sp, #56	; 0x38
 8001034:	af0a      	add	r7, sp, #40	; 0x28
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	4608      	mov	r0, r1
 800103a:	4611      	mov	r1, r2
 800103c:	461a      	mov	r2, r3
 800103e:	4603      	mov	r3, r0
 8001040:	817b      	strh	r3, [r7, #10]
 8001042:	460b      	mov	r3, r1
 8001044:	813b      	strh	r3, [r7, #8]
 8001046:	4613      	mov	r3, r2
 8001048:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <LiquidCrystal+0x90>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d019      	beq.n	8001086 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8001052:	8939      	ldrh	r1, [r7, #8]
 8001054:	897a      	ldrh	r2, [r7, #10]
 8001056:	2300      	movs	r3, #0
 8001058:	9308      	str	r3, [sp, #32]
 800105a:	2300      	movs	r3, #0
 800105c:	9307      	str	r3, [sp, #28]
 800105e:	2300      	movs	r3, #0
 8001060:	9306      	str	r3, [sp, #24]
 8001062:	2300      	movs	r3, #0
 8001064:	9305      	str	r3, [sp, #20]
 8001066:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001068:	9304      	str	r3, [sp, #16]
 800106a:	8c3b      	ldrh	r3, [r7, #32]
 800106c:	9303      	str	r3, [sp, #12]
 800106e:	8bbb      	ldrh	r3, [r7, #28]
 8001070:	9302      	str	r3, [sp, #8]
 8001072:	8b3b      	ldrh	r3, [r7, #24]
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	460b      	mov	r3, r1
 800107c:	68f9      	ldr	r1, [r7, #12]
 800107e:	2001      	movs	r0, #1
 8001080:	f000 f820 	bl	80010c4 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8001084:	e018      	b.n	80010b8 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8001086:	8939      	ldrh	r1, [r7, #8]
 8001088:	897a      	ldrh	r2, [r7, #10]
 800108a:	2300      	movs	r3, #0
 800108c:	9308      	str	r3, [sp, #32]
 800108e:	2300      	movs	r3, #0
 8001090:	9307      	str	r3, [sp, #28]
 8001092:	2300      	movs	r3, #0
 8001094:	9306      	str	r3, [sp, #24]
 8001096:	2300      	movs	r3, #0
 8001098:	9305      	str	r3, [sp, #20]
 800109a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800109c:	9304      	str	r3, [sp, #16]
 800109e:	8c3b      	ldrh	r3, [r7, #32]
 80010a0:	9303      	str	r3, [sp, #12]
 80010a2:	8bbb      	ldrh	r3, [r7, #28]
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	8b3b      	ldrh	r3, [r7, #24]
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	460b      	mov	r3, r1
 80010b0:	68f9      	ldr	r1, [r7, #12]
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 f806 	bl	80010c4 <init>
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000000 	.word	0x20000000

080010c4 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	4611      	mov	r1, r2
 80010ce:	461a      	mov	r2, r3
 80010d0:	4603      	mov	r3, r0
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	460b      	mov	r3, r1
 80010d6:	81bb      	strh	r3, [r7, #12]
 80010d8:	4613      	mov	r3, r2
 80010da:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 80010dc:	4a1a      	ldr	r2, [pc, #104]	; (8001148 <init+0x84>)
 80010de:	89bb      	ldrh	r3, [r7, #12]
 80010e0:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 80010e2:	4a1a      	ldr	r2, [pc, #104]	; (800114c <init+0x88>)
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 80010e8:	4a19      	ldr	r2, [pc, #100]	; (8001150 <init+0x8c>)
 80010ea:	8b3b      	ldrh	r3, [r7, #24]
 80010ec:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 80010ee:	4a19      	ldr	r2, [pc, #100]	; (8001154 <init+0x90>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 80010f4:	4a18      	ldr	r2, [pc, #96]	; (8001158 <init+0x94>)
 80010f6:	8bbb      	ldrh	r3, [r7, #28]
 80010f8:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 80010fa:	4a17      	ldr	r2, [pc, #92]	; (8001158 <init+0x94>)
 80010fc:	8c3b      	ldrh	r3, [r7, #32]
 80010fe:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8001100:	4a15      	ldr	r2, [pc, #84]	; (8001158 <init+0x94>)
 8001102:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001104:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8001106:	4a14      	ldr	r2, [pc, #80]	; (8001158 <init+0x94>)
 8001108:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800110a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800110c:	4a12      	ldr	r2, [pc, #72]	; (8001158 <init+0x94>)
 800110e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001110:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8001112:	4a11      	ldr	r2, [pc, #68]	; (8001158 <init+0x94>)
 8001114:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001116:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8001118:	4a0f      	ldr	r2, [pc, #60]	; (8001158 <init+0x94>)
 800111a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800111c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800111e:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <init+0x94>)
 8001120:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001122:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	e002      	b.n	8001138 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <init+0x98>)
 8001134:	2210      	movs	r2, #16
 8001136:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8001138:	2102      	movs	r1, #2
 800113a:	2010      	movs	r0, #16
 800113c:	f000 f810 	bl	8001160 <begin>
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000346 	.word	0x20000346
 800114c:	20000348 	.word	0x20000348
 8001150:	2000034a 	.word	0x2000034a
 8001154:	2000035c 	.word	0x2000035c
 8001158:	2000034c 	.word	0x2000034c
 800115c:	20000360 	.word	0x20000360

08001160 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	460a      	mov	r2, r1
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	4613      	mov	r3, r2
 800116e:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8001170:	79bb      	ldrb	r3, [r7, #6]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d906      	bls.n	8001184 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 8001176:	4b77      	ldr	r3, [pc, #476]	; (8001354 <begin+0x1f4>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	f043 0308 	orr.w	r3, r3, #8
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b74      	ldr	r3, [pc, #464]	; (8001354 <begin+0x1f4>)
 8001182:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8001184:	4a74      	ldr	r2, [pc, #464]	; (8001358 <begin+0x1f8>)
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	3340      	adds	r3, #64	; 0x40
 8001190:	2140      	movs	r1, #64	; 0x40
 8001192:	2000      	movs	r0, #0
 8001194:	f000 f98a 	bl	80014ac <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8001198:	4b70      	ldr	r3, [pc, #448]	; (800135c <begin+0x1fc>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d009      	beq.n	80011b4 <begin+0x54>
 80011a0:	79bb      	ldrb	r3, [r7, #6]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d106      	bne.n	80011b4 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80011a6:	4b6b      	ldr	r3, [pc, #428]	; (8001354 <begin+0x1f4>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	f043 0304 	orr.w	r3, r3, #4
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b68      	ldr	r3, [pc, #416]	; (8001354 <begin+0x1f4>)
 80011b2:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 80011b4:	f000 f8e4 	bl	8001380 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b8:	2302      	movs	r3, #2
 80011ba:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 80011c0:	4b67      	ldr	r3, [pc, #412]	; (8001360 <begin+0x200>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d01b      	beq.n	8001200 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 80011c8:	4b66      	ldr	r3, [pc, #408]	; (8001364 <begin+0x204>)
 80011ca:	881a      	ldrh	r2, [r3, #0]
 80011cc:	4b66      	ldr	r3, [pc, #408]	; (8001368 <begin+0x208>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	4b65      	ldr	r3, [pc, #404]	; (800136c <begin+0x20c>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	4313      	orrs	r3, r2
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b64      	ldr	r3, [pc, #400]	; (8001370 <begin+0x210>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b62      	ldr	r3, [pc, #392]	; (8001370 <begin+0x210>)
 80011e6:	885b      	ldrh	r3, [r3, #2]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b60      	ldr	r3, [pc, #384]	; (8001370 <begin+0x210>)
 80011ee:	889b      	ldrh	r3, [r3, #4]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	4b5e      	ldr	r3, [pc, #376]	; (8001370 <begin+0x210>)
 80011f6:	88db      	ldrh	r3, [r3, #6]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	e02a      	b.n	8001256 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001200:	4b58      	ldr	r3, [pc, #352]	; (8001364 <begin+0x204>)
 8001202:	881a      	ldrh	r2, [r3, #0]
 8001204:	4b58      	ldr	r3, [pc, #352]	; (8001368 <begin+0x208>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	4313      	orrs	r3, r2
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b57      	ldr	r3, [pc, #348]	; (800136c <begin+0x20c>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	4313      	orrs	r3, r2
 8001212:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8001214:	4b56      	ldr	r3, [pc, #344]	; (8001370 <begin+0x210>)
 8001216:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001218:	4313      	orrs	r3, r2
 800121a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800121c:	4b54      	ldr	r3, [pc, #336]	; (8001370 <begin+0x210>)
 800121e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001220:	4313      	orrs	r3, r2
 8001222:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8001224:	4b52      	ldr	r3, [pc, #328]	; (8001370 <begin+0x210>)
 8001226:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001228:	4313      	orrs	r3, r2
 800122a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800122c:	4b50      	ldr	r3, [pc, #320]	; (8001370 <begin+0x210>)
 800122e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001230:	4313      	orrs	r3, r2
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b4e      	ldr	r3, [pc, #312]	; (8001370 <begin+0x210>)
 8001236:	891b      	ldrh	r3, [r3, #8]
 8001238:	4313      	orrs	r3, r2
 800123a:	b29a      	uxth	r2, r3
 800123c:	4b4c      	ldr	r3, [pc, #304]	; (8001370 <begin+0x210>)
 800123e:	895b      	ldrh	r3, [r3, #10]
 8001240:	4313      	orrs	r3, r2
 8001242:	b29a      	uxth	r2, r3
 8001244:	4b4a      	ldr	r3, [pc, #296]	; (8001370 <begin+0x210>)
 8001246:	899b      	ldrh	r3, [r3, #12]
 8001248:	4313      	orrs	r3, r2
 800124a:	b29a      	uxth	r2, r3
 800124c:	4b48      	ldr	r3, [pc, #288]	; (8001370 <begin+0x210>)
 800124e:	89db      	ldrh	r3, [r3, #14]
 8001250:	4313      	orrs	r3, r2
 8001252:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8001254:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 8001256:	4b47      	ldr	r3, [pc, #284]	; (8001374 <begin+0x214>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f107 020c 	add.w	r2, r7, #12
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f002 fb55 	bl	8003910 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 8001266:	2032      	movs	r0, #50	; 0x32
 8001268:	f001 fe64 	bl	8002f34 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 800126c:	4b41      	ldr	r3, [pc, #260]	; (8001374 <begin+0x214>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a3c      	ldr	r2, [pc, #240]	; (8001364 <begin+0x204>)
 8001272:	8811      	ldrh	r1, [r2, #0]
 8001274:	2200      	movs	r2, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f002 fd0e 	bl	8003c98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800127c:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <begin+0x214>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a3a      	ldr	r2, [pc, #232]	; (800136c <begin+0x20c>)
 8001282:	8811      	ldrh	r1, [r2, #0]
 8001284:	2200      	movs	r2, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f002 fd06 	bl	8003c98 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 800128c:	4b36      	ldr	r3, [pc, #216]	; (8001368 <begin+0x208>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	2bff      	cmp	r3, #255	; 0xff
 8001292:	d007      	beq.n	80012a4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8001294:	4b37      	ldr	r3, [pc, #220]	; (8001374 <begin+0x214>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a33      	ldr	r2, [pc, #204]	; (8001368 <begin+0x208>)
 800129a:	8811      	ldrh	r1, [r2, #0]
 800129c:	2200      	movs	r2, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 fcfa 	bl	8003c98 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <begin+0x1f4>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	f003 0310 	and.w	r3, r3, #16
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d115      	bne.n	80012dc <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f000 fa1d 	bl	80016f0 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 80012b6:	2005      	movs	r0, #5
 80012b8:	f001 fe3c 	bl	8002f34 <HAL_Delay>

    // second try
    write4bits(0x03);
 80012bc:	2003      	movs	r0, #3
 80012be:	f000 fa17 	bl	80016f0 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 80012c2:	2005      	movs	r0, #5
 80012c4:	f001 fe36 	bl	8002f34 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 80012c8:	2003      	movs	r0, #3
 80012ca:	f000 fa11 	bl	80016f0 <write4bits>
    HAL_Delay(1);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f001 fe30 	bl	8002f34 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 80012d4:	2002      	movs	r0, #2
 80012d6:	f000 fa0b 	bl	80016f0 <write4bits>
 80012da:	e01d      	b.n	8001318 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 80012dc:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <begin+0x1f4>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	f043 0320 	orr.w	r3, r3, #32
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f97d 	bl	80015e6 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 80012ec:	2005      	movs	r0, #5
 80012ee:	f001 fe21 	bl	8002f34 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <begin+0x1f4>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	f043 0320 	orr.w	r3, r3, #32
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f972 	bl	80015e6 <command>
    HAL_Delay(1);
 8001302:	2001      	movs	r0, #1
 8001304:	f001 fe16 	bl	8002f34 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <begin+0x1f4>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	f043 0320 	orr.w	r3, r3, #32
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f967 	bl	80015e6 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <begin+0x1f4>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	f043 0320 	orr.w	r3, r3, #32
 8001320:	b2db      	uxtb	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f95f 	bl	80015e6 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <begin+0x218>)
 800132a:	2204      	movs	r2, #4
 800132c:	701a      	strb	r2, [r3, #0]
  display();
 800132e:	f000 f919 	bl	8001564 <display>

  // clear it off
  clear();
 8001332:	f000 f8db 	bl	80014ec <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <begin+0x21c>)
 8001338:	2202      	movs	r2, #2
 800133a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <begin+0x21c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	b2db      	uxtb	r3, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f94d 	bl	80015e6 <command>

}
 800134c:	bf00      	nop
 800134e:	3720      	adds	r7, #32
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000360 	.word	0x20000360
 8001358:	20000363 	.word	0x20000363
 800135c:	20000344 	.word	0x20000344
 8001360:	20000000 	.word	0x20000000
 8001364:	20000346 	.word	0x20000346
 8001368:	20000348 	.word	0x20000348
 800136c:	2000034a 	.word	0x2000034a
 8001370:	2000034c 	.word	0x2000034c
 8001374:	2000035c 	.word	0x2000035c
 8001378:	20000361 	.word	0x20000361
 800137c:	20000362 	.word	0x20000362

08001380 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	; 0x24
 8001384:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 8001386:	4b41      	ldr	r3, [pc, #260]	; (800148c <enableClock+0x10c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a41      	ldr	r2, [pc, #260]	; (8001490 <enableClock+0x110>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d10c      	bne.n	80013aa <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b40      	ldr	r3, [pc, #256]	; (8001494 <enableClock+0x114>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	4a3f      	ldr	r2, [pc, #252]	; (8001494 <enableClock+0x114>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6313      	str	r3, [r2, #48]	; 0x30
 800139c:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <enableClock+0x114>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	61fb      	str	r3, [r7, #28]
 80013a6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80013a8:	e06a      	b.n	8001480 <enableClock+0x100>
  else if(_port == GPIOB)
 80013aa:	4b38      	ldr	r3, [pc, #224]	; (800148c <enableClock+0x10c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a3a      	ldr	r2, [pc, #232]	; (8001498 <enableClock+0x118>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d10c      	bne.n	80013ce <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80013b4:	4b37      	ldr	r3, [pc, #220]	; (8001494 <enableClock+0x114>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	4a36      	ldr	r2, [pc, #216]	; (8001494 <enableClock+0x114>)
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	6313      	str	r3, [r2, #48]	; 0x30
 80013c0:	4b34      	ldr	r3, [pc, #208]	; (8001494 <enableClock+0x114>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	69bb      	ldr	r3, [r7, #24]
}
 80013cc:	e058      	b.n	8001480 <enableClock+0x100>
  else if(_port == GPIOB)
 80013ce:	4b2f      	ldr	r3, [pc, #188]	; (800148c <enableClock+0x10c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a31      	ldr	r2, [pc, #196]	; (8001498 <enableClock+0x118>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d10c      	bne.n	80013f2 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80013d8:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <enableClock+0x114>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	4a2d      	ldr	r2, [pc, #180]	; (8001494 <enableClock+0x114>)
 80013de:	f043 0302 	orr.w	r3, r3, #2
 80013e2:	6313      	str	r3, [r2, #48]	; 0x30
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <enableClock+0x114>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	697b      	ldr	r3, [r7, #20]
}
 80013f0:	e046      	b.n	8001480 <enableClock+0x100>
	else if(_port == GPIOC)
 80013f2:	4b26      	ldr	r3, [pc, #152]	; (800148c <enableClock+0x10c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a29      	ldr	r2, [pc, #164]	; (800149c <enableClock+0x11c>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d10c      	bne.n	8001416 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80013fc:	4b25      	ldr	r3, [pc, #148]	; (8001494 <enableClock+0x114>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001400:	4a24      	ldr	r2, [pc, #144]	; (8001494 <enableClock+0x114>)
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	6313      	str	r3, [r2, #48]	; 0x30
 8001408:	4b22      	ldr	r3, [pc, #136]	; (8001494 <enableClock+0x114>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]
}
 8001414:	e034      	b.n	8001480 <enableClock+0x100>
	else if(_port == GPIOD)
 8001416:	4b1d      	ldr	r3, [pc, #116]	; (800148c <enableClock+0x10c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a21      	ldr	r2, [pc, #132]	; (80014a0 <enableClock+0x120>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d10c      	bne.n	800143a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001420:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <enableClock+0x114>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <enableClock+0x114>)
 8001426:	f043 0308 	orr.w	r3, r3, #8
 800142a:	6313      	str	r3, [r2, #48]	; 0x30
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <enableClock+0x114>)
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
}
 8001438:	e022      	b.n	8001480 <enableClock+0x100>
	else if(_port == GPIOE)
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <enableClock+0x10c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <enableClock+0x124>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d10c      	bne.n	800145e <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <enableClock+0x114>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	4a12      	ldr	r2, [pc, #72]	; (8001494 <enableClock+0x114>)
 800144a:	f043 0310 	orr.w	r3, r3, #16
 800144e:	6313      	str	r3, [r2, #48]	; 0x30
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <enableClock+0x114>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	f003 0310 	and.w	r3, r3, #16
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
}
 800145c:	e010      	b.n	8001480 <enableClock+0x100>
	else if(_port == GPIOF)
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <enableClock+0x10c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <enableClock+0x128>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d10b      	bne.n	8001480 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <enableClock+0x114>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	4a09      	ldr	r2, [pc, #36]	; (8001494 <enableClock+0x114>)
 800146e:	f043 0320 	orr.w	r3, r3, #32
 8001472:	6313      	str	r3, [r2, #48]	; 0x30
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <enableClock+0x114>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	f003 0320 	and.w	r3, r3, #32
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
}
 8001480:	bf00      	nop
 8001482:	3724      	adds	r7, #36	; 0x24
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	2000035c 	.word	0x2000035c
 8001490:	40020000 	.word	0x40020000
 8001494:	40023800 	.word	0x40023800
 8001498:	40020400 	.word	0x40020400
 800149c:	40020800 	.word	0x40020800
 80014a0:	40020c00 	.word	0x40020c00
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40021400 	.word	0x40021400

080014ac <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <setRowOffsets+0x3c>)
 80014c0:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <setRowOffsets+0x3c>)
 80014c8:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <setRowOffsets+0x3c>)
 80014d0:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <setRowOffsets+0x3c>)
 80014d8:	70da      	strb	r2, [r3, #3]
}
 80014da:	bf00      	nop
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000364 	.word	0x20000364

080014ec <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 80014f0:	2001      	movs	r0, #1
 80014f2:	f000 f878 	bl	80015e6 <command>
  HAL_Delay(2);  // this command takes a long time!
 80014f6:	2002      	movs	r0, #2
 80014f8:	f001 fd1c 	bl	8002f34 <HAL_Delay>
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}

08001500 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	460a      	mov	r2, r1
 800150a:	71fb      	strb	r3, [r7, #7]
 800150c:	4613      	mov	r3, r2
 800150e:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8001510:	2304      	movs	r3, #4
 8001512:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d803      	bhi.n	8001524 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	3b01      	subs	r3, #1
 8001522:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8001524:	4b0d      	ldr	r3, [pc, #52]	; (800155c <setCursor+0x5c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	79ba      	ldrb	r2, [r7, #6]
 800152a:	429a      	cmp	r2, r3
 800152c:	d303      	bcc.n	8001536 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <setCursor+0x5c>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	3b01      	subs	r3, #1
 8001534:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8001536:	79bb      	ldrb	r3, [r7, #6]
 8001538:	4a09      	ldr	r2, [pc, #36]	; (8001560 <setCursor+0x60>)
 800153a:	5cd2      	ldrb	r2, [r2, r3]
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	4413      	add	r3, r2
 8001540:	b2db      	uxtb	r3, r3
 8001542:	b25b      	sxtb	r3, r3
 8001544:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001548:	b25b      	sxtb	r3, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f84a 	bl	80015e6 <command>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000363 	.word	0x20000363
 8001560:	20000364 	.word	0x20000364

08001564 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <display+0x28>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <display+0x28>)
 8001574:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <display+0x28>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	f043 0308 	orr.w	r3, r3, #8
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4618      	mov	r0, r3
 8001582:	f000 f830 	bl	80015e6 <command>
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000361 	.word	0x20000361

08001590 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <print+0x12>
 800159e:	2300      	movs	r3, #0
 80015a0:	e01d      	b.n	80015de <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7fe fe82 	bl	80002b0 <strlen>
 80015ac:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80015b2:	e00c      	b.n	80015ce <print+0x3e>
    if (write(*buffer++)) n++;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	617a      	str	r2, [r7, #20]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 f820 	bl	8001602 <write>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <print+0x4a>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	3301      	adds	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
  while (size--) {
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1e5a      	subs	r2, r3, #1
 80015d2:	613a      	str	r2, [r7, #16]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1ed      	bne.n	80015b4 <print+0x24>
 80015d8:	e000      	b.n	80015dc <print+0x4c>
    else break;
 80015da:	bf00      	nop
  }
  return n;
 80015dc:	68fb      	ldr	r3, [r7, #12]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 f813 	bl	8001620 <send>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <write>:

inline size_t write(uint8_t value) {
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	2101      	movs	r1, #1
 8001610:	4618      	mov	r0, r3
 8001612:	f000 f805 	bl	8001620 <send>
  return 1; // assume sucess
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	460a      	mov	r2, r1
 800162a:	71fb      	strb	r3, [r7, #7]
 800162c:	4613      	mov	r3, r2
 800162e:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <send+0x6c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a16      	ldr	r2, [pc, #88]	; (8001690 <send+0x70>)
 8001636:	8811      	ldrh	r1, [r2, #0]
 8001638:	79ba      	ldrb	r2, [r7, #6]
 800163a:	4618      	mov	r0, r3
 800163c:	f002 fb2c 	bl	8003c98 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <send+0x74>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	2bff      	cmp	r3, #255	; 0xff
 8001646:	d007      	beq.n	8001658 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8001648:	4b10      	ldr	r3, [pc, #64]	; (800168c <send+0x6c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a11      	ldr	r2, [pc, #68]	; (8001694 <send+0x74>)
 800164e:	8811      	ldrh	r1, [r2, #0]
 8001650:	2200      	movs	r2, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f002 fb20 	bl	8003c98 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <send+0x78>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	f003 0310 	and.w	r3, r3, #16
 8001660:	2b00      	cmp	r3, #0
 8001662:	d004      	beq.n	800166e <send+0x4e>
    write8bits(value); 
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f86c 	bl	8001744 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800166c:	e009      	b.n	8001682 <send+0x62>
    write4bits(value>>4);
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	b2db      	uxtb	r3, r3
 8001674:	4618      	mov	r0, r3
 8001676:	f000 f83b 	bl	80016f0 <write4bits>
    write4bits(value);
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	4618      	mov	r0, r3
 800167e:	f000 f837 	bl	80016f0 <write4bits>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	2000035c 	.word	0x2000035c
 8001690:	20000346 	.word	0x20000346
 8001694:	20000348 	.word	0x20000348
 8001698:	20000360 	.word	0x20000360

0800169c <pulseEnable>:

void pulseEnable(void) {
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <pulseEnable+0x4c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a11      	ldr	r2, [pc, #68]	; (80016ec <pulseEnable+0x50>)
 80016a6:	8811      	ldrh	r1, [r2, #0]
 80016a8:	2200      	movs	r2, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f002 faf4 	bl	8003c98 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 80016b0:	2001      	movs	r0, #1
 80016b2:	f001 fc3f 	bl	8002f34 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <pulseEnable+0x4c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a0c      	ldr	r2, [pc, #48]	; (80016ec <pulseEnable+0x50>)
 80016bc:	8811      	ldrh	r1, [r2, #0]
 80016be:	2201      	movs	r2, #1
 80016c0:	4618      	mov	r0, r3
 80016c2:	f002 fae9 	bl	8003c98 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 80016c6:	2001      	movs	r0, #1
 80016c8:	f001 fc34 	bl	8002f34 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <pulseEnable+0x4c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a06      	ldr	r2, [pc, #24]	; (80016ec <pulseEnable+0x50>)
 80016d2:	8811      	ldrh	r1, [r2, #0]
 80016d4:	2200      	movs	r2, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 fade 	bl	8003c98 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 80016dc:	2001      	movs	r0, #1
 80016de:	f001 fc29 	bl	8002f34 <HAL_Delay>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000035c 	.word	0x2000035c
 80016ec:	2000034a 	.word	0x2000034a

080016f0 <write4bits>:

void write4bits(uint8_t value) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	e013      	b.n	8001728 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <write4bits+0x4c>)
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <write4bits+0x50>)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800170c:	79fa      	ldrb	r2, [r7, #7]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	fa42 f303 	asr.w	r3, r2, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	f002 fabb 	bl	8003c98 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	3301      	adds	r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2b03      	cmp	r3, #3
 800172c:	dde8      	ble.n	8001700 <write4bits+0x10>
  }

  pulseEnable();
 800172e:	f7ff ffb5 	bl	800169c <pulseEnable>
}
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000035c 	.word	0x2000035c
 8001740:	2000034c 	.word	0x2000034c

08001744 <write8bits>:

void write8bits(uint8_t value) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	e013      	b.n	800177c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <write8bits+0x4c>)
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <write8bits+0x50>)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001760:	79fa      	ldrb	r2, [r7, #7]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	fa42 f303 	asr.w	r3, r2, r3
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	b2db      	uxtb	r3, r3
 8001770:	461a      	mov	r2, r3
 8001772:	f002 fa91 	bl	8003c98 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3301      	adds	r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b07      	cmp	r3, #7
 8001780:	dde8      	ble.n	8001754 <write8bits+0x10>
  }
  
  pulseEnable();
 8001782:	f7ff ff8b 	bl	800169c <pulseEnable>
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	2000035c 	.word	0x2000035c
 8001794:	2000034c 	.word	0x2000034c

08001798 <PID_Control>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PID_Control() {
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
	// Odczytaj aktualne RPM wiatraka
	float MAX_INTEGRAL = 40.0f;
 800179e:	4b4d      	ldr	r3, [pc, #308]	; (80018d4 <PID_Control+0x13c>)
 80017a0:	60fb      	str	r3, [r7, #12]
	float MIN_INTEGRAL = 0.0f;
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
	float MIN_PWM = 0.0f;
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
	float MAX_PWM = 40.0f;
 80017ae:	4b49      	ldr	r3, [pc, #292]	; (80018d4 <PID_Control+0x13c>)
 80017b0:	603b      	str	r3, [r7, #0]

	measuredValue = W_rpm;
 80017b2:	4b49      	ldr	r3, [pc, #292]	; (80018d8 <PID_Control+0x140>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a49      	ldr	r2, [pc, #292]	; (80018dc <PID_Control+0x144>)
 80017b8:	6013      	str	r3, [r2, #0]

	// błąd
	error = (float) W_rpm_setpoint - measuredValue;
 80017ba:	4b49      	ldr	r3, [pc, #292]	; (80018e0 <PID_Control+0x148>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	ee07 3a90 	vmov	s15, r3
 80017c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c6:	4b45      	ldr	r3, [pc, #276]	; (80018dc <PID_Control+0x144>)
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d0:	4b44      	ldr	r3, [pc, #272]	; (80018e4 <PID_Control+0x14c>)
 80017d2:	edc3 7a00 	vstr	s15, [r3]

	// całka z ograniczeniem
	integral += error * Ki;
 80017d6:	4b43      	ldr	r3, [pc, #268]	; (80018e4 <PID_Control+0x14c>)
 80017d8:	ed93 7a00 	vldr	s14, [r3]
 80017dc:	4b42      	ldr	r3, [pc, #264]	; (80018e8 <PID_Control+0x150>)
 80017de:	edd3 7a00 	vldr	s15, [r3]
 80017e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017e6:	4b41      	ldr	r3, [pc, #260]	; (80018ec <PID_Control+0x154>)
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f0:	4b3e      	ldr	r3, [pc, #248]	; (80018ec <PID_Control+0x154>)
 80017f2:	edc3 7a00 	vstr	s15, [r3]
	// Ograniczenie całki ANITI_WINDUP (bez tego uklad sie destabilizuje)
	if (integral > MAX_INTEGRAL)
 80017f6:	4b3d      	ldr	r3, [pc, #244]	; (80018ec <PID_Control+0x154>)
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001800:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001808:	d503      	bpl.n	8001812 <PID_Control+0x7a>
		integral = MAX_INTEGRAL;
 800180a:	4a38      	ldr	r2, [pc, #224]	; (80018ec <PID_Control+0x154>)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	e00c      	b.n	800182c <PID_Control+0x94>
	else if (integral < MIN_INTEGRAL)
 8001812:	4b36      	ldr	r3, [pc, #216]	; (80018ec <PID_Control+0x154>)
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	ed97 7a02 	vldr	s14, [r7, #8]
 800181c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001824:	dd02      	ble.n	800182c <PID_Control+0x94>
		integral = MIN_INTEGRAL;
 8001826:	4a31      	ldr	r2, [pc, #196]	; (80018ec <PID_Control+0x154>)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	6013      	str	r3, [r2, #0]

	// pochodną
	derivative = (error - prevError) * Kd;
 800182c:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <PID_Control+0x14c>)
 800182e:	ed93 7a00 	vldr	s14, [r3]
 8001832:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <PID_Control+0x158>)
 8001834:	edd3 7a00 	vldr	s15, [r3]
 8001838:	ee37 7a67 	vsub.f32	s14, s14, s15
 800183c:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <PID_Control+0x15c>)
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001846:	4b2c      	ldr	r3, [pc, #176]	; (80018f8 <PID_Control+0x160>)
 8001848:	edc3 7a00 	vstr	s15, [r3]

	// wartość sterowania
	controlValue = Kp * error + integral + derivative;
 800184c:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <PID_Control+0x164>)
 800184e:	ed93 7a00 	vldr	s14, [r3]
 8001852:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <PID_Control+0x14c>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800185c:	4b23      	ldr	r3, [pc, #140]	; (80018ec <PID_Control+0x154>)
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001866:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <PID_Control+0x160>)
 8001868:	edd3 7a00 	vldr	s15, [r3]
 800186c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001870:	4b23      	ldr	r3, [pc, #140]	; (8001900 <PID_Control+0x168>)
 8001872:	edc3 7a00 	vstr	s15, [r3]

	// Ograniczenie wartości sterowania do dopuszczalnego zakresu PWM

	if (controlValue < MIN_PWM)
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <PID_Control+0x168>)
 8001878:	edd3 7a00 	vldr	s15, [r3]
 800187c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001888:	dd03      	ble.n	8001892 <PID_Control+0xfa>
		controlValue = MIN_PWM;
 800188a:	4a1d      	ldr	r2, [pc, #116]	; (8001900 <PID_Control+0x168>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	e00c      	b.n	80018ac <PID_Control+0x114>

	else if (controlValue > MAX_PWM)
 8001892:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <PID_Control+0x168>)
 8001894:	edd3 7a00 	vldr	s15, [r3]
 8001898:	ed97 7a00 	vldr	s14, [r7]
 800189c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a4:	d502      	bpl.n	80018ac <PID_Control+0x114>
		controlValue = MAX_PWM;
 80018a6:	4a16      	ldr	r2, [pc, #88]	; (8001900 <PID_Control+0x168>)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	6013      	str	r3, [r2, #0]

	// Aktualizuj PWM wiatraka
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (uint32_t )controlValue);
 80018ac:	4b14      	ldr	r3, [pc, #80]	; (8001900 <PID_Control+0x168>)
 80018ae:	edd3 7a00 	vldr	s15, [r3]
 80018b2:	4b14      	ldr	r3, [pc, #80]	; (8001904 <PID_Control+0x16c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ba:	ee17 2a90 	vmov	r2, s15
 80018be:	63da      	str	r2, [r3, #60]	; 0x3c

	// Zaktualizuj poprzedni błąd
	prevError = error;
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <PID_Control+0x14c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <PID_Control+0x158>)
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	42200000 	.word	0x42200000
 80018d8:	20000b60 	.word	0x20000b60
 80018dc:	20000b6c 	.word	0x20000b6c
 80018e0:	20000b64 	.word	0x20000b64
 80018e4:	20000b70 	.word	0x20000b70
 80018e8:	20000008 	.word	0x20000008
 80018ec:	20000b78 	.word	0x20000b78
 80018f0:	20000b74 	.word	0x20000b74
 80018f4:	2000000c 	.word	0x2000000c
 80018f8:	20000b7c 	.word	0x20000b7c
 80018fc:	20000004 	.word	0x20000004
 8001900:	20000b80 	.word	0x20000b80
 8001904:	2000049c 	.word	0x2000049c

08001908 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a11      	ldr	r2, [pc, #68]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d101      	bne.n	800191c <HAL_TIM_PeriodElapsedCallback+0x14>
		PID_Control();
 8001918:	f7ff ff3e 	bl	8001798 <PID_Control>
	}

	//jacek
	if (htim->Instance == TIM5) {
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0e      	ldr	r2, [pc, #56]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d106      	bne.n	8001934 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001926:	2101      	movs	r1, #1
 8001928:	480d      	ldr	r0, [pc, #52]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800192a:	f002 f9ce 	bl	8003cca <HAL_GPIO_TogglePin>
		tim5_tick = 1;
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]
	}

	if(htim = &htim9 && usart_Mode == 1){
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_TIM_PeriodElapsedCallback+0x38>
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <HAL_TIM_PeriodElapsedCallback+0x3a>
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <HAL_TIM_PeriodElapsedCallback+0x48>
		matlab_Sent = 1;
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
	}

}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000450 	.word	0x20000450
 800195c:	40000c00 	.word	0x40000c00
 8001960:	40020400 	.word	0x40020400
 8001964:	20000bcc 	.word	0x20000bcc
 8001968:	20000bd8 	.word	0x20000bd8
 800196c:	20000bdc 	.word	0x20000bdc

08001970 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	if (htim == &htim4) // Sprawdź, czy to odpowiedni kanał
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a26      	ldr	r2, [pc, #152]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d145      	bne.n	8001a0c <HAL_TIM_IC_CaptureCallback+0x9c>
			{
		// Odczytaj wartość przechwyconą przez timer
		uint32_t current_capture = HAL_TIM_ReadCapturedValue(htim,
 8001980:	2100      	movs	r1, #0
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f004 fb54 	bl	8006030 <HAL_TIM_ReadCapturedValue>
 8001988:	6138      	str	r0, [r7, #16]
				TIM_CHANNEL_1);
		float diffCapture = 0.f;
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

		// Oblicz różnicę czasów między bieżącym a poprzednim impulsem
		if (current_capture > last_capture) {
 8001990:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	429a      	cmp	r2, r3
 8001998:	d90a      	bls.n	80019b0 <HAL_TIM_IC_CaptureCallback+0x40>
			diffCapture = current_capture - last_capture;
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019aa:	edc7 7a05 	vstr	s15, [r7, #20]
 80019ae:	e011      	b.n	80019d4 <HAL_TIM_IC_CaptureCallback+0x64>
		}

		else if (current_capture < last_capture) {
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d20c      	bcs.n	80019d4 <HAL_TIM_IC_CaptureCallback+0x64>
			//Obsługa przepełnienia timera (jeśli Timer jest 16-bitowy i przekroczył maksymalną wartość)
			diffCapture = ((0xffff - last_capture) + current_capture);
 80019ba:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	1ad2      	subs	r2, r2, r3
 80019c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019c6:	4413      	add	r3, r2
 80019c8:	ee07 3a90 	vmov	s15, r3
 80019cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d0:	edc7 7a05 	vstr	s15, [r7, #20]
		}
		// Aktualizacja 'last_capture' dla następnego przechwycenia
		last_capture = current_capture;
 80019d4:	4a10      	ldr	r2, [pc, #64]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	6013      	str	r3, [r2, #0]

		// czestotliwosc sygnalu(impulsow z wiatraka)
		float k = 1.0f / diffCapture;
 80019da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019de:	ed97 7a05 	vldr	s14, [r7, #20]
 80019e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019e6:	edc7 7a03 	vstr	s15, [r7, #12]
		//float k = HAL_RCC_GetPCLK1Freq()/diffCapture; (niepotrzebne)
		//*1000000, bo PSC = 71 f->1[MHz] * 60, bo [rpm] /2,bo dwa impulsy na obrót
		W_rpm = k * 1000000 * 60 / 2;
 80019ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80019ee:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001a1c <HAL_TIM_IC_CaptureCallback+0xac>
 80019f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001a20 <HAL_TIM_IC_CaptureCallback+0xb0>
 80019fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019fe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001a08:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001a0c:	bf00      	nop
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200004e8 	.word	0x200004e8
 8001a18:	20000b5c 	.word	0x20000b5c
 8001a1c:	49742400 	.word	0x49742400
 8001a20:	42700000 	.word	0x42700000
 8001a24:	20000b60 	.word	0x20000b60

08001a28 <sendToMatlab>:
//		HAL_UART_Receive_IT(&huart3, (uint8_t*) &rxBuffer[rxIndex], 1);
//	}
//}


void sendToMatlab(float measuredValue, int W_rpm_setpoint, float controlValue) {
 8001a28:	b5b0      	push	{r4, r5, r7, lr}
 8001a2a:	b096      	sub	sp, #88	; 0x58
 8001a2c:	af04      	add	r7, sp, #16
 8001a2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a32:	60b8      	str	r0, [r7, #8]
 8001a34:	edc7 0a01 	vstr	s1, [r7, #4]
    char buffer[50];
    int n = sprintf(buffer, "%f,%d,%f\n", measuredValue, W_rpm_setpoint, controlValue);
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f7fe fda5 	bl	8000588 <__aeabi_f2d>
 8001a3e:	4604      	mov	r4, r0
 8001a40:	460d      	mov	r5, r1
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7fe fda0 	bl	8000588 <__aeabi_f2d>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	f107 0010 	add.w	r0, r7, #16
 8001a50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	4622      	mov	r2, r4
 8001a5a:	462b      	mov	r3, r5
 8001a5c:	4907      	ldr	r1, [pc, #28]	; (8001a7c <sendToMatlab+0x54>)
 8001a5e:	f007 fde5 	bl	800962c <siprintf>
 8001a62:	6478      	str	r0, [r7, #68]	; 0x44
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, n, 100);
 8001a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	f107 0110 	add.w	r1, r7, #16
 8001a6c:	2364      	movs	r3, #100	; 0x64
 8001a6e:	4804      	ldr	r0, [pc, #16]	; (8001a80 <sendToMatlab+0x58>)
 8001a70:	f005 f922 	bl	8006cb8 <HAL_UART_Transmit>
}
 8001a74:	bf00      	nop
 8001a76:	3748      	adds	r7, #72	; 0x48
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a7c:	0800d7e8 	.word	0x0800d7e8
 8001a80:	200005cc 	.word	0x200005cc

08001a84 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	6078      	str	r0, [r7, #4]


    if (huart->Instance == USART3) {
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a4f      	ldr	r2, [pc, #316]	; (8001bd0 <HAL_UART_RxCpltCallback+0x14c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	f040 8098 	bne.w	8001bc8 <HAL_UART_RxCpltCallback+0x144>
    	if(usart_Mode == 0){
 8001a98:	4b4e      	ldr	r3, [pc, #312]	; (8001bd4 <HAL_UART_RxCpltCallback+0x150>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d148      	bne.n	8001b32 <HAL_UART_RxCpltCallback+0xae>
    		// Sprawdź, czy otrzymano znak końca linii.
    		if (rxBuffer[rxIndex] == '\n') {
 8001aa0:	4b4d      	ldr	r3, [pc, #308]	; (8001bd8 <HAL_UART_RxCpltCallback+0x154>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a4d      	ldr	r2, [pc, #308]	; (8001bdc <HAL_UART_RxCpltCallback+0x158>)
 8001aa6:	5cd3      	ldrb	r3, [r2, r3]
 8001aa8:	2b0a      	cmp	r3, #10
 8001aaa:	d130      	bne.n	8001b0e <HAL_UART_RxCpltCallback+0x8a>
    			// Zakończ łańcuch znaków przed znakiem nowej linii, aby utworzyć poprawny string C.
    			rxBuffer[rxIndex] = '\0';
 8001aac:	4b4a      	ldr	r3, [pc, #296]	; (8001bd8 <HAL_UART_RxCpltCallback+0x154>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a4a      	ldr	r2, [pc, #296]	; (8001bdc <HAL_UART_RxCpltCallback+0x158>)
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	54d1      	strb	r1, [r2, r3]
    			// Użyj formatu, który ignoruje niechciane znaki przed liczbą.
    			if (sscanf(rxBuffer, "RPM%d", &W_RPM_terminal) == 1) {
 8001ab6:	4a4a      	ldr	r2, [pc, #296]	; (8001be0 <HAL_UART_RxCpltCallback+0x15c>)
 8001ab8:	494a      	ldr	r1, [pc, #296]	; (8001be4 <HAL_UART_RxCpltCallback+0x160>)
 8001aba:	4848      	ldr	r0, [pc, #288]	; (8001bdc <HAL_UART_RxCpltCallback+0x158>)
 8001abc:	f007 fdd6 	bl	800966c <siscanf>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d12c      	bne.n	8001b20 <HAL_UART_RxCpltCallback+0x9c>
    				//ograniczenie do bezpiecznego zakresu sterowania
    				if (W_RPM_terminal < 2000) {
 8001ac6:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <HAL_UART_RxCpltCallback+0x15c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ace:	da04      	bge.n	8001ada <HAL_UART_RxCpltCallback+0x56>
    					W_RPM_terminal = 2000;
 8001ad0:	4b43      	ldr	r3, [pc, #268]	; (8001be0 <HAL_UART_RxCpltCallback+0x15c>)
 8001ad2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	e009      	b.n	8001aee <HAL_UART_RxCpltCallback+0x6a>
    				} else if (W_RPM_terminal > 15000) {
 8001ada:	4b41      	ldr	r3, [pc, #260]	; (8001be0 <HAL_UART_RxCpltCallback+0x15c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	dd03      	ble.n	8001aee <HAL_UART_RxCpltCallback+0x6a>
    					W_RPM_terminal = 15000;
 8001ae6:	4b3e      	ldr	r3, [pc, #248]	; (8001be0 <HAL_UART_RxCpltCallback+0x15c>)
 8001ae8:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001aec:	601a      	str	r2, [r3, #0]
    				}
    				W_rpm_setpoint = W_RPM_terminal;
 8001aee:	4b3c      	ldr	r3, [pc, #240]	; (8001be0 <HAL_UART_RxCpltCallback+0x15c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a3d      	ldr	r2, [pc, #244]	; (8001be8 <HAL_UART_RxCpltCallback+0x164>)
 8001af4:	6013      	str	r3, [r2, #0]
    				// Wyczyszczenie bufora po pomyślnym odczycie.
    				memset(rxBuffer, 0, sizeof(rxBuffer));
 8001af6:	2240      	movs	r2, #64	; 0x40
 8001af8:	2100      	movs	r1, #0
 8001afa:	4838      	ldr	r0, [pc, #224]	; (8001bdc <HAL_UART_RxCpltCallback+0x158>)
 8001afc:	f007 fe27 	bl	800974e <memset>
    				// Resetowanie indeksu bufora.
    				rxIndex = 0;
 8001b00:	4b35      	ldr	r3, [pc, #212]	; (8001bd8 <HAL_UART_RxCpltCallback+0x154>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
    				// Ustaw flagę oznaczającą dostępność nowych danych.
    				newDataFlag = 1;
 8001b06:	4b39      	ldr	r3, [pc, #228]	; (8001bec <HAL_UART_RxCpltCallback+0x168>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	e008      	b.n	8001b20 <HAL_UART_RxCpltCallback+0x9c>
    			} else {
    				// Obsługa błędów w przypadku niepowodzenia odczytu.
    			}
    		} else {
    			// Upewnij się, że nie przekroczysz rozmiaru bufora.
    			if (rxIndex < RX_BUFFER_SIZE - 1) {
 8001b0e:	4b32      	ldr	r3, [pc, #200]	; (8001bd8 <HAL_UART_RxCpltCallback+0x154>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b3e      	cmp	r3, #62	; 0x3e
 8001b14:	dc04      	bgt.n	8001b20 <HAL_UART_RxCpltCallback+0x9c>
    				rxIndex++;
 8001b16:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <HAL_UART_RxCpltCallback+0x154>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	4a2e      	ldr	r2, [pc, #184]	; (8001bd8 <HAL_UART_RxCpltCallback+0x154>)
 8001b1e:	6013      	str	r3, [r2, #0]
    				// Obsługa błędów w przypadku przekroczenia bufora.
    			}
    		}

    		// Ponowne włączenie odbierania przerwań z następnym bajtem w buforze.
    		HAL_UART_Receive_IT(&huart3, (uint8_t*) &rxBuffer[rxIndex], 1);
 8001b20:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <HAL_UART_RxCpltCallback+0x154>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a2d      	ldr	r2, [pc, #180]	; (8001bdc <HAL_UART_RxCpltCallback+0x158>)
 8001b26:	4413      	add	r3, r2
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4830      	ldr	r0, [pc, #192]	; (8001bf0 <HAL_UART_RxCpltCallback+0x16c>)
 8001b2e:	f005 f946 	bl	8006dbe <HAL_UART_Receive_IT>
    	}
    	if(usart_Mode == 1){
 8001b32:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <HAL_UART_RxCpltCallback+0x150>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d146      	bne.n	8001bc8 <HAL_UART_RxCpltCallback+0x144>
            // Sprawdź, czy otrzymano znak końca linii.
            if (rxBuffer[rxIndex] == '\n') {
 8001b3a:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <HAL_UART_RxCpltCallback+0x154>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a27      	ldr	r2, [pc, #156]	; (8001bdc <HAL_UART_RxCpltCallback+0x158>)
 8001b40:	5cd3      	ldrb	r3, [r2, r3]
 8001b42:	2b0a      	cmp	r3, #10
 8001b44:	d12e      	bne.n	8001ba4 <HAL_UART_RxCpltCallback+0x120>
                // Zakończ łańcuch znaków przed znakiem nowej linii, aby utworzyć poprawny string C.
                rxBuffer[rxIndex] = '\0';
 8001b46:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_UART_RxCpltCallback+0x154>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a24      	ldr	r2, [pc, #144]	; (8001bdc <HAL_UART_RxCpltCallback+0x158>)
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	54d1      	strb	r1, [r2, r3]
                // Tymczasowe zmienne do przechowywania przetworzonych wartości
                int temp_rpm;
                float temp_kp, temp_ki, temp_kd;

                // Przetwarzanie otrzymanych danych
                if (sscanf(rxBuffer, "SET:%d:%f:%f:%f", &temp_rpm, &temp_kp, &temp_ki, &temp_kd) == 4) {
 8001b50:	f107 0110 	add.w	r1, r7, #16
 8001b54:	f107 0214 	add.w	r2, r7, #20
 8001b58:	f107 0308 	add.w	r3, r7, #8
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	460b      	mov	r3, r1
 8001b66:	4923      	ldr	r1, [pc, #140]	; (8001bf4 <HAL_UART_RxCpltCallback+0x170>)
 8001b68:	481c      	ldr	r0, [pc, #112]	; (8001bdc <HAL_UART_RxCpltCallback+0x158>)
 8001b6a:	f007 fd7f 	bl	800966c <siscanf>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d120      	bne.n	8001bb6 <HAL_UART_RxCpltCallback+0x132>
                    // Przypisz przetworzone wartości do zmiennych globalnych
                    W_rpm_setpoint = temp_rpm;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	4a1c      	ldr	r2, [pc, #112]	; (8001be8 <HAL_UART_RxCpltCallback+0x164>)
 8001b78:	6013      	str	r3, [r2, #0]
                    Kp = temp_kp;
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4a1e      	ldr	r2, [pc, #120]	; (8001bf8 <HAL_UART_RxCpltCallback+0x174>)
 8001b7e:	6013      	str	r3, [r2, #0]
                    Ki = temp_ki;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4a1e      	ldr	r2, [pc, #120]	; (8001bfc <HAL_UART_RxCpltCallback+0x178>)
 8001b84:	6013      	str	r3, [r2, #0]
                    Kd = temp_kd;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <HAL_UART_RxCpltCallback+0x17c>)
 8001b8a:	6013      	str	r3, [r2, #0]

                    // Wyczyszczenie bufora po pomyślnym odczycie
                    memset(rxBuffer, 0, sizeof(rxBuffer));
 8001b8c:	2240      	movs	r2, #64	; 0x40
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4812      	ldr	r0, [pc, #72]	; (8001bdc <HAL_UART_RxCpltCallback+0x158>)
 8001b92:	f007 fddc 	bl	800974e <memset>
                    // Resetowanie indeksu bufora
                    rxIndex = 0;
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <HAL_UART_RxCpltCallback+0x154>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
                    // Ustaw flagę oznaczającą dostępność nowych danych
                    newDataFlag = 1;
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <HAL_UART_RxCpltCallback+0x168>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	e008      	b.n	8001bb6 <HAL_UART_RxCpltCallback+0x132>
                    // Obsługa błędów w przypadku niepowodzenia odczytu
                    // Możesz tutaj dodać własną logikę obsługi błędów
                }
            } else {
                // Upewnij się, że nie przekroczysz rozmiaru bufora
                if (rxIndex < RX_BUFFER_SIZE - 1) {
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <HAL_UART_RxCpltCallback+0x154>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b3e      	cmp	r3, #62	; 0x3e
 8001baa:	dc04      	bgt.n	8001bb6 <HAL_UART_RxCpltCallback+0x132>
                    rxIndex++;
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_UART_RxCpltCallback+0x154>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <HAL_UART_RxCpltCallback+0x154>)
 8001bb4:	6013      	str	r3, [r2, #0]
                    // Możesz tutaj dodać własną logikę obsługi błędów
                }
            }

            // Ponowne włączenie odbierania przerwań z następnym bajtem w buforze
            HAL_UART_Receive_IT(&huart3, (uint8_t *)&rxBuffer[rxIndex], 1);
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_UART_RxCpltCallback+0x154>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <HAL_UART_RxCpltCallback+0x158>)
 8001bbc:	4413      	add	r3, r2
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	480b      	ldr	r0, [pc, #44]	; (8001bf0 <HAL_UART_RxCpltCallback+0x16c>)
 8001bc4:	f005 f8fb 	bl	8006dbe <HAL_UART_Receive_IT>
    	}

    }
}
 8001bc8:	bf00      	nop
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40004800 	.word	0x40004800
 8001bd4:	20000bd8 	.word	0x20000bd8
 8001bd8:	20000bc4 	.word	0x20000bc4
 8001bdc:	20000b84 	.word	0x20000b84
 8001be0:	20000b68 	.word	0x20000b68
 8001be4:	0800d7f4 	.word	0x0800d7f4
 8001be8:	20000b64 	.word	0x20000b64
 8001bec:	20000bc8 	.word	0x20000bc8
 8001bf0:	200005cc 	.word	0x200005cc
 8001bf4:	0800d7fc 	.word	0x0800d7fc
 8001bf8:	20000004 	.word	0x20000004
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2000000c 	.word	0x2000000c

08001c04 <HAL_GPIO_EXTI_Callback>:

void test(){}


//jacek
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == MODE_Btn_Pin) {
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d115      	bne.n	8001c40 <HAL_GPIO_EXTI_Callback+0x3c>
		if (HAL_GPIO_ReadPin(MODE_Btn_GPIO_Port, MODE_Btn_Pin)) {
 8001c14:	2108      	movs	r1, #8
 8001c16:	4814      	ldr	r0, [pc, #80]	; (8001c68 <HAL_GPIO_EXTI_Callback+0x64>)
 8001c18:	f002 f826 	bl	8003c68 <HAL_GPIO_ReadPin>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00e      	beq.n	8001c40 <HAL_GPIO_EXTI_Callback+0x3c>
			screen_number++;
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_GPIO_EXTI_Callback+0x68>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	3301      	adds	r3, #1
 8001c28:	4a10      	ldr	r2, [pc, #64]	; (8001c6c <HAL_GPIO_EXTI_Callback+0x68>)
 8001c2a:	6013      	str	r3, [r2, #0]
			if (screen_number == 3)
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <HAL_GPIO_EXTI_Callback+0x68>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d102      	bne.n	8001c3a <HAL_GPIO_EXTI_Callback+0x36>
				screen_number = 0;
 8001c34:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_GPIO_EXTI_Callback+0x68>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
			clear_screan_flag = 1;
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(GPIO_Pin == USER_Btn_Pin){
 8001c40:	88fb      	ldrh	r3, [r7, #6]
 8001c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c46:	d10b      	bne.n	8001c60 <HAL_GPIO_EXTI_Callback+0x5c>
		usart_Mode ++;
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_GPIO_EXTI_Callback+0x70>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <HAL_GPIO_EXTI_Callback+0x70>)
 8001c50:	6013      	str	r3, [r2, #0]
		if(usart_Mode == 3){
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <HAL_GPIO_EXTI_Callback+0x70>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d102      	bne.n	8001c60 <HAL_GPIO_EXTI_Callback+0x5c>
			usart_Mode = 0;
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_GPIO_EXTI_Callback+0x70>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	20000bd0 	.word	0x20000bd0
 8001c70:	20000010 	.word	0x20000010
 8001c74:	20000bd8 	.word	0x20000bd8

08001c78 <DisplayActualInfo>:

void SysTick_Handler(void);

void DisplayActualInfo(const char line1[], const char line2[]) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
	setCursor(0, 0);
 8001c82:	2100      	movs	r1, #0
 8001c84:	2000      	movs	r0, #0
 8001c86:	f7ff fc3b 	bl	8001500 <setCursor>
	print(line1);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fc80 	bl	8001590 <print>
	setCursor(0, 1);
 8001c90:	2101      	movs	r1, #1
 8001c92:	2000      	movs	r0, #0
 8001c94:	f7ff fc34 	bl	8001500 <setCursor>
	print(line2);
 8001c98:	6838      	ldr	r0, [r7, #0]
 8001c9a:	f7ff fc79 	bl	8001590 <print>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <ShowInfo>:

void ShowInfo(char line1[], char line2[], int value) {
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b088      	sub	sp, #32
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
	static int string_len = 16;

	char string[16] = "";
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]

	sprintf(string, line2, value);
 8001cc2:	f107 0310 	add.w	r3, r7, #16
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f007 fcae 	bl	800962c <siprintf>
	DisplayActualInfo(line1, string);
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f7ff ffce 	bl	8001c78 <DisplayActualInfo>
}
 8001cdc:	bf00      	nop
 8001cde:	3720      	adds	r7, #32
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <Autorzy>:

void Autorzy() {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b0a0      	sub	sp, #128	; 0x80
 8001ce8:	af00      	add	r7, sp, #0
	struct string_pair list[4] = { { "Autorzy", "Projektu" }, { "Mateusz",
 8001cea:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <Autorzy+0x58>)
 8001cec:	463b      	mov	r3, r7
 8001cee:	4611      	mov	r1, r2
 8001cf0:	2280      	movs	r2, #128	; 0x80
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f007 fdab 	bl	800984e <memcpy>
			"Szumigalski" }, { "Jacek", "Szwed" }, { "Jakub", "Szymczak" } };
	static int num = 0;
	clear();
 8001cf8:	f7ff fbf8 	bl	80014ec <clear>
	DisplayActualInfo(list[num].line1, list[num].line2);
 8001cfc:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <Autorzy+0x5c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	463a      	mov	r2, r7
 8001d02:	015b      	lsls	r3, r3, #5
 8001d04:	18d0      	adds	r0, r2, r3
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <Autorzy+0x5c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	463a      	mov	r2, r7
 8001d0c:	015b      	lsls	r3, r3, #5
 8001d0e:	3310      	adds	r3, #16
 8001d10:	4413      	add	r3, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	f7ff ffb0 	bl	8001c78 <DisplayActualInfo>
	if (num == 3)
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <Autorzy+0x5c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d103      	bne.n	8001d28 <Autorzy+0x44>
		num = 0;
 8001d20:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <Autorzy+0x5c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
	else
		num++;
}
 8001d26:	e004      	b.n	8001d32 <Autorzy+0x4e>
		num++;
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <Autorzy+0x5c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <Autorzy+0x5c>)
 8001d30:	6013      	str	r3, [r2, #0]
}
 8001d32:	bf00      	nop
 8001d34:	3780      	adds	r7, #128	; 0x80
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	0800d80c 	.word	0x0800d80c
 8001d40:	20000be0 	.word	0x20000be0

08001d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d4a:	f001 f896 	bl	8002e7a <HAL_Init>

  /* USER CODE BEGIN Init */
	//jacek
	LiquidCrystal(GPIOD, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3,
 8001d4e:	2340      	movs	r3, #64	; 0x40
 8001d50:	9303      	str	r3, [sp, #12]
 8001d52:	2320      	movs	r3, #32
 8001d54:	9302      	str	r3, [sp, #8]
 8001d56:	2310      	movs	r3, #16
 8001d58:	9301      	str	r3, [sp, #4]
 8001d5a:	2308      	movs	r3, #8
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	2304      	movs	r3, #4
 8001d60:	2202      	movs	r2, #2
 8001d62:	2101      	movs	r1, #1
 8001d64:	4844      	ldr	r0, [pc, #272]	; (8001e78 <main+0x134>)
 8001d66:	f7ff f963 	bl	8001030 <LiquidCrystal>
				GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d6a:	f000 f8b1 	bl	8001ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d6e:	f000 fb65 	bl	800243c <MX_GPIO_Init>
  MX_ETH_Init();
 8001d72:	f000 f915 	bl	8001fa0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001d76:	f000 fb03 	bl	8002380 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d7a:	f000 fb31 	bl	80023e0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8001d7e:	f000 f9a9 	bl	80020d4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001d82:	f000 f95b 	bl	800203c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001d86:	f000 f9ff 	bl	8002188 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001d8a:	f000 fa6f 	bl	800226c <MX_TIM5_Init>
  MX_TIM9_Init();
 8001d8e:	f000 fabd 	bl	800230c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001d92:	2108      	movs	r1, #8
 8001d94:	4839      	ldr	r0, [pc, #228]	; (8001e7c <main+0x138>)
 8001d96:	f003 fb05 	bl	80053a4 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8001d9a:	4839      	ldr	r0, [pc, #228]	; (8001e80 <main+0x13c>)
 8001d9c:	f003 fa32 	bl	8005204 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001da0:	2100      	movs	r1, #0
 8001da2:	4838      	ldr	r0, [pc, #224]	; (8001e84 <main+0x140>)
 8001da4:	f003 fc5a 	bl	800565c <HAL_TIM_IC_Start_IT>


	//uruchomienie przerwania od otrzymania wiadomosci z terminala
	HAL_UART_Receive_IT(&huart3, (uint8_t*) &rxBuffer[rxIndex], 1);
 8001da8:	4b37      	ldr	r3, [pc, #220]	; (8001e88 <main+0x144>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a37      	ldr	r2, [pc, #220]	; (8001e8c <main+0x148>)
 8001dae:	4413      	add	r3, r2
 8001db0:	2201      	movs	r2, #1
 8001db2:	4619      	mov	r1, r3
 8001db4:	4836      	ldr	r0, [pc, #216]	; (8001e90 <main+0x14c>)
 8001db6:	f005 f802 	bl	8006dbe <HAL_UART_Receive_IT>



	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 10);
	HAL_TIM_Base_Start_IT(&htim9);
 8001dba:	4836      	ldr	r0, [pc, #216]	; (8001e94 <main+0x150>)
 8001dbc:	f003 fa22 	bl	8005204 <HAL_TIM_Base_Start_IT>
	//jacek
	HAL_TIM_Base_Start_IT(&htim5);
 8001dc0:	4835      	ldr	r0, [pc, #212]	; (8001e98 <main+0x154>)
 8001dc2:	f003 fa1f 	bl	8005204 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (tim5_tick) {
 8001dc6:	4b35      	ldr	r3, [pc, #212]	; (8001e9c <main+0x158>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d03c      	beq.n	8001e48 <main+0x104>
					if (clear_screan_flag) {
 8001dce:	4b34      	ldr	r3, [pc, #208]	; (8001ea0 <main+0x15c>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d004      	beq.n	8001de0 <main+0x9c>
						clear();
 8001dd6:	f7ff fb89 	bl	80014ec <clear>
						clear_screan_flag = 0;
 8001dda:	4b31      	ldr	r3, [pc, #196]	; (8001ea0 <main+0x15c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
					}

					switch (screen_number) {
 8001de0:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <main+0x160>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d028      	beq.n	8001e3a <main+0xf6>
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	dc29      	bgt.n	8001e40 <main+0xfc>
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <main+0xb2>
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d011      	beq.n	8001e18 <main+0xd4>
						break;
					case 2:
						Autorzy();
						break;
					default:
						break;
 8001df4:	e024      	b.n	8001e40 <main+0xfc>
						test_rpm = (measuredValue);
 8001df6:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <main+0x164>)
 8001df8:	edd3 7a00 	vldr	s15, [r3]
 8001dfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e00:	ee17 2a90 	vmov	r2, s15
 8001e04:	4b29      	ldr	r3, [pc, #164]	; (8001eac <main+0x168>)
 8001e06:	601a      	str	r2, [r3, #0]
						ShowInfo("Speed:", "%i RPM   ",test_rpm);
 8001e08:	4b28      	ldr	r3, [pc, #160]	; (8001eac <main+0x168>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4928      	ldr	r1, [pc, #160]	; (8001eb0 <main+0x16c>)
 8001e10:	4828      	ldr	r0, [pc, #160]	; (8001eb4 <main+0x170>)
 8001e12:	f7ff ff48 	bl	8001ca6 <ShowInfo>
						break;
 8001e16:	e014      	b.n	8001e42 <main+0xfe>
						test_rpm = (measuredValue);
 8001e18:	4b23      	ldr	r3, [pc, #140]	; (8001ea8 <main+0x164>)
 8001e1a:	edd3 7a00 	vldr	s15, [r3]
 8001e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e22:	ee17 2a90 	vmov	r2, s15
 8001e26:	4b21      	ldr	r3, [pc, #132]	; (8001eac <main+0x168>)
 8001e28:	601a      	str	r2, [r3, #0]
						ShowInfo("Usart Mode:", "%i   ",usart_Mode);
 8001e2a:	4b23      	ldr	r3, [pc, #140]	; (8001eb8 <main+0x174>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4922      	ldr	r1, [pc, #136]	; (8001ebc <main+0x178>)
 8001e32:	4823      	ldr	r0, [pc, #140]	; (8001ec0 <main+0x17c>)
 8001e34:	f7ff ff37 	bl	8001ca6 <ShowInfo>
						break;
 8001e38:	e003      	b.n	8001e42 <main+0xfe>
						Autorzy();
 8001e3a:	f7ff ff53 	bl	8001ce4 <Autorzy>
						break;
 8001e3e:	e000      	b.n	8001e42 <main+0xfe>
						break;
 8001e40:	bf00      	nop
					}
					tim5_tick = 0;
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <main+0x158>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
				}

		if(matlab_Sent){
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <main+0x180>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0ba      	beq.n	8001dc6 <main+0x82>
			sendToMatlab(measuredValue, W_rpm_setpoint, controlValue);
 8001e50:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <main+0x164>)
 8001e52:	edd3 7a00 	vldr	s15, [r3]
 8001e56:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <main+0x184>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <main+0x188>)
 8001e5c:	ed92 7a00 	vldr	s14, [r2]
 8001e60:	eef0 0a47 	vmov.f32	s1, s14
 8001e64:	4618      	mov	r0, r3
 8001e66:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6a:	f7ff fddd 	bl	8001a28 <sendToMatlab>
			matlab_Sent = 0;
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <main+0x180>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
		if (tim5_tick) {
 8001e74:	e7a7      	b.n	8001dc6 <main+0x82>
 8001e76:	bf00      	nop
 8001e78:	40020c00 	.word	0x40020c00
 8001e7c:	2000049c 	.word	0x2000049c
 8001e80:	20000450 	.word	0x20000450
 8001e84:	200004e8 	.word	0x200004e8
 8001e88:	20000bc4 	.word	0x20000bc4
 8001e8c:	20000b84 	.word	0x20000b84
 8001e90:	200005cc 	.word	0x200005cc
 8001e94:	20000580 	.word	0x20000580
 8001e98:	20000534 	.word	0x20000534
 8001e9c:	20000bcc 	.word	0x20000bcc
 8001ea0:	20000010 	.word	0x20000010
 8001ea4:	20000bd0 	.word	0x20000bd0
 8001ea8:	20000b6c 	.word	0x20000b6c
 8001eac:	20000bd4 	.word	0x20000bd4
 8001eb0:	0800d88c 	.word	0x0800d88c
 8001eb4:	0800d898 	.word	0x0800d898
 8001eb8:	20000bd8 	.word	0x20000bd8
 8001ebc:	0800d8a0 	.word	0x0800d8a0
 8001ec0:	0800d8a8 	.word	0x0800d8a8
 8001ec4:	20000bdc 	.word	0x20000bdc
 8001ec8:	20000b64 	.word	0x20000b64
 8001ecc:	20000b80 	.word	0x20000b80

08001ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b094      	sub	sp, #80	; 0x50
 8001ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed6:	f107 0320 	add.w	r3, r7, #32
 8001eda:	2230      	movs	r2, #48	; 0x30
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f007 fc35 	bl	800974e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ef4:	f002 f864 	bl	8003fc0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef8:	4b27      	ldr	r3, [pc, #156]	; (8001f98 <SystemClock_Config+0xc8>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	4a26      	ldr	r2, [pc, #152]	; (8001f98 <SystemClock_Config+0xc8>)
 8001efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f02:	6413      	str	r3, [r2, #64]	; 0x40
 8001f04:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <SystemClock_Config+0xc8>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f10:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <SystemClock_Config+0xcc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f18:	4a20      	ldr	r2, [pc, #128]	; (8001f9c <SystemClock_Config+0xcc>)
 8001f1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <SystemClock_Config+0xcc>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001f30:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f36:	2302      	movs	r3, #2
 8001f38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f40:	2304      	movs	r3, #4
 8001f42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001f44:	2348      	movs	r3, #72	; 0x48
 8001f46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f50:	f107 0320 	add.w	r3, r7, #32
 8001f54:	4618      	mov	r0, r3
 8001f56:	f002 f843 	bl	8003fe0 <HAL_RCC_OscConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f60:	f000 fb56 	bl	8002610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f64:	230f      	movs	r3, #15
 8001f66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f7a:	f107 030c 	add.w	r3, r7, #12
 8001f7e:	2102      	movs	r1, #2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f002 fad1 	bl	8004528 <HAL_RCC_ClockConfig>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f8c:	f000 fb40 	bl	8002610 <Error_Handler>
  }
}
 8001f90:	bf00      	nop
 8001f92:	3750      	adds	r7, #80	; 0x50
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40007000 	.word	0x40007000

08001fa0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <MX_ETH_Init+0x84>)
 8001fa6:	4a20      	ldr	r2, [pc, #128]	; (8002028 <MX_ETH_Init+0x88>)
 8001fa8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <MX_ETH_Init+0x8c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001fb0:	4b1e      	ldr	r3, [pc, #120]	; (800202c <MX_ETH_Init+0x8c>)
 8001fb2:	2280      	movs	r2, #128	; 0x80
 8001fb4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <MX_ETH_Init+0x8c>)
 8001fb8:	22e1      	movs	r2, #225	; 0xe1
 8001fba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	; (800202c <MX_ETH_Init+0x8c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001fc2:	4b1a      	ldr	r3, [pc, #104]	; (800202c <MX_ETH_Init+0x8c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001fc8:	4b18      	ldr	r3, [pc, #96]	; (800202c <MX_ETH_Init+0x8c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <MX_ETH_Init+0x84>)
 8001fd0:	4a16      	ldr	r2, [pc, #88]	; (800202c <MX_ETH_Init+0x8c>)
 8001fd2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <MX_ETH_Init+0x84>)
 8001fd6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001fda:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <MX_ETH_Init+0x84>)
 8001fde:	4a14      	ldr	r2, [pc, #80]	; (8002030 <MX_ETH_Init+0x90>)
 8001fe0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <MX_ETH_Init+0x84>)
 8001fe4:	4a13      	ldr	r2, [pc, #76]	; (8002034 <MX_ETH_Init+0x94>)
 8001fe6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <MX_ETH_Init+0x84>)
 8001fea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001fee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <MX_ETH_Init+0x84>)
 8001ff2:	f001 f967 	bl	80032c4 <HAL_ETH_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001ffc:	f000 fb08 	bl	8002610 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002000:	2238      	movs	r2, #56	; 0x38
 8002002:	2100      	movs	r1, #0
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <MX_ETH_Init+0x98>)
 8002006:	f007 fba2 	bl	800974e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <MX_ETH_Init+0x98>)
 800200c:	2221      	movs	r2, #33	; 0x21
 800200e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <MX_ETH_Init+0x98>)
 8002012:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8002016:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <MX_ETH_Init+0x98>)
 800201a:	2200      	movs	r2, #0
 800201c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200003a0 	.word	0x200003a0
 8002028:	40028000 	.word	0x40028000
 800202c:	20000be4 	.word	0x20000be4
 8002030:	20000288 	.word	0x20000288
 8002034:	200001e8 	.word	0x200001e8
 8002038:	20000368 	.word	0x20000368

0800203c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002042:	f107 0310 	add.w	r3, r7, #16
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <MX_TIM2_Init+0x94>)
 800205c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002060:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002062:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <MX_TIM2_Init+0x94>)
 8002064:	2247      	movs	r2, #71	; 0x47
 8002066:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <MX_TIM2_Init+0x94>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800206e:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <MX_TIM2_Init+0x94>)
 8002070:	2263      	movs	r2, #99	; 0x63
 8002072:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002074:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <MX_TIM2_Init+0x94>)
 8002076:	2200      	movs	r2, #0
 8002078:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <MX_TIM2_Init+0x94>)
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002080:	4813      	ldr	r0, [pc, #76]	; (80020d0 <MX_TIM2_Init+0x94>)
 8002082:	f003 f867 	bl	8005154 <HAL_TIM_Base_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800208c:	f000 fac0 	bl	8002610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002094:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002096:	f107 0310 	add.w	r3, r7, #16
 800209a:	4619      	mov	r1, r3
 800209c:	480c      	ldr	r0, [pc, #48]	; (80020d0 <MX_TIM2_Init+0x94>)
 800209e:	f003 fefd 	bl	8005e9c <HAL_TIM_ConfigClockSource>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80020a8:	f000 fab2 	bl	8002610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ac:	2300      	movs	r3, #0
 80020ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	4619      	mov	r1, r3
 80020b8:	4805      	ldr	r0, [pc, #20]	; (80020d0 <MX_TIM2_Init+0x94>)
 80020ba:	f004 fd03 	bl	8006ac4 <HAL_TIMEx_MasterConfigSynchronization>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020c4:	f000 faa4 	bl	8002610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020c8:	bf00      	nop
 80020ca:	3720      	adds	r7, #32
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000450 	.word	0x20000450

080020d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020da:	f107 031c 	add.w	r3, r7, #28
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020e6:	463b      	mov	r3, r7
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
 80020f4:	615a      	str	r2, [r3, #20]
 80020f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020f8:	4b21      	ldr	r3, [pc, #132]	; (8002180 <MX_TIM3_Init+0xac>)
 80020fa:	4a22      	ldr	r2, [pc, #136]	; (8002184 <MX_TIM3_Init+0xb0>)
 80020fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <MX_TIM3_Init+0xac>)
 8002100:	2247      	movs	r2, #71	; 0x47
 8002102:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002104:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <MX_TIM3_Init+0xac>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39;
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <MX_TIM3_Init+0xac>)
 800210c:	2227      	movs	r2, #39	; 0x27
 800210e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002110:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <MX_TIM3_Init+0xac>)
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <MX_TIM3_Init+0xac>)
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800211c:	4818      	ldr	r0, [pc, #96]	; (8002180 <MX_TIM3_Init+0xac>)
 800211e:	f003 f8e9 	bl	80052f4 <HAL_TIM_PWM_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002128:	f000 fa72 	bl	8002610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002134:	f107 031c 	add.w	r3, r7, #28
 8002138:	4619      	mov	r1, r3
 800213a:	4811      	ldr	r0, [pc, #68]	; (8002180 <MX_TIM3_Init+0xac>)
 800213c:	f004 fcc2 	bl	8006ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002146:	f000 fa63 	bl	8002610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800214a:	2360      	movs	r3, #96	; 0x60
 800214c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 20;
 800214e:	2314      	movs	r3, #20
 8002150:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800215a:	463b      	mov	r3, r7
 800215c:	2208      	movs	r2, #8
 800215e:	4619      	mov	r1, r3
 8002160:	4807      	ldr	r0, [pc, #28]	; (8002180 <MX_TIM3_Init+0xac>)
 8002162:	f003 fd87 	bl	8005c74 <HAL_TIM_PWM_ConfigChannel>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800216c:	f000 fa50 	bl	8002610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002170:	4803      	ldr	r0, [pc, #12]	; (8002180 <MX_TIM3_Init+0xac>)
 8002172:	f000 fbed 	bl	8002950 <HAL_TIM_MspPostInit>

}
 8002176:	bf00      	nop
 8002178:	3728      	adds	r7, #40	; 0x28
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	2000049c 	.word	0x2000049c
 8002184:	40000400 	.word	0x40000400

08002188 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08c      	sub	sp, #48	; 0x30
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218e:	f107 0320 	add.w	r3, r7, #32
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021a8:	1d3b      	adds	r3, r7, #4
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021b4:	4b2b      	ldr	r3, [pc, #172]	; (8002264 <MX_TIM4_Init+0xdc>)
 80021b6:	4a2c      	ldr	r2, [pc, #176]	; (8002268 <MX_TIM4_Init+0xe0>)
 80021b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80021ba:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <MX_TIM4_Init+0xdc>)
 80021bc:	2247      	movs	r2, #71	; 0x47
 80021be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c0:	4b28      	ldr	r3, [pc, #160]	; (8002264 <MX_TIM4_Init+0xdc>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 80021c6:	4b27      	ldr	r3, [pc, #156]	; (8002264 <MX_TIM4_Init+0xdc>)
 80021c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ce:	4b25      	ldr	r3, [pc, #148]	; (8002264 <MX_TIM4_Init+0xdc>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d4:	4b23      	ldr	r3, [pc, #140]	; (8002264 <MX_TIM4_Init+0xdc>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021da:	4822      	ldr	r0, [pc, #136]	; (8002264 <MX_TIM4_Init+0xdc>)
 80021dc:	f002 ffba 	bl	8005154 <HAL_TIM_Base_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80021e6:	f000 fa13 	bl	8002610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021f0:	f107 0320 	add.w	r3, r7, #32
 80021f4:	4619      	mov	r1, r3
 80021f6:	481b      	ldr	r0, [pc, #108]	; (8002264 <MX_TIM4_Init+0xdc>)
 80021f8:	f003 fe50 	bl	8005e9c <HAL_TIM_ConfigClockSource>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002202:	f000 fa05 	bl	8002610 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002206:	4817      	ldr	r0, [pc, #92]	; (8002264 <MX_TIM4_Init+0xdc>)
 8002208:	f003 f9c6 	bl	8005598 <HAL_TIM_IC_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002212:	f000 f9fd 	bl	8002610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800221e:	f107 0314 	add.w	r3, r7, #20
 8002222:	4619      	mov	r1, r3
 8002224:	480f      	ldr	r0, [pc, #60]	; (8002264 <MX_TIM4_Init+0xdc>)
 8002226:	f004 fc4d 	bl	8006ac4 <HAL_TIMEx_MasterConfigSynchronization>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8002230:	f000 f9ee 	bl	8002610 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002234:	2300      	movs	r3, #0
 8002236:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002238:	2301      	movs	r3, #1
 800223a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	2200      	movs	r2, #0
 8002248:	4619      	mov	r1, r3
 800224a:	4806      	ldr	r0, [pc, #24]	; (8002264 <MX_TIM4_Init+0xdc>)
 800224c:	f003 fc75 	bl	8005b3a <HAL_TIM_IC_ConfigChannel>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8002256:	f000 f9db 	bl	8002610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800225a:	bf00      	nop
 800225c:	3730      	adds	r7, #48	; 0x30
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200004e8 	.word	0x200004e8
 8002268:	40000800 	.word	0x40000800

0800226c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002272:	f107 0310 	add.w	r3, r7, #16
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	609a      	str	r2, [r3, #8]
 800227e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800228a:	4b1e      	ldr	r3, [pc, #120]	; (8002304 <MX_TIM5_Init+0x98>)
 800228c:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <MX_TIM5_Init+0x9c>)
 800228e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 14399;
 8002290:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <MX_TIM5_Init+0x98>)
 8002292:	f643 023f 	movw	r2, #14399	; 0x383f
 8002296:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002298:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <MX_TIM5_Init+0x98>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 7999;
 800229e:	4b19      	ldr	r3, [pc, #100]	; (8002304 <MX_TIM5_Init+0x98>)
 80022a0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80022a4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a6:	4b17      	ldr	r3, [pc, #92]	; (8002304 <MX_TIM5_Init+0x98>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ac:	4b15      	ldr	r3, [pc, #84]	; (8002304 <MX_TIM5_Init+0x98>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022b2:	4814      	ldr	r0, [pc, #80]	; (8002304 <MX_TIM5_Init+0x98>)
 80022b4:	f002 ff4e 	bl	8005154 <HAL_TIM_Base_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80022be:	f000 f9a7 	bl	8002610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80022c8:	f107 0310 	add.w	r3, r7, #16
 80022cc:	4619      	mov	r1, r3
 80022ce:	480d      	ldr	r0, [pc, #52]	; (8002304 <MX_TIM5_Init+0x98>)
 80022d0:	f003 fde4 	bl	8005e9c <HAL_TIM_ConfigClockSource>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80022da:	f000 f999 	bl	8002610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	4619      	mov	r1, r3
 80022ea:	4806      	ldr	r0, [pc, #24]	; (8002304 <MX_TIM5_Init+0x98>)
 80022ec:	f004 fbea 	bl	8006ac4 <HAL_TIMEx_MasterConfigSynchronization>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80022f6:	f000 f98b 	bl	8002610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80022fa:	bf00      	nop
 80022fc:	3720      	adds	r7, #32
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000534 	.word	0x20000534
 8002308:	40000c00 	.word	0x40000c00

0800230c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002312:	463b      	mov	r3, r7
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <MX_TIM9_Init+0x6c>)
 8002320:	4a16      	ldr	r2, [pc, #88]	; (800237c <MX_TIM9_Init+0x70>)
 8002322:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 7199;
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <MX_TIM9_Init+0x6c>)
 8002326:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800232a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <MX_TIM9_Init+0x6c>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <MX_TIM9_Init+0x6c>)
 8002334:	f242 720f 	movw	r2, #9999	; 0x270f
 8002338:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800233a:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <MX_TIM9_Init+0x6c>)
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002340:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <MX_TIM9_Init+0x6c>)
 8002342:	2200      	movs	r2, #0
 8002344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002346:	480c      	ldr	r0, [pc, #48]	; (8002378 <MX_TIM9_Init+0x6c>)
 8002348:	f002 ff04 	bl	8005154 <HAL_TIM_Base_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8002352:	f000 f95d 	bl	8002610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800235a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800235c:	463b      	mov	r3, r7
 800235e:	4619      	mov	r1, r3
 8002360:	4805      	ldr	r0, [pc, #20]	; (8002378 <MX_TIM9_Init+0x6c>)
 8002362:	f003 fd9b 	bl	8005e9c <HAL_TIM_ConfigClockSource>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 800236c:	f000 f950 	bl	8002610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000580 	.word	0x20000580
 800237c:	40014000 	.word	0x40014000

08002380 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <MX_USART3_UART_Init+0x58>)
 8002386:	4a15      	ldr	r2, [pc, #84]	; (80023dc <MX_USART3_UART_Init+0x5c>)
 8002388:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800238a:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <MX_USART3_UART_Init+0x58>)
 800238c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002390:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <MX_USART3_UART_Init+0x58>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <MX_USART3_UART_Init+0x58>)
 800239a:	2200      	movs	r2, #0
 800239c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <MX_USART3_UART_Init+0x58>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <MX_USART3_UART_Init+0x58>)
 80023a6:	220c      	movs	r2, #12
 80023a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023aa:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <MX_USART3_UART_Init+0x58>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <MX_USART3_UART_Init+0x58>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <MX_USART3_UART_Init+0x58>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <MX_USART3_UART_Init+0x58>)
 80023be:	2200      	movs	r2, #0
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023c2:	4805      	ldr	r0, [pc, #20]	; (80023d8 <MX_USART3_UART_Init+0x58>)
 80023c4:	f004 fc2a 	bl	8006c1c <HAL_UART_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80023ce:	f000 f91f 	bl	8002610 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200005cc 	.word	0x200005cc
 80023dc:	40004800 	.word	0x40004800

080023e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80023ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023ee:	2206      	movs	r2, #6
 80023f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023f4:	2202      	movs	r2, #2
 80023f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80023f8:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002400:	2202      	movs	r2, #2
 8002402:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002406:	2201      	movs	r2, #1
 8002408:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800240c:	2200      	movs	r2, #0
 800240e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002412:	2200      	movs	r2, #0
 8002414:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002418:	2201      	movs	r2, #1
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800241e:	2200      	movs	r2, #0
 8002420:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002422:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002424:	f001 fc84 	bl	8003d30 <HAL_PCD_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800242e:	f000 f8ef 	bl	8002610 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000654 	.word	0x20000654

0800243c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08c      	sub	sp, #48	; 0x30
 8002440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002442:	f107 031c 	add.w	r3, r7, #28
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	605a      	str	r2, [r3, #4]
 800244c:	609a      	str	r2, [r3, #8]
 800244e:	60da      	str	r2, [r3, #12]
 8002450:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002452:	4b6a      	ldr	r3, [pc, #424]	; (80025fc <MX_GPIO_Init+0x1c0>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a69      	ldr	r2, [pc, #420]	; (80025fc <MX_GPIO_Init+0x1c0>)
 8002458:	f043 0310 	orr.w	r3, r3, #16
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b67      	ldr	r3, [pc, #412]	; (80025fc <MX_GPIO_Init+0x1c0>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800246a:	4b64      	ldr	r3, [pc, #400]	; (80025fc <MX_GPIO_Init+0x1c0>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a63      	ldr	r2, [pc, #396]	; (80025fc <MX_GPIO_Init+0x1c0>)
 8002470:	f043 0304 	orr.w	r3, r3, #4
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b61      	ldr	r3, [pc, #388]	; (80025fc <MX_GPIO_Init+0x1c0>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002482:	4b5e      	ldr	r3, [pc, #376]	; (80025fc <MX_GPIO_Init+0x1c0>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a5d      	ldr	r2, [pc, #372]	; (80025fc <MX_GPIO_Init+0x1c0>)
 8002488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b5b      	ldr	r3, [pc, #364]	; (80025fc <MX_GPIO_Init+0x1c0>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	4b58      	ldr	r3, [pc, #352]	; (80025fc <MX_GPIO_Init+0x1c0>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a57      	ldr	r2, [pc, #348]	; (80025fc <MX_GPIO_Init+0x1c0>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b55      	ldr	r3, [pc, #340]	; (80025fc <MX_GPIO_Init+0x1c0>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b2:	4b52      	ldr	r3, [pc, #328]	; (80025fc <MX_GPIO_Init+0x1c0>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a51      	ldr	r2, [pc, #324]	; (80025fc <MX_GPIO_Init+0x1c0>)
 80024b8:	f043 0302 	orr.w	r3, r3, #2
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b4f      	ldr	r3, [pc, #316]	; (80025fc <MX_GPIO_Init+0x1c0>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ca:	4b4c      	ldr	r3, [pc, #304]	; (80025fc <MX_GPIO_Init+0x1c0>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	4a4b      	ldr	r2, [pc, #300]	; (80025fc <MX_GPIO_Init+0x1c0>)
 80024d0:	f043 0308 	orr.w	r3, r3, #8
 80024d4:	6313      	str	r3, [r2, #48]	; 0x30
 80024d6:	4b49      	ldr	r3, [pc, #292]	; (80025fc <MX_GPIO_Init+0x1c0>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024e2:	4b46      	ldr	r3, [pc, #280]	; (80025fc <MX_GPIO_Init+0x1c0>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a45      	ldr	r2, [pc, #276]	; (80025fc <MX_GPIO_Init+0x1c0>)
 80024e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b43      	ldr	r3, [pc, #268]	; (80025fc <MX_GPIO_Init+0x1c0>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80024fa:	2200      	movs	r2, #0
 80024fc:	f244 0181 	movw	r1, #16513	; 0x4081
 8002500:	483f      	ldr	r0, [pc, #252]	; (8002600 <MX_GPIO_Init+0x1c4>)
 8002502:	f001 fbc9 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002506:	2200      	movs	r2, #0
 8002508:	2140      	movs	r1, #64	; 0x40
 800250a:	483e      	ldr	r0, [pc, #248]	; (8002604 <MX_GPIO_Init+0x1c8>)
 800250c:	f001 fbc4 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MODE_Btn_Pin */
  GPIO_InitStruct.Pin = MODE_Btn_Pin;
 8002510:	2308      	movs	r3, #8
 8002512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002514:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002518:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800251a:	2302      	movs	r3, #2
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MODE_Btn_GPIO_Port, &GPIO_InitStruct);
 800251e:	f107 031c 	add.w	r3, r7, #28
 8002522:	4619      	mov	r1, r3
 8002524:	4838      	ldr	r0, [pc, #224]	; (8002608 <MX_GPIO_Init+0x1cc>)
 8002526:	f001 f9f3 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_Btn_Pin RPM_PC0_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin|RPM_PC0_Pin;
 800252a:	f242 0301 	movw	r3, #8193	; 0x2001
 800252e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002530:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002534:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800253a:	f107 031c 	add.w	r3, r7, #28
 800253e:	4619      	mov	r1, r3
 8002540:	4832      	ldr	r0, [pc, #200]	; (800260c <MX_GPIO_Init+0x1d0>)
 8002542:	f001 f9e5 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002546:	f244 0381 	movw	r3, #16513	; 0x4081
 800254a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800254c:	2301      	movs	r3, #1
 800254e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002554:	2300      	movs	r3, #0
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002558:	f107 031c 	add.w	r3, r7, #28
 800255c:	4619      	mov	r1, r3
 800255e:	4828      	ldr	r0, [pc, #160]	; (8002600 <MX_GPIO_Init+0x1c4>)
 8002560:	f001 f9d6 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1_RPM_Pin */
  GPIO_InitStruct.Pin = PB1_RPM_Pin;
 8002564:	2302      	movs	r3, #2
 8002566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002568:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800256c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PB1_RPM_GPIO_Port, &GPIO_InitStruct);
 8002572:	f107 031c 	add.w	r3, r7, #28
 8002576:	4619      	mov	r1, r3
 8002578:	4821      	ldr	r0, [pc, #132]	; (8002600 <MX_GPIO_Init+0x1c4>)
 800257a:	f001 f9c9 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800257e:	2340      	movs	r3, #64	; 0x40
 8002580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002582:	2301      	movs	r3, #1
 8002584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2300      	movs	r3, #0
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800258e:	f107 031c 	add.w	r3, r7, #28
 8002592:	4619      	mov	r1, r3
 8002594:	481b      	ldr	r0, [pc, #108]	; (8002604 <MX_GPIO_Init+0x1c8>)
 8002596:	f001 f9bb 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80025a6:	f107 031c 	add.w	r3, r7, #28
 80025aa:	4619      	mov	r1, r3
 80025ac:	4815      	ldr	r0, [pc, #84]	; (8002604 <MX_GPIO_Init+0x1c8>)
 80025ae:	f001 f9af 	bl	8003910 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	2006      	movs	r0, #6
 80025b8:	f000 fdbb 	bl	8003132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80025bc:	2006      	movs	r0, #6
 80025be:	f000 fdd4 	bl	800316a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2100      	movs	r1, #0
 80025c6:	2007      	movs	r0, #7
 80025c8:	f000 fdb3 	bl	8003132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80025cc:	2007      	movs	r0, #7
 80025ce:	f000 fdcc 	bl	800316a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	2009      	movs	r0, #9
 80025d8:	f000 fdab 	bl	8003132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80025dc:	2009      	movs	r0, #9
 80025de:	f000 fdc4 	bl	800316a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	2100      	movs	r1, #0
 80025e6:	2028      	movs	r0, #40	; 0x28
 80025e8:	f000 fda3 	bl	8003132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025ec:	2028      	movs	r0, #40	; 0x28
 80025ee:	f000 fdbc 	bl	800316a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025f2:	bf00      	nop
 80025f4:	3730      	adds	r7, #48	; 0x30
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800
 8002600:	40020400 	.word	0x40020400
 8002604:	40021800 	.word	0x40021800
 8002608:	40021000 	.word	0x40021000
 800260c:	40020800 	.word	0x40020800

08002610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002614:	b672      	cpsid	i
}
 8002616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002618:	e7fe      	b.n	8002618 <Error_Handler+0x8>
	...

0800261c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002622:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <HAL_MspInit+0x44>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	4a0e      	ldr	r2, [pc, #56]	; (8002660 <HAL_MspInit+0x44>)
 8002628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262c:	6413      	str	r3, [r2, #64]	; 0x40
 800262e:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <HAL_MspInit+0x44>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263a:	4b09      	ldr	r3, [pc, #36]	; (8002660 <HAL_MspInit+0x44>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	4a08      	ldr	r2, [pc, #32]	; (8002660 <HAL_MspInit+0x44>)
 8002640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002644:	6453      	str	r3, [r2, #68]	; 0x44
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_MspInit+0x44>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800

08002664 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08e      	sub	sp, #56	; 0x38
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a4e      	ldr	r2, [pc, #312]	; (80027bc <HAL_ETH_MspInit+0x158>)
 8002682:	4293      	cmp	r3, r2
 8002684:	f040 8096 	bne.w	80027b4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002688:	4b4d      	ldr	r3, [pc, #308]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	4a4c      	ldr	r2, [pc, #304]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 800268e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002692:	6313      	str	r3, [r2, #48]	; 0x30
 8002694:	4b4a      	ldr	r3, [pc, #296]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269c:	623b      	str	r3, [r7, #32]
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	4b47      	ldr	r3, [pc, #284]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	4a46      	ldr	r2, [pc, #280]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 80026a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026aa:	6313      	str	r3, [r2, #48]	; 0x30
 80026ac:	4b44      	ldr	r3, [pc, #272]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	4b41      	ldr	r3, [pc, #260]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	4a40      	ldr	r2, [pc, #256]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 80026be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026c2:	6313      	str	r3, [r2, #48]	; 0x30
 80026c4:	4b3e      	ldr	r3, [pc, #248]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d0:	4b3b      	ldr	r3, [pc, #236]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	4a3a      	ldr	r2, [pc, #232]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 80026d6:	f043 0304 	orr.w	r3, r3, #4
 80026da:	6313      	str	r3, [r2, #48]	; 0x30
 80026dc:	4b38      	ldr	r3, [pc, #224]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e8:	4b35      	ldr	r3, [pc, #212]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	4a34      	ldr	r2, [pc, #208]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6313      	str	r3, [r2, #48]	; 0x30
 80026f4:	4b32      	ldr	r3, [pc, #200]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002700:	4b2f      	ldr	r3, [pc, #188]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	4a2e      	ldr	r2, [pc, #184]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	6313      	str	r3, [r2, #48]	; 0x30
 800270c:	4b2c      	ldr	r3, [pc, #176]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002718:	4b29      	ldr	r3, [pc, #164]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	4a28      	ldr	r2, [pc, #160]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 800271e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002722:	6313      	str	r3, [r2, #48]	; 0x30
 8002724:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <HAL_ETH_MspInit+0x15c>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002730:	2332      	movs	r3, #50	; 0x32
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002734:	2302      	movs	r3, #2
 8002736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273c:	2303      	movs	r3, #3
 800273e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002740:	230b      	movs	r3, #11
 8002742:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002748:	4619      	mov	r1, r3
 800274a:	481e      	ldr	r0, [pc, #120]	; (80027c4 <HAL_ETH_MspInit+0x160>)
 800274c:	f001 f8e0 	bl	8003910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002750:	2386      	movs	r3, #134	; 0x86
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002754:	2302      	movs	r3, #2
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275c:	2303      	movs	r3, #3
 800275e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002760:	230b      	movs	r3, #11
 8002762:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002768:	4619      	mov	r1, r3
 800276a:	4817      	ldr	r0, [pc, #92]	; (80027c8 <HAL_ETH_MspInit+0x164>)
 800276c:	f001 f8d0 	bl	8003910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277e:	2303      	movs	r3, #3
 8002780:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002782:	230b      	movs	r3, #11
 8002784:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800278a:	4619      	mov	r1, r3
 800278c:	480f      	ldr	r0, [pc, #60]	; (80027cc <HAL_ETH_MspInit+0x168>)
 800278e:	f001 f8bf 	bl	8003910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002792:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002798:	2302      	movs	r3, #2
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a0:	2303      	movs	r3, #3
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027a4:	230b      	movs	r3, #11
 80027a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ac:	4619      	mov	r1, r3
 80027ae:	4808      	ldr	r0, [pc, #32]	; (80027d0 <HAL_ETH_MspInit+0x16c>)
 80027b0:	f001 f8ae 	bl	8003910 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80027b4:	bf00      	nop
 80027b6:	3738      	adds	r7, #56	; 0x38
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40028000 	.word	0x40028000
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020800 	.word	0x40020800
 80027c8:	40020000 	.word	0x40020000
 80027cc:	40020400 	.word	0x40020400
 80027d0:	40021800 	.word	0x40021800

080027d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08c      	sub	sp, #48	; 0x30
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 031c 	add.w	r3, r7, #28
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f4:	d114      	bne.n	8002820 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027f6:	4b41      	ldr	r3, [pc, #260]	; (80028fc <HAL_TIM_Base_MspInit+0x128>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	4a40      	ldr	r2, [pc, #256]	; (80028fc <HAL_TIM_Base_MspInit+0x128>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6413      	str	r3, [r2, #64]	; 0x40
 8002802:	4b3e      	ldr	r3, [pc, #248]	; (80028fc <HAL_TIM_Base_MspInit+0x128>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	61bb      	str	r3, [r7, #24]
 800280c:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800280e:	2200      	movs	r2, #0
 8002810:	2100      	movs	r1, #0
 8002812:	201c      	movs	r0, #28
 8002814:	f000 fc8d 	bl	8003132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002818:	201c      	movs	r0, #28
 800281a:	f000 fca6 	bl	800316a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800281e:	e069      	b.n	80028f4 <HAL_TIM_Base_MspInit+0x120>
  else if(htim_base->Instance==TIM4)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a36      	ldr	r2, [pc, #216]	; (8002900 <HAL_TIM_Base_MspInit+0x12c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d131      	bne.n	800288e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800282a:	4b34      	ldr	r3, [pc, #208]	; (80028fc <HAL_TIM_Base_MspInit+0x128>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	4a33      	ldr	r2, [pc, #204]	; (80028fc <HAL_TIM_Base_MspInit+0x128>)
 8002830:	f043 0304 	orr.w	r3, r3, #4
 8002834:	6413      	str	r3, [r2, #64]	; 0x40
 8002836:	4b31      	ldr	r3, [pc, #196]	; (80028fc <HAL_TIM_Base_MspInit+0x128>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002842:	4b2e      	ldr	r3, [pc, #184]	; (80028fc <HAL_TIM_Base_MspInit+0x128>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4a2d      	ldr	r2, [pc, #180]	; (80028fc <HAL_TIM_Base_MspInit+0x128>)
 8002848:	f043 0308 	orr.w	r3, r3, #8
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
 800284e:	4b2b      	ldr	r3, [pc, #172]	; (80028fc <HAL_TIM_Base_MspInit+0x128>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800285a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800285e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002860:	2302      	movs	r3, #2
 8002862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002864:	2301      	movs	r3, #1
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002868:	2300      	movs	r3, #0
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800286c:	2302      	movs	r3, #2
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002870:	f107 031c 	add.w	r3, r7, #28
 8002874:	4619      	mov	r1, r3
 8002876:	4823      	ldr	r0, [pc, #140]	; (8002904 <HAL_TIM_Base_MspInit+0x130>)
 8002878:	f001 f84a 	bl	8003910 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800287c:	2200      	movs	r2, #0
 800287e:	2100      	movs	r1, #0
 8002880:	201e      	movs	r0, #30
 8002882:	f000 fc56 	bl	8003132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002886:	201e      	movs	r0, #30
 8002888:	f000 fc6f 	bl	800316a <HAL_NVIC_EnableIRQ>
}
 800288c:	e032      	b.n	80028f4 <HAL_TIM_Base_MspInit+0x120>
  else if(htim_base->Instance==TIM5)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <HAL_TIM_Base_MspInit+0x134>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d114      	bne.n	80028c2 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002898:	4b18      	ldr	r3, [pc, #96]	; (80028fc <HAL_TIM_Base_MspInit+0x128>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	4a17      	ldr	r2, [pc, #92]	; (80028fc <HAL_TIM_Base_MspInit+0x128>)
 800289e:	f043 0308 	orr.w	r3, r3, #8
 80028a2:	6413      	str	r3, [r2, #64]	; 0x40
 80028a4:	4b15      	ldr	r3, [pc, #84]	; (80028fc <HAL_TIM_Base_MspInit+0x128>)
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80028b0:	2200      	movs	r2, #0
 80028b2:	2100      	movs	r1, #0
 80028b4:	2032      	movs	r0, #50	; 0x32
 80028b6:	f000 fc3c 	bl	8003132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80028ba:	2032      	movs	r0, #50	; 0x32
 80028bc:	f000 fc55 	bl	800316a <HAL_NVIC_EnableIRQ>
}
 80028c0:	e018      	b.n	80028f4 <HAL_TIM_Base_MspInit+0x120>
  else if(htim_base->Instance==TIM9)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a11      	ldr	r2, [pc, #68]	; (800290c <HAL_TIM_Base_MspInit+0x138>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d113      	bne.n	80028f4 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_TIM_Base_MspInit+0x128>)
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <HAL_TIM_Base_MspInit+0x128>)
 80028d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d6:	6453      	str	r3, [r2, #68]	; 0x44
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <HAL_TIM_Base_MspInit+0x128>)
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80028e4:	2200      	movs	r2, #0
 80028e6:	2100      	movs	r1, #0
 80028e8:	2018      	movs	r0, #24
 80028ea:	f000 fc22 	bl	8003132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80028ee:	2018      	movs	r0, #24
 80028f0:	f000 fc3b 	bl	800316a <HAL_NVIC_EnableIRQ>
}
 80028f4:	bf00      	nop
 80028f6:	3730      	adds	r7, #48	; 0x30
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40023800 	.word	0x40023800
 8002900:	40000800 	.word	0x40000800
 8002904:	40020c00 	.word	0x40020c00
 8002908:	40000c00 	.word	0x40000c00
 800290c:	40014000 	.word	0x40014000

08002910 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <HAL_TIM_PWM_MspInit+0x38>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10b      	bne.n	800293a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002922:	4b0a      	ldr	r3, [pc, #40]	; (800294c <HAL_TIM_PWM_MspInit+0x3c>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	4a09      	ldr	r2, [pc, #36]	; (800294c <HAL_TIM_PWM_MspInit+0x3c>)
 8002928:	f043 0302 	orr.w	r3, r3, #2
 800292c:	6413      	str	r3, [r2, #64]	; 0x40
 800292e:	4b07      	ldr	r3, [pc, #28]	; (800294c <HAL_TIM_PWM_MspInit+0x3c>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40000400 	.word	0x40000400
 800294c:	40023800 	.word	0x40023800

08002950 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 030c 	add.w	r3, r7, #12
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a11      	ldr	r2, [pc, #68]	; (80029b4 <HAL_TIM_MspPostInit+0x64>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d11c      	bne.n	80029ac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <HAL_TIM_MspPostInit+0x68>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	4a10      	ldr	r2, [pc, #64]	; (80029b8 <HAL_TIM_MspPostInit+0x68>)
 8002978:	f043 0304 	orr.w	r3, r3, #4
 800297c:	6313      	str	r3, [r2, #48]	; 0x30
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <HAL_TIM_MspPostInit+0x68>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800298a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800298e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002990:	2302      	movs	r3, #2
 8002992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002998:	2300      	movs	r3, #0
 800299a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800299c:	2302      	movs	r3, #2
 800299e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a0:	f107 030c 	add.w	r3, r7, #12
 80029a4:	4619      	mov	r1, r3
 80029a6:	4805      	ldr	r0, [pc, #20]	; (80029bc <HAL_TIM_MspPostInit+0x6c>)
 80029a8:	f000 ffb2 	bl	8003910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80029ac:	bf00      	nop
 80029ae:	3720      	adds	r7, #32
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40000400 	.word	0x40000400
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40020800 	.word	0x40020800

080029c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b0aa      	sub	sp, #168	; 0xa8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029d8:	f107 0310 	add.w	r3, r7, #16
 80029dc:	2284      	movs	r2, #132	; 0x84
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f006 feb4 	bl	800974e <memset>
  if(huart->Instance==USART3)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a26      	ldr	r2, [pc, #152]	; (8002a84 <HAL_UART_MspInit+0xc4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d144      	bne.n	8002a7a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80029f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80029f6:	2300      	movs	r3, #0
 80029f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029fa:	f107 0310 	add.w	r3, r7, #16
 80029fe:	4618      	mov	r0, r3
 8002a00:	f001 ffb8 	bl	8004974 <HAL_RCCEx_PeriphCLKConfig>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002a0a:	f7ff fe01 	bl	8002610 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a0e:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <HAL_UART_MspInit+0xc8>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	4a1d      	ldr	r2, [pc, #116]	; (8002a88 <HAL_UART_MspInit+0xc8>)
 8002a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a18:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <HAL_UART_MspInit+0xc8>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a26:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <HAL_UART_MspInit+0xc8>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <HAL_UART_MspInit+0xc8>)
 8002a2c:	f043 0308 	orr.w	r3, r3, #8
 8002a30:	6313      	str	r3, [r2, #48]	; 0x30
 8002a32:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <HAL_UART_MspInit+0xc8>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002a3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a46:	2302      	movs	r3, #2
 8002a48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a52:	2303      	movs	r3, #3
 8002a54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a58:	2307      	movs	r3, #7
 8002a5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a5e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a62:	4619      	mov	r1, r3
 8002a64:	4809      	ldr	r0, [pc, #36]	; (8002a8c <HAL_UART_MspInit+0xcc>)
 8002a66:	f000 ff53 	bl	8003910 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	2027      	movs	r0, #39	; 0x27
 8002a70:	f000 fb5f 	bl	8003132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a74:	2027      	movs	r0, #39	; 0x27
 8002a76:	f000 fb78 	bl	800316a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a7a:	bf00      	nop
 8002a7c:	37a8      	adds	r7, #168	; 0xa8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40004800 	.word	0x40004800
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40020c00 	.word	0x40020c00

08002a90 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b0ac      	sub	sp, #176	; 0xb0
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002aa8:	f107 0318 	add.w	r3, r7, #24
 8002aac:	2284      	movs	r2, #132	; 0x84
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f006 fe4c 	bl	800974e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002abe:	d159      	bne.n	8002b74 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002ac0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ac4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002acc:	f107 0318 	add.w	r3, r7, #24
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f001 ff4f 	bl	8004974 <HAL_RCCEx_PeriphCLKConfig>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002adc:	f7ff fd98 	bl	8002610 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae0:	4b26      	ldr	r3, [pc, #152]	; (8002b7c <HAL_PCD_MspInit+0xec>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	4a25      	ldr	r2, [pc, #148]	; (8002b7c <HAL_PCD_MspInit+0xec>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6313      	str	r3, [r2, #48]	; 0x30
 8002aec:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <HAL_PCD_MspInit+0xec>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002af8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002afc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002b12:	230a      	movs	r3, #10
 8002b14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4818      	ldr	r0, [pc, #96]	; (8002b80 <HAL_PCD_MspInit+0xf0>)
 8002b20:	f000 fef6 	bl	8003910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002b38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4810      	ldr	r0, [pc, #64]	; (8002b80 <HAL_PCD_MspInit+0xf0>)
 8002b40:	f000 fee6 	bl	8003910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002b44:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <HAL_PCD_MspInit+0xec>)
 8002b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b48:	4a0c      	ldr	r2, [pc, #48]	; (8002b7c <HAL_PCD_MspInit+0xec>)
 8002b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b4e:	6353      	str	r3, [r2, #52]	; 0x34
 8002b50:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <HAL_PCD_MspInit+0xec>)
 8002b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <HAL_PCD_MspInit+0xec>)
 8002b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b60:	4a06      	ldr	r2, [pc, #24]	; (8002b7c <HAL_PCD_MspInit+0xec>)
 8002b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b66:	6453      	str	r3, [r2, #68]	; 0x44
 8002b68:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <HAL_PCD_MspInit+0xec>)
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002b74:	bf00      	nop
 8002b76:	37b0      	adds	r7, #176	; 0xb0
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40020000 	.word	0x40020000

08002b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b88:	e7fe      	b.n	8002b88 <NMI_Handler+0x4>

08002b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b8e:	e7fe      	b.n	8002b8e <HardFault_Handler+0x4>

08002b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b94:	e7fe      	b.n	8002b94 <MemManage_Handler+0x4>

08002b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b96:	b480      	push	{r7}
 8002b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b9a:	e7fe      	b.n	8002b9a <BusFault_Handler+0x4>

08002b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ba0:	e7fe      	b.n	8002ba0 <UsageFault_Handler+0x4>

08002ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bd0:	f000 f990 	bl	8002ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bd4:	bf00      	nop
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPM_PC0_Pin);
 8002bdc:	2001      	movs	r0, #1
 8002bde:	f001 f88f 	bl	8003d00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB1_RPM_Pin);
 8002bea:	2002      	movs	r0, #2
 8002bec:	f001 f888 	bl	8003d00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002bf0:	bf00      	nop
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_Btn_Pin);
 8002bf8:	2008      	movs	r0, #8
 8002bfa:	f001 f881 	bl	8003d00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002c08:	4802      	ldr	r0, [pc, #8]	; (8002c14 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002c0a:	f002 fe77 	bl	80058fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000580 	.word	0x20000580

08002c18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c1c:	4802      	ldr	r0, [pc, #8]	; (8002c28 <TIM2_IRQHandler+0x10>)
 8002c1e:	f002 fe6d 	bl	80058fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000450 	.word	0x20000450

08002c2c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c30:	4802      	ldr	r0, [pc, #8]	; (8002c3c <TIM4_IRQHandler+0x10>)
 8002c32:	f002 fe63 	bl	80058fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200004e8 	.word	0x200004e8

08002c40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c44:	4802      	ldr	r0, [pc, #8]	; (8002c50 <USART3_IRQHandler+0x10>)
 8002c46:	f004 f8ff 	bl	8006e48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200005cc 	.word	0x200005cc

08002c54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002c58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c5c:	f001 f850 	bl	8003d00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <TIM5_IRQHandler+0x10>)
 8002c6a:	f002 fe47 	bl	80058fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000534 	.word	0x20000534

08002c78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  return 1;
 8002c7c:	2301      	movs	r3, #1
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <_kill>:

int _kill(int pid, int sig)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c92:	f006 fdaf 	bl	80097f4 <__errno>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2216      	movs	r2, #22
 8002c9a:	601a      	str	r2, [r3, #0]
  return -1;
 8002c9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <_exit>:

void _exit (int status)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff ffe7 	bl	8002c88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cba:	e7fe      	b.n	8002cba <_exit+0x12>

08002cbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	e00a      	b.n	8002ce4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cce:	f3af 8000 	nop.w
 8002cd2:	4601      	mov	r1, r0
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	60ba      	str	r2, [r7, #8]
 8002cda:	b2ca      	uxtb	r2, r1
 8002cdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	dbf0      	blt.n	8002cce <_read+0x12>
  }

  return len;
 8002cec:	687b      	ldr	r3, [r7, #4]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	e009      	b.n	8002d1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	60ba      	str	r2, [r7, #8]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	dbf1      	blt.n	8002d08 <_write+0x12>
  }
  return len;
 8002d24:	687b      	ldr	r3, [r7, #4]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <_close>:

int _close(int file)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d56:	605a      	str	r2, [r3, #4]
  return 0;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <_isatty>:

int _isatty(int file)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d6e:	2301      	movs	r3, #1
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002da0:	4a14      	ldr	r2, [pc, #80]	; (8002df4 <_sbrk+0x5c>)
 8002da2:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <_sbrk+0x60>)
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dac:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <_sbrk+0x64>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002db4:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <_sbrk+0x64>)
 8002db6:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <_sbrk+0x68>)
 8002db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <_sbrk+0x64>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d207      	bcs.n	8002dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dc8:	f006 fd14 	bl	80097f4 <__errno>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	220c      	movs	r2, #12
 8002dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd6:	e009      	b.n	8002dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dd8:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <_sbrk+0x64>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dde:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <_sbrk+0x64>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	4a05      	ldr	r2, [pc, #20]	; (8002dfc <_sbrk+0x64>)
 8002de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dea:	68fb      	ldr	r3, [r7, #12]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20050000 	.word	0x20050000
 8002df8:	00000400 	.word	0x00000400
 8002dfc:	20000bec 	.word	0x20000bec
 8002e00:	20000d40 	.word	0x20000d40

08002e04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <SystemInit+0x20>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0e:	4a05      	ldr	r2, [pc, #20]	; (8002e24 <SystemInit+0x20>)
 8002e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e2c:	480d      	ldr	r0, [pc, #52]	; (8002e64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e2e:	490e      	ldr	r1, [pc, #56]	; (8002e68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e30:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e34:	e002      	b.n	8002e3c <LoopCopyDataInit>

08002e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e3a:	3304      	adds	r3, #4

08002e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e40:	d3f9      	bcc.n	8002e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e42:	4a0b      	ldr	r2, [pc, #44]	; (8002e70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e44:	4c0b      	ldr	r4, [pc, #44]	; (8002e74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e48:	e001      	b.n	8002e4e <LoopFillZerobss>

08002e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e4c:	3204      	adds	r2, #4

08002e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e50:	d3fb      	bcc.n	8002e4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e52:	f7ff ffd7 	bl	8002e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e56:	f006 fcd3 	bl	8009800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e5a:	f7fe ff73 	bl	8001d44 <main>
  bx  lr    
 8002e5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e60:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e68:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002e6c:	0800dd2c 	.word	0x0800dd2c
  ldr r2, =_sbss
 8002e70:	20000328 	.word	0x20000328
  ldr r4, =_ebss
 8002e74:	20000d40 	.word	0x20000d40

08002e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e78:	e7fe      	b.n	8002e78 <ADC_IRQHandler>

08002e7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e7e:	2003      	movs	r0, #3
 8002e80:	f000 f94c 	bl	800311c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e84:	2000      	movs	r0, #0
 8002e86:	f000 f805 	bl	8002e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e8a:	f7ff fbc7 	bl	800261c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e9c:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <HAL_InitTick+0x54>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b12      	ldr	r3, [pc, #72]	; (8002eec <HAL_InitTick+0x58>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f967 	bl	8003186 <HAL_SYSTICK_Config>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e00e      	b.n	8002ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b0f      	cmp	r3, #15
 8002ec6:	d80a      	bhi.n	8002ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed0:	f000 f92f 	bl	8003132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ed4:	4a06      	ldr	r2, [pc, #24]	; (8002ef0 <HAL_InitTick+0x5c>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e000      	b.n	8002ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000014 	.word	0x20000014
 8002eec:	2000001c 	.word	0x2000001c
 8002ef0:	20000018 	.word	0x20000018

08002ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_IncTick+0x20>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_IncTick+0x24>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	4a04      	ldr	r2, [pc, #16]	; (8002f18 <HAL_IncTick+0x24>)
 8002f06:	6013      	str	r3, [r2, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	2000001c 	.word	0x2000001c
 8002f18:	20000bf0 	.word	0x20000bf0

08002f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <HAL_GetTick+0x14>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000bf0 	.word	0x20000bf0

08002f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f3c:	f7ff ffee 	bl	8002f1c <HAL_GetTick>
 8002f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4c:	d005      	beq.n	8002f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_Delay+0x44>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4413      	add	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f5a:	bf00      	nop
 8002f5c:	f7ff ffde 	bl	8002f1c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d8f7      	bhi.n	8002f5c <HAL_Delay+0x28>
  {
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	2000001c 	.word	0x2000001c

08002f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <__NVIC_SetPriorityGrouping+0x40>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002faa:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <__NVIC_SetPriorityGrouping+0x40>)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	60d3      	str	r3, [r2, #12]
}
 8002fb0:	bf00      	nop
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000ed00 	.word	0xe000ed00
 8002fc0:	05fa0000 	.word	0x05fa0000

08002fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc8:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <__NVIC_GetPriorityGrouping+0x18>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	0a1b      	lsrs	r3, r3, #8
 8002fce:	f003 0307 	and.w	r3, r3, #7
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	db0b      	blt.n	800300a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	f003 021f 	and.w	r2, r3, #31
 8002ff8:	4907      	ldr	r1, [pc, #28]	; (8003018 <__NVIC_EnableIRQ+0x38>)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	2001      	movs	r0, #1
 8003002:	fa00 f202 	lsl.w	r2, r0, r2
 8003006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	e000e100 	.word	0xe000e100

0800301c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	6039      	str	r1, [r7, #0]
 8003026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302c:	2b00      	cmp	r3, #0
 800302e:	db0a      	blt.n	8003046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	490c      	ldr	r1, [pc, #48]	; (8003068 <__NVIC_SetPriority+0x4c>)
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	0112      	lsls	r2, r2, #4
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	440b      	add	r3, r1
 8003040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003044:	e00a      	b.n	800305c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	4908      	ldr	r1, [pc, #32]	; (800306c <__NVIC_SetPriority+0x50>)
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	3b04      	subs	r3, #4
 8003054:	0112      	lsls	r2, r2, #4
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	440b      	add	r3, r1
 800305a:	761a      	strb	r2, [r3, #24]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	e000e100 	.word	0xe000e100
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f1c3 0307 	rsb	r3, r3, #7
 800308a:	2b04      	cmp	r3, #4
 800308c:	bf28      	it	cs
 800308e:	2304      	movcs	r3, #4
 8003090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3304      	adds	r3, #4
 8003096:	2b06      	cmp	r3, #6
 8003098:	d902      	bls.n	80030a0 <NVIC_EncodePriority+0x30>
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3b03      	subs	r3, #3
 800309e:	e000      	b.n	80030a2 <NVIC_EncodePriority+0x32>
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a4:	f04f 32ff 	mov.w	r2, #4294967295
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43da      	mvns	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	401a      	ands	r2, r3
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b8:	f04f 31ff 	mov.w	r1, #4294967295
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	43d9      	mvns	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c8:	4313      	orrs	r3, r2
         );
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3724      	adds	r7, #36	; 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e8:	d301      	bcc.n	80030ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00f      	b.n	800310e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ee:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <SysTick_Config+0x40>)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030f6:	210f      	movs	r1, #15
 80030f8:	f04f 30ff 	mov.w	r0, #4294967295
 80030fc:	f7ff ff8e 	bl	800301c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <SysTick_Config+0x40>)
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003106:	4b04      	ldr	r3, [pc, #16]	; (8003118 <SysTick_Config+0x40>)
 8003108:	2207      	movs	r2, #7
 800310a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	e000e010 	.word	0xe000e010

0800311c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ff29 	bl	8002f7c <__NVIC_SetPriorityGrouping>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af00      	add	r7, sp, #0
 8003138:	4603      	mov	r3, r0
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003144:	f7ff ff3e 	bl	8002fc4 <__NVIC_GetPriorityGrouping>
 8003148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	6978      	ldr	r0, [r7, #20]
 8003150:	f7ff ff8e 	bl	8003070 <NVIC_EncodePriority>
 8003154:	4602      	mov	r2, r0
 8003156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800315a:	4611      	mov	r1, r2
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff ff5d 	bl	800301c <__NVIC_SetPriority>
}
 8003162:	bf00      	nop
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
 8003170:	4603      	mov	r3, r0
 8003172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ff31 	bl	8002fe0 <__NVIC_EnableIRQ>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff ffa2 	bl	80030d8 <SysTick_Config>
 8003194:	4603      	mov	r3, r0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031ac:	f7ff feb6 	bl	8002f1c <HAL_GetTick>
 80031b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d008      	beq.n	80031d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2280      	movs	r2, #128	; 0x80
 80031c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e052      	b.n	8003276 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0216 	bic.w	r2, r2, #22
 80031de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695a      	ldr	r2, [r3, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d103      	bne.n	8003200 <HAL_DMA_Abort+0x62>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d007      	beq.n	8003210 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0208 	bic.w	r2, r2, #8
 800320e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0201 	bic.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003220:	e013      	b.n	800324a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003222:	f7ff fe7b 	bl	8002f1c <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b05      	cmp	r3, #5
 800322e:	d90c      	bls.n	800324a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2220      	movs	r2, #32
 8003234:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2203      	movs	r2, #3
 800323a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e015      	b.n	8003276 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1e4      	bne.n	8003222 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325c:	223f      	movs	r2, #63	; 0x3f
 800325e:	409a      	lsls	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d004      	beq.n	800329c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2280      	movs	r2, #128	; 0x80
 8003296:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e00c      	b.n	80032b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2205      	movs	r2, #5
 80032a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e06a      	b.n	80033ac <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d106      	bne.n	80032ee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2223      	movs	r2, #35	; 0x23
 80032e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff f9bb 	bl	8002664 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ee:	4b31      	ldr	r3, [pc, #196]	; (80033b4 <HAL_ETH_Init+0xf0>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	4a30      	ldr	r2, [pc, #192]	; (80033b4 <HAL_ETH_Init+0xf0>)
 80032f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f8:	6453      	str	r3, [r2, #68]	; 0x44
 80032fa:	4b2e      	ldr	r3, [pc, #184]	; (80033b4 <HAL_ETH_Init+0xf0>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003306:	4b2c      	ldr	r3, [pc, #176]	; (80033b8 <HAL_ETH_Init+0xf4>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4a2b      	ldr	r2, [pc, #172]	; (80033b8 <HAL_ETH_Init+0xf4>)
 800330c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003310:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003312:	4b29      	ldr	r3, [pc, #164]	; (80033b8 <HAL_ETH_Init+0xf4>)
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	4927      	ldr	r1, [pc, #156]	; (80033b8 <HAL_ETH_Init+0xf4>)
 800331c:	4313      	orrs	r3, r2
 800331e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003320:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <HAL_ETH_Init+0xf4>)
 8003322:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800333a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800333c:	f7ff fdee 	bl	8002f1c <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003342:	e011      	b.n	8003368 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003344:	f7ff fdea 	bl	8002f1c <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003352:	d909      	bls.n	8003368 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2204      	movs	r2, #4
 8003358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	22e0      	movs	r2, #224	; 0xe0
 8003360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e021      	b.n	80033ac <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e4      	bne.n	8003344 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f958 	bl	8003630 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f9ff 	bl	8003784 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fa55 	bl	8003836 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	461a      	mov	r2, r3
 8003392:	2100      	movs	r1, #0
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f9bd 	bl	8003714 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2210      	movs	r2, #16
 80033a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40013800 	.word	0x40013800

080033bc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4b51      	ldr	r3, [pc, #324]	; (8003518 <ETH_SetMACConfig+0x15c>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	7c1b      	ldrb	r3, [r3, #16]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d102      	bne.n	80033e4 <ETH_SetMACConfig+0x28>
 80033de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80033e2:	e000      	b.n	80033e6 <ETH_SetMACConfig+0x2a>
 80033e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	7c5b      	ldrb	r3, [r3, #17]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <ETH_SetMACConfig+0x38>
 80033ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033f2:	e000      	b.n	80033f6 <ETH_SetMACConfig+0x3a>
 80033f4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80033f6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80033fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	7fdb      	ldrb	r3, [r3, #31]
 8003402:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003404:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800340a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	7f92      	ldrb	r2, [r2, #30]
 8003410:	2a00      	cmp	r2, #0
 8003412:	d102      	bne.n	800341a <ETH_SetMACConfig+0x5e>
 8003414:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003418:	e000      	b.n	800341c <ETH_SetMACConfig+0x60>
 800341a:	2200      	movs	r2, #0
                        macconf->Speed |
 800341c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	7f1b      	ldrb	r3, [r3, #28]
 8003422:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003424:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800342a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	791b      	ldrb	r3, [r3, #4]
 8003430:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003432:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	f892 2020 	ldrb.w	r2, [r2, #32]
 800343a:	2a00      	cmp	r2, #0
 800343c:	d102      	bne.n	8003444 <ETH_SetMACConfig+0x88>
 800343e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003442:	e000      	b.n	8003446 <ETH_SetMACConfig+0x8a>
 8003444:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003446:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	7bdb      	ldrb	r3, [r3, #15]
 800344c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800344e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003454:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800345c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800345e:	4313      	orrs	r3, r2
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003476:	2001      	movs	r0, #1
 8003478:	f7ff fd5c 	bl	8002f34 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003492:	4013      	ands	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80034a2:	2a00      	cmp	r2, #0
 80034a4:	d101      	bne.n	80034aa <ETH_SetMACConfig+0xee>
 80034a6:	2280      	movs	r2, #128	; 0x80
 80034a8:	e000      	b.n	80034ac <ETH_SetMACConfig+0xf0>
 80034aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80034ac:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80034b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80034ba:	2a01      	cmp	r2, #1
 80034bc:	d101      	bne.n	80034c2 <ETH_SetMACConfig+0x106>
 80034be:	2208      	movs	r2, #8
 80034c0:	e000      	b.n	80034c4 <ETH_SetMACConfig+0x108>
 80034c2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80034c4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80034cc:	2a01      	cmp	r2, #1
 80034ce:	d101      	bne.n	80034d4 <ETH_SetMACConfig+0x118>
 80034d0:	2204      	movs	r2, #4
 80034d2:	e000      	b.n	80034d6 <ETH_SetMACConfig+0x11a>
 80034d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80034d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80034de:	2a01      	cmp	r2, #1
 80034e0:	d101      	bne.n	80034e6 <ETH_SetMACConfig+0x12a>
 80034e2:	2202      	movs	r2, #2
 80034e4:	e000      	b.n	80034e8 <ETH_SetMACConfig+0x12c>
 80034e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80034e8:	4313      	orrs	r3, r2
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003500:	2001      	movs	r0, #1
 8003502:	f7ff fd17 	bl	8002f34 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	619a      	str	r2, [r3, #24]
}
 800350e:	bf00      	nop
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	ff20810f 	.word	0xff20810f

0800351c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4b3d      	ldr	r3, [pc, #244]	; (800362c <ETH_SetDMAConfig+0x110>)
 8003536:	4013      	ands	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	7b1b      	ldrb	r3, [r3, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d102      	bne.n	8003548 <ETH_SetDMAConfig+0x2c>
 8003542:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003546:	e000      	b.n	800354a <ETH_SetDMAConfig+0x2e>
 8003548:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	7b5b      	ldrb	r3, [r3, #13]
 800354e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003550:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	7f52      	ldrb	r2, [r2, #29]
 8003556:	2a00      	cmp	r2, #0
 8003558:	d102      	bne.n	8003560 <ETH_SetDMAConfig+0x44>
 800355a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800355e:	e000      	b.n	8003562 <ETH_SetDMAConfig+0x46>
 8003560:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003562:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	7b9b      	ldrb	r3, [r3, #14]
 8003568:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800356a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003570:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	7f1b      	ldrb	r3, [r3, #28]
 8003576:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003578:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	7f9b      	ldrb	r3, [r3, #30]
 800357e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003580:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003586:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800358e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003590:	4313      	orrs	r3, r2
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a0:	461a      	mov	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035b2:	2001      	movs	r0, #1
 80035b4:	f7ff fcbe 	bl	8002f34 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c0:	461a      	mov	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	791b      	ldrb	r3, [r3, #4]
 80035ca:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80035d0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80035d6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80035dc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035e4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80035e6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80035ee:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80035f4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003602:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003610:	2001      	movs	r0, #1
 8003612:	f7ff fc8f 	bl	8002f34 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800361e:	461a      	mov	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6013      	str	r3, [r2, #0]
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	f8de3f23 	.word	0xf8de3f23

08003630 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b0a6      	sub	sp, #152	; 0x98
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003638:	2301      	movs	r3, #1
 800363a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800363e:	2301      	movs	r3, #1
 8003640:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003644:	2300      	movs	r3, #0
 8003646:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003648:	2300      	movs	r3, #0
 800364a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003654:	2300      	movs	r3, #0
 8003656:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800365a:	2301      	movs	r3, #1
 800365c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003660:	2300      	movs	r3, #0
 8003662:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003666:	2300      	movs	r3, #0
 8003668:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800366c:	2300      	movs	r3, #0
 800366e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003670:	2300      	movs	r3, #0
 8003672:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003676:	2300      	movs	r3, #0
 8003678:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800367a:	2300      	movs	r3, #0
 800367c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003680:	2300      	movs	r3, #0
 8003682:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003686:	2300      	movs	r3, #0
 8003688:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800368c:	2300      	movs	r3, #0
 800368e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003692:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003696:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003698:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800369c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800369e:	2300      	movs	r3, #0
 80036a0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80036a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80036a8:	4619      	mov	r1, r3
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff fe86 	bl	80033bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80036b0:	2301      	movs	r3, #1
 80036b2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80036b4:	2301      	movs	r3, #1
 80036b6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80036be:	2301      	movs	r3, #1
 80036c0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80036cc:	2300      	movs	r3, #0
 80036ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80036d2:	2300      	movs	r3, #0
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80036d6:	2301      	movs	r3, #1
 80036d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80036dc:	2301      	movs	r3, #1
 80036de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80036e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036e4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80036e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036ea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80036ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036f0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003700:	f107 0308 	add.w	r3, r7, #8
 8003704:	4619      	mov	r1, r3
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff ff08 	bl	800351c <ETH_SetDMAConfig>
}
 800370c:	bf00      	nop
 800370e:	3798      	adds	r7, #152	; 0x98
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3305      	adds	r3, #5
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	3204      	adds	r2, #4
 800372c:	7812      	ldrb	r2, [r2, #0]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	4b11      	ldr	r3, [pc, #68]	; (800377c <ETH_MACAddressConfig+0x68>)
 8003736:	4413      	add	r3, r2
 8003738:	461a      	mov	r2, r3
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3303      	adds	r3, #3
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	061a      	lsls	r2, r3, #24
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3302      	adds	r3, #2
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	041b      	lsls	r3, r3, #16
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3301      	adds	r3, #1
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	4313      	orrs	r3, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	7812      	ldrb	r2, [r2, #0]
 800375e:	4313      	orrs	r3, r2
 8003760:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	4b06      	ldr	r3, [pc, #24]	; (8003780 <ETH_MACAddressConfig+0x6c>)
 8003766:	4413      	add	r3, r2
 8003768:	461a      	mov	r2, r3
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	6013      	str	r3, [r2, #0]
}
 800376e:	bf00      	nop
 8003770:	371c      	adds	r7, #28
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40028040 	.word	0x40028040
 8003780:	40028044 	.word	0x40028044

08003784 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800378c:	2300      	movs	r3, #0
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	e03e      	b.n	8003810 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68d9      	ldr	r1, [r3, #12]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	440b      	add	r3, r1
 80037a2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2200      	movs	r2, #0
 80037ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2200      	movs	r2, #0
 80037b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2200      	movs	r2, #0
 80037ba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	3206      	adds	r2, #6
 80037c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d80c      	bhi.n	80037f4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68d9      	ldr	r1, [r3, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	440b      	add	r3, r1
 80037ec:	461a      	mov	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	60da      	str	r2, [r3, #12]
 80037f2:	e004      	b.n	80037fe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	461a      	mov	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	3301      	adds	r3, #1
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b03      	cmp	r3, #3
 8003814:	d9bd      	bls.n	8003792 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003828:	611a      	str	r2, [r3, #16]
}
 800382a:	bf00      	nop
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003836:	b480      	push	{r7}
 8003838:	b085      	sub	sp, #20
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	e046      	b.n	80038d2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6919      	ldr	r1, [r3, #16]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	440b      	add	r3, r1
 8003854:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2200      	movs	r2, #0
 8003860:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2200      	movs	r2, #0
 8003866:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2200      	movs	r2, #0
 800386c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2200      	movs	r2, #0
 8003872:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2200      	movs	r2, #0
 8003878:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003880:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003888:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	3212      	adds	r2, #18
 800389e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d80c      	bhi.n	80038c2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6919      	ldr	r1, [r3, #16]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	440b      	add	r3, r1
 80038ba:	461a      	mov	r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	60da      	str	r2, [r3, #12]
 80038c0:	e004      	b.n	80038cc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	461a      	mov	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	3301      	adds	r3, #1
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d9b5      	bls.n	8003844 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003902:	60da      	str	r2, [r3, #12]
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003910:	b480      	push	{r7}
 8003912:	b089      	sub	sp, #36	; 0x24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003922:	2300      	movs	r3, #0
 8003924:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003926:	2300      	movs	r3, #0
 8003928:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
 800392e:	e175      	b.n	8003c1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003930:	2201      	movs	r2, #1
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4013      	ands	r3, r2
 8003942:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	429a      	cmp	r2, r3
 800394a:	f040 8164 	bne.w	8003c16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	2b01      	cmp	r3, #1
 8003958:	d005      	beq.n	8003966 <HAL_GPIO_Init+0x56>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d130      	bne.n	80039c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	2203      	movs	r2, #3
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43db      	mvns	r3, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4013      	ands	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4313      	orrs	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800399c:	2201      	movs	r2, #1
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f003 0201 	and.w	r2, r3, #1
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d017      	beq.n	8003a04 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	2203      	movs	r2, #3
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4013      	ands	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d123      	bne.n	8003a58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	08da      	lsrs	r2, r3, #3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3208      	adds	r2, #8
 8003a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	220f      	movs	r2, #15
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	08da      	lsrs	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3208      	adds	r2, #8
 8003a52:	69b9      	ldr	r1, [r7, #24]
 8003a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	2203      	movs	r2, #3
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 0203 	and.w	r2, r3, #3
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80be 	beq.w	8003c16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a9a:	4b66      	ldr	r3, [pc, #408]	; (8003c34 <HAL_GPIO_Init+0x324>)
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	4a65      	ldr	r2, [pc, #404]	; (8003c34 <HAL_GPIO_Init+0x324>)
 8003aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8003aa6:	4b63      	ldr	r3, [pc, #396]	; (8003c34 <HAL_GPIO_Init+0x324>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ab2:	4a61      	ldr	r2, [pc, #388]	; (8003c38 <HAL_GPIO_Init+0x328>)
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	089b      	lsrs	r3, r3, #2
 8003ab8:	3302      	adds	r3, #2
 8003aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	220f      	movs	r2, #15
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a58      	ldr	r2, [pc, #352]	; (8003c3c <HAL_GPIO_Init+0x32c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d037      	beq.n	8003b4e <HAL_GPIO_Init+0x23e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a57      	ldr	r2, [pc, #348]	; (8003c40 <HAL_GPIO_Init+0x330>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d031      	beq.n	8003b4a <HAL_GPIO_Init+0x23a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a56      	ldr	r2, [pc, #344]	; (8003c44 <HAL_GPIO_Init+0x334>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d02b      	beq.n	8003b46 <HAL_GPIO_Init+0x236>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a55      	ldr	r2, [pc, #340]	; (8003c48 <HAL_GPIO_Init+0x338>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d025      	beq.n	8003b42 <HAL_GPIO_Init+0x232>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a54      	ldr	r2, [pc, #336]	; (8003c4c <HAL_GPIO_Init+0x33c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01f      	beq.n	8003b3e <HAL_GPIO_Init+0x22e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a53      	ldr	r2, [pc, #332]	; (8003c50 <HAL_GPIO_Init+0x340>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d019      	beq.n	8003b3a <HAL_GPIO_Init+0x22a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a52      	ldr	r2, [pc, #328]	; (8003c54 <HAL_GPIO_Init+0x344>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <HAL_GPIO_Init+0x226>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a51      	ldr	r2, [pc, #324]	; (8003c58 <HAL_GPIO_Init+0x348>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00d      	beq.n	8003b32 <HAL_GPIO_Init+0x222>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a50      	ldr	r2, [pc, #320]	; (8003c5c <HAL_GPIO_Init+0x34c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <HAL_GPIO_Init+0x21e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a4f      	ldr	r2, [pc, #316]	; (8003c60 <HAL_GPIO_Init+0x350>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d101      	bne.n	8003b2a <HAL_GPIO_Init+0x21a>
 8003b26:	2309      	movs	r3, #9
 8003b28:	e012      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b2a:	230a      	movs	r3, #10
 8003b2c:	e010      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b2e:	2308      	movs	r3, #8
 8003b30:	e00e      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b32:	2307      	movs	r3, #7
 8003b34:	e00c      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b36:	2306      	movs	r3, #6
 8003b38:	e00a      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b3a:	2305      	movs	r3, #5
 8003b3c:	e008      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b3e:	2304      	movs	r3, #4
 8003b40:	e006      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b42:	2303      	movs	r3, #3
 8003b44:	e004      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e002      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	f002 0203 	and.w	r2, r2, #3
 8003b56:	0092      	lsls	r2, r2, #2
 8003b58:	4093      	lsls	r3, r2
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003b60:	4935      	ldr	r1, [pc, #212]	; (8003c38 <HAL_GPIO_Init+0x328>)
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	089b      	lsrs	r3, r3, #2
 8003b66:	3302      	adds	r3, #2
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b6e:	4b3d      	ldr	r3, [pc, #244]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	43db      	mvns	r3, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b92:	4a34      	ldr	r2, [pc, #208]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b98:	4b32      	ldr	r3, [pc, #200]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bbc:	4a29      	ldr	r2, [pc, #164]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bc2:	4b28      	ldr	r3, [pc, #160]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003be6:	4a1f      	ldr	r2, [pc, #124]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bec:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c10:	4a14      	ldr	r2, [pc, #80]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	61fb      	str	r3, [r7, #28]
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	2b0f      	cmp	r3, #15
 8003c20:	f67f ae86 	bls.w	8003930 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop
 8003c28:	3724      	adds	r7, #36	; 0x24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	40013800 	.word	0x40013800
 8003c3c:	40020000 	.word	0x40020000
 8003c40:	40020400 	.word	0x40020400
 8003c44:	40020800 	.word	0x40020800
 8003c48:	40020c00 	.word	0x40020c00
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	40021400 	.word	0x40021400
 8003c54:	40021800 	.word	0x40021800
 8003c58:	40021c00 	.word	0x40021c00
 8003c5c:	40022000 	.word	0x40022000
 8003c60:	40022400 	.word	0x40022400
 8003c64:	40013c00 	.word	0x40013c00

08003c68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	887b      	ldrh	r3, [r7, #2]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c80:	2301      	movs	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
 8003c84:	e001      	b.n	8003c8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c86:	2300      	movs	r3, #0
 8003c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	807b      	strh	r3, [r7, #2]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ca8:	787b      	ldrb	r3, [r7, #1]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cae:	887a      	ldrh	r2, [r7, #2]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003cb4:	e003      	b.n	8003cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003cb6:	887b      	ldrh	r3, [r7, #2]
 8003cb8:	041a      	lsls	r2, r3, #16
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	619a      	str	r2, [r3, #24]
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b085      	sub	sp, #20
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cdc:	887a      	ldrh	r2, [r7, #2]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	041a      	lsls	r2, r3, #16
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	43d9      	mvns	r1, r3
 8003ce8:	887b      	ldrh	r3, [r7, #2]
 8003cea:	400b      	ands	r3, r1
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	619a      	str	r2, [r3, #24]
}
 8003cf2:	bf00      	nop
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
	...

08003d00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d0a:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d006      	beq.n	8003d24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d16:	4a05      	ldr	r2, [pc, #20]	; (8003d2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d18:	88fb      	ldrh	r3, [r7, #6]
 8003d1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fd ff70 	bl	8001c04 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40013c00 	.word	0x40013c00

08003d30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d32:	b08f      	sub	sp, #60	; 0x3c
 8003d34:	af0a      	add	r7, sp, #40	; 0x28
 8003d36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e116      	b.n	8003f70 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d106      	bne.n	8003d62 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7fe fe97 	bl	8002a90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2203      	movs	r2, #3
 8003d66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d102      	bne.n	8003d7c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f004 fa7f 	bl	8008284 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	603b      	str	r3, [r7, #0]
 8003d8c:	687e      	ldr	r6, [r7, #4]
 8003d8e:	466d      	mov	r5, sp
 8003d90:	f106 0410 	add.w	r4, r6, #16
 8003d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003da0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003da4:	1d33      	adds	r3, r6, #4
 8003da6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003da8:	6838      	ldr	r0, [r7, #0]
 8003daa:	f004 fa13 	bl	80081d4 <USB_CoreInit>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0d7      	b.n	8003f70 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f004 fa6d 	bl	80082a6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dcc:	2300      	movs	r3, #0
 8003dce:	73fb      	strb	r3, [r7, #15]
 8003dd0:	e04a      	b.n	8003e68 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003dd2:	7bfa      	ldrb	r2, [r7, #15]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	333d      	adds	r3, #61	; 0x3d
 8003de2:	2201      	movs	r2, #1
 8003de4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003de6:	7bfa      	ldrb	r2, [r7, #15]
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	333c      	adds	r3, #60	; 0x3c
 8003df6:	7bfa      	ldrb	r2, [r7, #15]
 8003df8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003dfa:	7bfa      	ldrb	r2, [r7, #15]
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	b298      	uxth	r0, r3
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	3344      	adds	r3, #68	; 0x44
 8003e0e:	4602      	mov	r2, r0
 8003e10:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e12:	7bfa      	ldrb	r2, [r7, #15]
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	3340      	adds	r3, #64	; 0x40
 8003e22:	2200      	movs	r2, #0
 8003e24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e26:	7bfa      	ldrb	r2, [r7, #15]
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	440b      	add	r3, r1
 8003e34:	3348      	adds	r3, #72	; 0x48
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e3a:	7bfa      	ldrb	r2, [r7, #15]
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	440b      	add	r3, r1
 8003e48:	334c      	adds	r3, #76	; 0x4c
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e4e:	7bfa      	ldrb	r2, [r7, #15]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	3354      	adds	r3, #84	; 0x54
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	3301      	adds	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]
 8003e68:	7bfa      	ldrb	r2, [r7, #15]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d3af      	bcc.n	8003dd2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e72:	2300      	movs	r3, #0
 8003e74:	73fb      	strb	r3, [r7, #15]
 8003e76:	e044      	b.n	8003f02 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e78:	7bfa      	ldrb	r2, [r7, #15]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e8e:	7bfa      	ldrb	r2, [r7, #15]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003ea0:	7bfa      	ldrb	r2, [r7, #15]
 8003ea2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ea4:	7bfa      	ldrb	r2, [r7, #15]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003eba:	7bfa      	ldrb	r2, [r7, #15]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ed0:	7bfa      	ldrb	r2, [r7, #15]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ee6:	7bfa      	ldrb	r2, [r7, #15]
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	3301      	adds	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
 8003f02:	7bfa      	ldrb	r2, [r7, #15]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d3b5      	bcc.n	8003e78 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	603b      	str	r3, [r7, #0]
 8003f12:	687e      	ldr	r6, [r7, #4]
 8003f14:	466d      	mov	r5, sp
 8003f16:	f106 0410 	add.w	r4, r6, #16
 8003f1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f26:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f2a:	1d33      	adds	r3, r6, #4
 8003f2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f2e:	6838      	ldr	r0, [r7, #0]
 8003f30:	f004 fa06 	bl	8008340 <USB_DevInit>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e014      	b.n	8003f70 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d102      	bne.n	8003f64 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f80a 	bl	8003f78 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f004 fbc4 	bl	80086f6 <USB_DevDisconnect>

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <HAL_PCDEx_ActivateLPM+0x44>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	10000003 	.word	0x10000003

08003fc0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fc4:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fce:	6013      	str	r3, [r2, #0]
}
 8003fd0:	bf00      	nop
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40007000 	.word	0x40007000

08003fe0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e291      	b.n	800451a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 8087 	beq.w	8004112 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004004:	4b96      	ldr	r3, [pc, #600]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 030c 	and.w	r3, r3, #12
 800400c:	2b04      	cmp	r3, #4
 800400e:	d00c      	beq.n	800402a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004010:	4b93      	ldr	r3, [pc, #588]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 030c 	and.w	r3, r3, #12
 8004018:	2b08      	cmp	r3, #8
 800401a:	d112      	bne.n	8004042 <HAL_RCC_OscConfig+0x62>
 800401c:	4b90      	ldr	r3, [pc, #576]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004028:	d10b      	bne.n	8004042 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800402a:	4b8d      	ldr	r3, [pc, #564]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d06c      	beq.n	8004110 <HAL_RCC_OscConfig+0x130>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d168      	bne.n	8004110 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e26b      	b.n	800451a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800404a:	d106      	bne.n	800405a <HAL_RCC_OscConfig+0x7a>
 800404c:	4b84      	ldr	r3, [pc, #528]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a83      	ldr	r2, [pc, #524]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 8004052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	e02e      	b.n	80040b8 <HAL_RCC_OscConfig+0xd8>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10c      	bne.n	800407c <HAL_RCC_OscConfig+0x9c>
 8004062:	4b7f      	ldr	r3, [pc, #508]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a7e      	ldr	r2, [pc, #504]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 8004068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	4b7c      	ldr	r3, [pc, #496]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a7b      	ldr	r2, [pc, #492]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 8004074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	e01d      	b.n	80040b8 <HAL_RCC_OscConfig+0xd8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004084:	d10c      	bne.n	80040a0 <HAL_RCC_OscConfig+0xc0>
 8004086:	4b76      	ldr	r3, [pc, #472]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a75      	ldr	r2, [pc, #468]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 800408c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	4b73      	ldr	r3, [pc, #460]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a72      	ldr	r2, [pc, #456]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 8004098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	e00b      	b.n	80040b8 <HAL_RCC_OscConfig+0xd8>
 80040a0:	4b6f      	ldr	r3, [pc, #444]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a6e      	ldr	r2, [pc, #440]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 80040a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	4b6c      	ldr	r3, [pc, #432]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a6b      	ldr	r2, [pc, #428]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 80040b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d013      	beq.n	80040e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7fe ff2c 	bl	8002f1c <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040c8:	f7fe ff28 	bl	8002f1c <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b64      	cmp	r3, #100	; 0x64
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e21f      	b.n	800451a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040da:	4b61      	ldr	r3, [pc, #388]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0xe8>
 80040e6:	e014      	b.n	8004112 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fe ff18 	bl	8002f1c <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f0:	f7fe ff14 	bl	8002f1c <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b64      	cmp	r3, #100	; 0x64
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e20b      	b.n	800451a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004102:	4b57      	ldr	r3, [pc, #348]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x110>
 800410e:	e000      	b.n	8004112 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d069      	beq.n	80041f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800411e:	4b50      	ldr	r3, [pc, #320]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 030c 	and.w	r3, r3, #12
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00b      	beq.n	8004142 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800412a:	4b4d      	ldr	r3, [pc, #308]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	2b08      	cmp	r3, #8
 8004134:	d11c      	bne.n	8004170 <HAL_RCC_OscConfig+0x190>
 8004136:	4b4a      	ldr	r3, [pc, #296]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d116      	bne.n	8004170 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004142:	4b47      	ldr	r3, [pc, #284]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <HAL_RCC_OscConfig+0x17a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d001      	beq.n	800415a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e1df      	b.n	800451a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415a:	4b41      	ldr	r3, [pc, #260]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	493d      	ldr	r1, [pc, #244]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 800416a:	4313      	orrs	r3, r2
 800416c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800416e:	e040      	b.n	80041f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d023      	beq.n	80041c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004178:	4b39      	ldr	r3, [pc, #228]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a38      	ldr	r2, [pc, #224]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7fe feca 	bl	8002f1c <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800418c:	f7fe fec6 	bl	8002f1c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e1bd      	b.n	800451a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419e:	4b30      	ldr	r3, [pc, #192]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041aa:	4b2d      	ldr	r3, [pc, #180]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4929      	ldr	r1, [pc, #164]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	600b      	str	r3, [r1, #0]
 80041be:	e018      	b.n	80041f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c0:	4b27      	ldr	r3, [pc, #156]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a26      	ldr	r2, [pc, #152]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7fe fea6 	bl	8002f1c <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d4:	f7fe fea2 	bl	8002f1c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e199      	b.n	800451a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e6:	4b1e      	ldr	r3, [pc, #120]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d038      	beq.n	8004270 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d019      	beq.n	800423a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004206:	4b16      	ldr	r3, [pc, #88]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 8004208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420a:	4a15      	ldr	r2, [pc, #84]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004212:	f7fe fe83 	bl	8002f1c <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800421a:	f7fe fe7f 	bl	8002f1c <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e176      	b.n	800451a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 800422e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x23a>
 8004238:	e01a      	b.n	8004270 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800423a:	4b09      	ldr	r3, [pc, #36]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 800423c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800423e:	4a08      	ldr	r2, [pc, #32]	; (8004260 <HAL_RCC_OscConfig+0x280>)
 8004240:	f023 0301 	bic.w	r3, r3, #1
 8004244:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004246:	f7fe fe69 	bl	8002f1c <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800424c:	e00a      	b.n	8004264 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800424e:	f7fe fe65 	bl	8002f1c <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d903      	bls.n	8004264 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e15c      	b.n	800451a <HAL_RCC_OscConfig+0x53a>
 8004260:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004264:	4b91      	ldr	r3, [pc, #580]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 8004266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1ee      	bne.n	800424e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80a4 	beq.w	80043c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800427e:	4b8b      	ldr	r3, [pc, #556]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10d      	bne.n	80042a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800428a:	4b88      	ldr	r3, [pc, #544]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	4a87      	ldr	r2, [pc, #540]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 8004290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004294:	6413      	str	r3, [r2, #64]	; 0x40
 8004296:	4b85      	ldr	r3, [pc, #532]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429e:	60bb      	str	r3, [r7, #8]
 80042a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a2:	2301      	movs	r3, #1
 80042a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042a6:	4b82      	ldr	r3, [pc, #520]	; (80044b0 <HAL_RCC_OscConfig+0x4d0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d118      	bne.n	80042e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80042b2:	4b7f      	ldr	r3, [pc, #508]	; (80044b0 <HAL_RCC_OscConfig+0x4d0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a7e      	ldr	r2, [pc, #504]	; (80044b0 <HAL_RCC_OscConfig+0x4d0>)
 80042b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042be:	f7fe fe2d 	bl	8002f1c <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c6:	f7fe fe29 	bl	8002f1c <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b64      	cmp	r3, #100	; 0x64
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e120      	b.n	800451a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d8:	4b75      	ldr	r3, [pc, #468]	; (80044b0 <HAL_RCC_OscConfig+0x4d0>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0f0      	beq.n	80042c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d106      	bne.n	80042fa <HAL_RCC_OscConfig+0x31a>
 80042ec:	4b6f      	ldr	r3, [pc, #444]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 80042ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f0:	4a6e      	ldr	r2, [pc, #440]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	6713      	str	r3, [r2, #112]	; 0x70
 80042f8:	e02d      	b.n	8004356 <HAL_RCC_OscConfig+0x376>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10c      	bne.n	800431c <HAL_RCC_OscConfig+0x33c>
 8004302:	4b6a      	ldr	r3, [pc, #424]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	4a69      	ldr	r2, [pc, #420]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 8004308:	f023 0301 	bic.w	r3, r3, #1
 800430c:	6713      	str	r3, [r2, #112]	; 0x70
 800430e:	4b67      	ldr	r3, [pc, #412]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	4a66      	ldr	r2, [pc, #408]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 8004314:	f023 0304 	bic.w	r3, r3, #4
 8004318:	6713      	str	r3, [r2, #112]	; 0x70
 800431a:	e01c      	b.n	8004356 <HAL_RCC_OscConfig+0x376>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	2b05      	cmp	r3, #5
 8004322:	d10c      	bne.n	800433e <HAL_RCC_OscConfig+0x35e>
 8004324:	4b61      	ldr	r3, [pc, #388]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	4a60      	ldr	r2, [pc, #384]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 800432a:	f043 0304 	orr.w	r3, r3, #4
 800432e:	6713      	str	r3, [r2, #112]	; 0x70
 8004330:	4b5e      	ldr	r3, [pc, #376]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 8004332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004334:	4a5d      	ldr	r2, [pc, #372]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	6713      	str	r3, [r2, #112]	; 0x70
 800433c:	e00b      	b.n	8004356 <HAL_RCC_OscConfig+0x376>
 800433e:	4b5b      	ldr	r3, [pc, #364]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004342:	4a5a      	ldr	r2, [pc, #360]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	6713      	str	r3, [r2, #112]	; 0x70
 800434a:	4b58      	ldr	r3, [pc, #352]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434e:	4a57      	ldr	r2, [pc, #348]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 8004350:	f023 0304 	bic.w	r3, r3, #4
 8004354:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d015      	beq.n	800438a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435e:	f7fe fddd 	bl	8002f1c <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004364:	e00a      	b.n	800437c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004366:	f7fe fdd9 	bl	8002f1c <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	f241 3288 	movw	r2, #5000	; 0x1388
 8004374:	4293      	cmp	r3, r2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e0ce      	b.n	800451a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437c:	4b4b      	ldr	r3, [pc, #300]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ee      	beq.n	8004366 <HAL_RCC_OscConfig+0x386>
 8004388:	e014      	b.n	80043b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438a:	f7fe fdc7 	bl	8002f1c <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004390:	e00a      	b.n	80043a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004392:	f7fe fdc3 	bl	8002f1c <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e0b8      	b.n	800451a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a8:	4b40      	ldr	r3, [pc, #256]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 80043aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1ee      	bne.n	8004392 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d105      	bne.n	80043c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ba:	4b3c      	ldr	r3, [pc, #240]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	4a3b      	ldr	r2, [pc, #236]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 80043c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80a4 	beq.w	8004518 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043d0:	4b36      	ldr	r3, [pc, #216]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 030c 	and.w	r3, r3, #12
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d06b      	beq.n	80044b4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d149      	bne.n	8004478 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e4:	4b31      	ldr	r3, [pc, #196]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a30      	ldr	r2, [pc, #192]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 80043ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fe fd94 	bl	8002f1c <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f8:	f7fe fd90 	bl	8002f1c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e087      	b.n	800451a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440a:	4b28      	ldr	r3, [pc, #160]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	019b      	lsls	r3, r3, #6
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	085b      	lsrs	r3, r3, #1
 800442e:	3b01      	subs	r3, #1
 8004430:	041b      	lsls	r3, r3, #16
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	061b      	lsls	r3, r3, #24
 800443a:	4313      	orrs	r3, r2
 800443c:	4a1b      	ldr	r2, [pc, #108]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 800443e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004442:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004444:	4b19      	ldr	r3, [pc, #100]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a18      	ldr	r2, [pc, #96]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 800444a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800444e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fe fd64 	bl	8002f1c <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004458:	f7fe fd60 	bl	8002f1c <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e057      	b.n	800451a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800446a:	4b10      	ldr	r3, [pc, #64]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0x478>
 8004476:	e04f      	b.n	8004518 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a0b      	ldr	r2, [pc, #44]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 800447e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004484:	f7fe fd4a 	bl	8002f1c <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800448c:	f7fe fd46 	bl	8002f1c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e03d      	b.n	800451a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449e:	4b03      	ldr	r3, [pc, #12]	; (80044ac <HAL_RCC_OscConfig+0x4cc>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x4ac>
 80044aa:	e035      	b.n	8004518 <HAL_RCC_OscConfig+0x538>
 80044ac:	40023800 	.word	0x40023800
 80044b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80044b4:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <HAL_RCC_OscConfig+0x544>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d028      	beq.n	8004514 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d121      	bne.n	8004514 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044da:	429a      	cmp	r2, r3
 80044dc:	d11a      	bne.n	8004514 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044e4:	4013      	ands	r3, r2
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d111      	bne.n	8004514 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fa:	085b      	lsrs	r3, r3, #1
 80044fc:	3b01      	subs	r3, #1
 80044fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004500:	429a      	cmp	r2, r3
 8004502:	d107      	bne.n	8004514 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40023800 	.word	0x40023800

08004528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0d0      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004540:	4b6a      	ldr	r3, [pc, #424]	; (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d910      	bls.n	8004570 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b67      	ldr	r3, [pc, #412]	; (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 020f 	bic.w	r2, r3, #15
 8004556:	4965      	ldr	r1, [pc, #404]	; (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800455e:	4b63      	ldr	r3, [pc, #396]	; (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d001      	beq.n	8004570 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0b8      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d020      	beq.n	80045be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004588:	4b59      	ldr	r3, [pc, #356]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4a58      	ldr	r2, [pc, #352]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 800458e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004592:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045a0:	4b53      	ldr	r3, [pc, #332]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	4a52      	ldr	r2, [pc, #328]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80045a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ac:	4b50      	ldr	r3, [pc, #320]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	494d      	ldr	r1, [pc, #308]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d040      	beq.n	800464c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d107      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	4b47      	ldr	r3, [pc, #284]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d115      	bne.n	800460a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e07f      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d107      	bne.n	80045fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ea:	4b41      	ldr	r3, [pc, #260]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d109      	bne.n	800460a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e073      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fa:	4b3d      	ldr	r3, [pc, #244]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e06b      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800460a:	4b39      	ldr	r3, [pc, #228]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f023 0203 	bic.w	r2, r3, #3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	4936      	ldr	r1, [pc, #216]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004618:	4313      	orrs	r3, r2
 800461a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800461c:	f7fe fc7e 	bl	8002f1c <HAL_GetTick>
 8004620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004622:	e00a      	b.n	800463a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004624:	f7fe fc7a 	bl	8002f1c <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e053      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463a:	4b2d      	ldr	r3, [pc, #180]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 020c 	and.w	r2, r3, #12
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	429a      	cmp	r2, r3
 800464a:	d1eb      	bne.n	8004624 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800464c:	4b27      	ldr	r3, [pc, #156]	; (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d210      	bcs.n	800467c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465a:	4b24      	ldr	r3, [pc, #144]	; (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f023 020f 	bic.w	r2, r3, #15
 8004662:	4922      	ldr	r1, [pc, #136]	; (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	4313      	orrs	r3, r2
 8004668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800466a:	4b20      	ldr	r3, [pc, #128]	; (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d001      	beq.n	800467c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e032      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004688:	4b19      	ldr	r3, [pc, #100]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	4916      	ldr	r1, [pc, #88]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004696:	4313      	orrs	r3, r2
 8004698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d009      	beq.n	80046ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046a6:	4b12      	ldr	r3, [pc, #72]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	490e      	ldr	r1, [pc, #56]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ba:	f000 f821 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 80046be:	4602      	mov	r2, r0
 80046c0:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	091b      	lsrs	r3, r3, #4
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	490a      	ldr	r1, [pc, #40]	; (80046f4 <HAL_RCC_ClockConfig+0x1cc>)
 80046cc:	5ccb      	ldrb	r3, [r1, r3]
 80046ce:	fa22 f303 	lsr.w	r3, r2, r3
 80046d2:	4a09      	ldr	r2, [pc, #36]	; (80046f8 <HAL_RCC_ClockConfig+0x1d0>)
 80046d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046d6:	4b09      	ldr	r3, [pc, #36]	; (80046fc <HAL_RCC_ClockConfig+0x1d4>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fe fbda 	bl	8002e94 <HAL_InitTick>

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40023c00 	.word	0x40023c00
 80046f0:	40023800 	.word	0x40023800
 80046f4:	0800d8c0 	.word	0x0800d8c0
 80046f8:	20000014 	.word	0x20000014
 80046fc:	20000018 	.word	0x20000018

08004700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004704:	b094      	sub	sp, #80	; 0x50
 8004706:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	647b      	str	r3, [r7, #68]	; 0x44
 800470c:	2300      	movs	r3, #0
 800470e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004710:	2300      	movs	r3, #0
 8004712:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004714:	2300      	movs	r3, #0
 8004716:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004718:	4b79      	ldr	r3, [pc, #484]	; (8004900 <HAL_RCC_GetSysClockFreq+0x200>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 030c 	and.w	r3, r3, #12
 8004720:	2b08      	cmp	r3, #8
 8004722:	d00d      	beq.n	8004740 <HAL_RCC_GetSysClockFreq+0x40>
 8004724:	2b08      	cmp	r3, #8
 8004726:	f200 80e1 	bhi.w	80048ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <HAL_RCC_GetSysClockFreq+0x34>
 800472e:	2b04      	cmp	r3, #4
 8004730:	d003      	beq.n	800473a <HAL_RCC_GetSysClockFreq+0x3a>
 8004732:	e0db      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004734:	4b73      	ldr	r3, [pc, #460]	; (8004904 <HAL_RCC_GetSysClockFreq+0x204>)
 8004736:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004738:	e0db      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800473a:	4b73      	ldr	r3, [pc, #460]	; (8004908 <HAL_RCC_GetSysClockFreq+0x208>)
 800473c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800473e:	e0d8      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004740:	4b6f      	ldr	r3, [pc, #444]	; (8004900 <HAL_RCC_GetSysClockFreq+0x200>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004748:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800474a:	4b6d      	ldr	r3, [pc, #436]	; (8004900 <HAL_RCC_GetSysClockFreq+0x200>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d063      	beq.n	800481e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004756:	4b6a      	ldr	r3, [pc, #424]	; (8004900 <HAL_RCC_GetSysClockFreq+0x200>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	099b      	lsrs	r3, r3, #6
 800475c:	2200      	movs	r2, #0
 800475e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004760:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004768:	633b      	str	r3, [r7, #48]	; 0x30
 800476a:	2300      	movs	r3, #0
 800476c:	637b      	str	r3, [r7, #52]	; 0x34
 800476e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004772:	4622      	mov	r2, r4
 8004774:	462b      	mov	r3, r5
 8004776:	f04f 0000 	mov.w	r0, #0
 800477a:	f04f 0100 	mov.w	r1, #0
 800477e:	0159      	lsls	r1, r3, #5
 8004780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004784:	0150      	lsls	r0, r2, #5
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4621      	mov	r1, r4
 800478c:	1a51      	subs	r1, r2, r1
 800478e:	6139      	str	r1, [r7, #16]
 8004790:	4629      	mov	r1, r5
 8004792:	eb63 0301 	sbc.w	r3, r3, r1
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047a4:	4659      	mov	r1, fp
 80047a6:	018b      	lsls	r3, r1, #6
 80047a8:	4651      	mov	r1, sl
 80047aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047ae:	4651      	mov	r1, sl
 80047b0:	018a      	lsls	r2, r1, #6
 80047b2:	4651      	mov	r1, sl
 80047b4:	ebb2 0801 	subs.w	r8, r2, r1
 80047b8:	4659      	mov	r1, fp
 80047ba:	eb63 0901 	sbc.w	r9, r3, r1
 80047be:	f04f 0200 	mov.w	r2, #0
 80047c2:	f04f 0300 	mov.w	r3, #0
 80047c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047d2:	4690      	mov	r8, r2
 80047d4:	4699      	mov	r9, r3
 80047d6:	4623      	mov	r3, r4
 80047d8:	eb18 0303 	adds.w	r3, r8, r3
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	462b      	mov	r3, r5
 80047e0:	eb49 0303 	adc.w	r3, r9, r3
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047f2:	4629      	mov	r1, r5
 80047f4:	024b      	lsls	r3, r1, #9
 80047f6:	4621      	mov	r1, r4
 80047f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047fc:	4621      	mov	r1, r4
 80047fe:	024a      	lsls	r2, r1, #9
 8004800:	4610      	mov	r0, r2
 8004802:	4619      	mov	r1, r3
 8004804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004806:	2200      	movs	r2, #0
 8004808:	62bb      	str	r3, [r7, #40]	; 0x28
 800480a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800480c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004810:	f7fc fa5a 	bl	8000cc8 <__aeabi_uldivmod>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4613      	mov	r3, r2
 800481a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800481c:	e058      	b.n	80048d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800481e:	4b38      	ldr	r3, [pc, #224]	; (8004900 <HAL_RCC_GetSysClockFreq+0x200>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	099b      	lsrs	r3, r3, #6
 8004824:	2200      	movs	r2, #0
 8004826:	4618      	mov	r0, r3
 8004828:	4611      	mov	r1, r2
 800482a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800482e:	623b      	str	r3, [r7, #32]
 8004830:	2300      	movs	r3, #0
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
 8004834:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004838:	4642      	mov	r2, r8
 800483a:	464b      	mov	r3, r9
 800483c:	f04f 0000 	mov.w	r0, #0
 8004840:	f04f 0100 	mov.w	r1, #0
 8004844:	0159      	lsls	r1, r3, #5
 8004846:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800484a:	0150      	lsls	r0, r2, #5
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4641      	mov	r1, r8
 8004852:	ebb2 0a01 	subs.w	sl, r2, r1
 8004856:	4649      	mov	r1, r9
 8004858:	eb63 0b01 	sbc.w	fp, r3, r1
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004868:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800486c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004870:	ebb2 040a 	subs.w	r4, r2, sl
 8004874:	eb63 050b 	sbc.w	r5, r3, fp
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	00eb      	lsls	r3, r5, #3
 8004882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004886:	00e2      	lsls	r2, r4, #3
 8004888:	4614      	mov	r4, r2
 800488a:	461d      	mov	r5, r3
 800488c:	4643      	mov	r3, r8
 800488e:	18e3      	adds	r3, r4, r3
 8004890:	603b      	str	r3, [r7, #0]
 8004892:	464b      	mov	r3, r9
 8004894:	eb45 0303 	adc.w	r3, r5, r3
 8004898:	607b      	str	r3, [r7, #4]
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048a6:	4629      	mov	r1, r5
 80048a8:	028b      	lsls	r3, r1, #10
 80048aa:	4621      	mov	r1, r4
 80048ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048b0:	4621      	mov	r1, r4
 80048b2:	028a      	lsls	r2, r1, #10
 80048b4:	4610      	mov	r0, r2
 80048b6:	4619      	mov	r1, r3
 80048b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ba:	2200      	movs	r2, #0
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	61fa      	str	r2, [r7, #28]
 80048c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048c4:	f7fc fa00 	bl	8000cc8 <__aeabi_uldivmod>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4613      	mov	r3, r2
 80048ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	0c1b      	lsrs	r3, r3, #16
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	3301      	adds	r3, #1
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80048e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048ea:	e002      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048ec:	4b05      	ldr	r3, [pc, #20]	; (8004904 <HAL_RCC_GetSysClockFreq+0x204>)
 80048ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3750      	adds	r7, #80	; 0x50
 80048f8:	46bd      	mov	sp, r7
 80048fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048fe:	bf00      	nop
 8004900:	40023800 	.word	0x40023800
 8004904:	00f42400 	.word	0x00f42400
 8004908:	007a1200 	.word	0x007a1200

0800490c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <HAL_RCC_GetHCLKFreq+0x14>)
 8004912:	681b      	ldr	r3, [r3, #0]
}
 8004914:	4618      	mov	r0, r3
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	20000014 	.word	0x20000014

08004924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004928:	f7ff fff0 	bl	800490c <HAL_RCC_GetHCLKFreq>
 800492c:	4602      	mov	r2, r0
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	0a9b      	lsrs	r3, r3, #10
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	4903      	ldr	r1, [pc, #12]	; (8004948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800493a:	5ccb      	ldrb	r3, [r1, r3]
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004940:	4618      	mov	r0, r3
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40023800 	.word	0x40023800
 8004948:	0800d8d0 	.word	0x0800d8d0

0800494c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004950:	f7ff ffdc 	bl	800490c <HAL_RCC_GetHCLKFreq>
 8004954:	4602      	mov	r2, r0
 8004956:	4b05      	ldr	r3, [pc, #20]	; (800496c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	0b5b      	lsrs	r3, r3, #13
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	4903      	ldr	r1, [pc, #12]	; (8004970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004962:	5ccb      	ldrb	r3, [r1, r3]
 8004964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004968:	4618      	mov	r0, r3
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40023800 	.word	0x40023800
 8004970:	0800d8d0 	.word	0x0800d8d0

08004974 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800497c:	2300      	movs	r3, #0
 800497e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004980:	2300      	movs	r3, #0
 8004982:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800498c:	2300      	movs	r3, #0
 800498e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d012      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800499c:	4b69      	ldr	r3, [pc, #420]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	4a68      	ldr	r2, [pc, #416]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80049a6:	6093      	str	r3, [r2, #8]
 80049a8:	4b66      	ldr	r3, [pc, #408]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b0:	4964      	ldr	r1, [pc, #400]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80049be:	2301      	movs	r3, #1
 80049c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d017      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049ce:	4b5d      	ldr	r3, [pc, #372]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049dc:	4959      	ldr	r1, [pc, #356]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049ec:	d101      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80049ee:	2301      	movs	r3, #1
 80049f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80049fa:	2301      	movs	r3, #1
 80049fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d017      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a0a:	4b4e      	ldr	r3, [pc, #312]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a18:	494a      	ldr	r1, [pc, #296]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a28:	d101      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a36:	2301      	movs	r3, #1
 8004a38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a46:	2301      	movs	r3, #1
 8004a48:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 808b 	beq.w	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a58:	4b3a      	ldr	r3, [pc, #232]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	4a39      	ldr	r2, [pc, #228]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a62:	6413      	str	r3, [r2, #64]	; 0x40
 8004a64:	4b37      	ldr	r3, [pc, #220]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	60bb      	str	r3, [r7, #8]
 8004a6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a70:	4b35      	ldr	r3, [pc, #212]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a34      	ldr	r2, [pc, #208]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a7c:	f7fe fa4e 	bl	8002f1c <HAL_GetTick>
 8004a80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a84:	f7fe fa4a 	bl	8002f1c <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b64      	cmp	r3, #100	; 0x64
 8004a90:	d901      	bls.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e357      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a96:	4b2c      	ldr	r3, [pc, #176]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0f0      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004aa2:	4b28      	ldr	r3, [pc, #160]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aaa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d035      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d02e      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ac0:	4b20      	ldr	r3, [pc, #128]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004aca:	4b1e      	ldr	r3, [pc, #120]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ace:	4a1d      	ldr	r2, [pc, #116]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ad6:	4b1b      	ldr	r3, [pc, #108]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ada:	4a1a      	ldr	r2, [pc, #104]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004ae2:	4a18      	ldr	r2, [pc, #96]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ae8:	4b16      	ldr	r3, [pc, #88]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d114      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af4:	f7fe fa12 	bl	8002f1c <HAL_GetTick>
 8004af8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afa:	e00a      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004afc:	f7fe fa0e 	bl	8002f1c <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e319      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b12:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0ee      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b2a:	d111      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b2c:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b38:	4b04      	ldr	r3, [pc, #16]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b3a:	400b      	ands	r3, r1
 8004b3c:	4901      	ldr	r1, [pc, #4]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	608b      	str	r3, [r1, #8]
 8004b42:	e00b      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b44:	40023800 	.word	0x40023800
 8004b48:	40007000 	.word	0x40007000
 8004b4c:	0ffffcff 	.word	0x0ffffcff
 8004b50:	4baa      	ldr	r3, [pc, #680]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	4aa9      	ldr	r2, [pc, #676]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b5a:	6093      	str	r3, [r2, #8]
 8004b5c:	4ba7      	ldr	r3, [pc, #668]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b68:	49a4      	ldr	r1, [pc, #656]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d010      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b7a:	4ba0      	ldr	r3, [pc, #640]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b80:	4a9e      	ldr	r2, [pc, #632]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b8a:	4b9c      	ldr	r3, [pc, #624]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	4999      	ldr	r1, [pc, #612]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00a      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ba8:	4b94      	ldr	r3, [pc, #592]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bb6:	4991      	ldr	r1, [pc, #580]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bca:	4b8c      	ldr	r3, [pc, #560]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bd8:	4988      	ldr	r1, [pc, #544]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bec:	4b83      	ldr	r3, [pc, #524]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bfa:	4980      	ldr	r1, [pc, #512]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c0e:	4b7b      	ldr	r3, [pc, #492]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1c:	4977      	ldr	r1, [pc, #476]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c30:	4b72      	ldr	r3, [pc, #456]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c36:	f023 0203 	bic.w	r2, r3, #3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3e:	496f      	ldr	r1, [pc, #444]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c52:	4b6a      	ldr	r3, [pc, #424]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c58:	f023 020c 	bic.w	r2, r3, #12
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c60:	4966      	ldr	r1, [pc, #408]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c74:	4b61      	ldr	r3, [pc, #388]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c82:	495e      	ldr	r1, [pc, #376]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c96:	4b59      	ldr	r3, [pc, #356]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca4:	4955      	ldr	r1, [pc, #340]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cb8:	4b50      	ldr	r3, [pc, #320]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc6:	494d      	ldr	r1, [pc, #308]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004cda:	4b48      	ldr	r3, [pc, #288]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce8:	4944      	ldr	r1, [pc, #272]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004cfc:	4b3f      	ldr	r3, [pc, #252]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d0a:	493c      	ldr	r1, [pc, #240]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d1e:	4b37      	ldr	r3, [pc, #220]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2c:	4933      	ldr	r1, [pc, #204]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d40:	4b2e      	ldr	r3, [pc, #184]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d4e:	492b      	ldr	r1, [pc, #172]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d011      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d62:	4b26      	ldr	r3, [pc, #152]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d70:	4922      	ldr	r1, [pc, #136]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d80:	d101      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d82:	2301      	movs	r3, #1
 8004d84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004d92:	2301      	movs	r3, #1
 8004d94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004da2:	4b16      	ldr	r3, [pc, #88]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db0:	4912      	ldr	r1, [pc, #72]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00b      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dc4:	4b0d      	ldr	r3, [pc, #52]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dd4:	4909      	ldr	r1, [pc, #36]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d006      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 80d9 	beq.w	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004df0:	4b02      	ldr	r3, [pc, #8]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a01      	ldr	r2, [pc, #4]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004df6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dfa:	e001      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e02:	f7fe f88b 	bl	8002f1c <HAL_GetTick>
 8004e06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e0a:	f7fe f887 	bl	8002f1c <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b64      	cmp	r3, #100	; 0x64
 8004e16:	d901      	bls.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e194      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e1c:	4b6c      	ldr	r3, [pc, #432]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1f0      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d021      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d11d      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e3c:	4b64      	ldr	r3, [pc, #400]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e42:	0c1b      	lsrs	r3, r3, #16
 8004e44:	f003 0303 	and.w	r3, r3, #3
 8004e48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e4a:	4b61      	ldr	r3, [pc, #388]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e50:	0e1b      	lsrs	r3, r3, #24
 8004e52:	f003 030f 	and.w	r3, r3, #15
 8004e56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	019a      	lsls	r2, r3, #6
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	041b      	lsls	r3, r3, #16
 8004e62:	431a      	orrs	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	061b      	lsls	r3, r3, #24
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	071b      	lsls	r3, r3, #28
 8004e70:	4957      	ldr	r1, [pc, #348]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d004      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e8c:	d00a      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d02e      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ea2:	d129      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ea4:	4b4a      	ldr	r3, [pc, #296]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eaa:	0c1b      	lsrs	r3, r3, #16
 8004eac:	f003 0303 	and.w	r3, r3, #3
 8004eb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004eb2:	4b47      	ldr	r3, [pc, #284]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eb8:	0f1b      	lsrs	r3, r3, #28
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	019a      	lsls	r2, r3, #6
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	041b      	lsls	r3, r3, #16
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	061b      	lsls	r3, r3, #24
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	071b      	lsls	r3, r3, #28
 8004ed8:	493d      	ldr	r1, [pc, #244]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ee0:	4b3b      	ldr	r3, [pc, #236]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ee6:	f023 021f 	bic.w	r2, r3, #31
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	4937      	ldr	r1, [pc, #220]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01d      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f04:	4b32      	ldr	r3, [pc, #200]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f0a:	0e1b      	lsrs	r3, r3, #24
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f12:	4b2f      	ldr	r3, [pc, #188]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f18:	0f1b      	lsrs	r3, r3, #28
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	019a      	lsls	r2, r3, #6
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	041b      	lsls	r3, r3, #16
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	061b      	lsls	r3, r3, #24
 8004f32:	431a      	orrs	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	071b      	lsls	r3, r3, #28
 8004f38:	4925      	ldr	r1, [pc, #148]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d011      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	019a      	lsls	r2, r3, #6
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	041b      	lsls	r3, r3, #16
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	061b      	lsls	r3, r3, #24
 8004f60:	431a      	orrs	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	071b      	lsls	r3, r3, #28
 8004f68:	4919      	ldr	r1, [pc, #100]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f70:	4b17      	ldr	r3, [pc, #92]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a16      	ldr	r2, [pc, #88]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f7c:	f7fd ffce 	bl	8002f1c <HAL_GetTick>
 8004f80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f84:	f7fd ffca 	bl	8002f1c <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b64      	cmp	r3, #100	; 0x64
 8004f90:	d901      	bls.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e0d7      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f96:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0f0      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	f040 80cd 	bne.w	8005144 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004faa:	4b09      	ldr	r3, [pc, #36]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a08      	ldr	r2, [pc, #32]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb6:	f7fd ffb1 	bl	8002f1c <HAL_GetTick>
 8004fba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fbc:	e00a      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fbe:	f7fd ffad 	bl	8002f1c <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b64      	cmp	r3, #100	; 0x64
 8004fca:	d903      	bls.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e0ba      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004fd0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fd4:	4b5e      	ldr	r3, [pc, #376]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fe0:	d0ed      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d009      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d02e      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d12a      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800500a:	4b51      	ldr	r3, [pc, #324]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005010:	0c1b      	lsrs	r3, r3, #16
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005018:	4b4d      	ldr	r3, [pc, #308]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501e:	0f1b      	lsrs	r3, r3, #28
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	019a      	lsls	r2, r3, #6
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	041b      	lsls	r3, r3, #16
 8005030:	431a      	orrs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	061b      	lsls	r3, r3, #24
 8005038:	431a      	orrs	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	071b      	lsls	r3, r3, #28
 800503e:	4944      	ldr	r1, [pc, #272]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005040:	4313      	orrs	r3, r2
 8005042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005046:	4b42      	ldr	r3, [pc, #264]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800504c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	3b01      	subs	r3, #1
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	493d      	ldr	r1, [pc, #244]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d022      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005070:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005074:	d11d      	bne.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005076:	4b36      	ldr	r3, [pc, #216]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507c:	0e1b      	lsrs	r3, r3, #24
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005084:	4b32      	ldr	r3, [pc, #200]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508a:	0f1b      	lsrs	r3, r3, #28
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	019a      	lsls	r2, r3, #6
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	041b      	lsls	r3, r3, #16
 800509e:	431a      	orrs	r2, r3
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	061b      	lsls	r3, r3, #24
 80050a4:	431a      	orrs	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	071b      	lsls	r3, r3, #28
 80050aa:	4929      	ldr	r1, [pc, #164]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d028      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050be:	4b24      	ldr	r3, [pc, #144]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c4:	0e1b      	lsrs	r3, r3, #24
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050cc:	4b20      	ldr	r3, [pc, #128]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d2:	0c1b      	lsrs	r3, r3, #16
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	019a      	lsls	r2, r3, #6
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	041b      	lsls	r3, r3, #16
 80050e4:	431a      	orrs	r2, r3
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	061b      	lsls	r3, r3, #24
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	071b      	lsls	r3, r3, #28
 80050f2:	4917      	ldr	r1, [pc, #92]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80050fa:	4b15      	ldr	r3, [pc, #84]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005100:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	4911      	ldr	r1, [pc, #68]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005110:	4b0f      	ldr	r3, [pc, #60]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a0e      	ldr	r2, [pc, #56]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800511a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800511c:	f7fd fefe 	bl	8002f1c <HAL_GetTick>
 8005120:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005124:	f7fd fefa 	bl	8002f1c <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b64      	cmp	r3, #100	; 0x64
 8005130:	d901      	bls.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e007      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005136:	4b06      	ldr	r3, [pc, #24]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800513e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005142:	d1ef      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3720      	adds	r7, #32
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	40023800 	.word	0x40023800

08005154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e049      	b.n	80051fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fd fb2a 	bl	80027d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3304      	adds	r3, #4
 8005190:	4619      	mov	r1, r3
 8005192:	4610      	mov	r0, r2
 8005194:	f000 ffae 	bl	80060f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	d001      	beq.n	800521c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e054      	b.n	80052c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a26      	ldr	r2, [pc, #152]	; (80052d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d022      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005246:	d01d      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a22      	ldr	r2, [pc, #136]	; (80052d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d018      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a21      	ldr	r2, [pc, #132]	; (80052dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d013      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1f      	ldr	r2, [pc, #124]	; (80052e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00e      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d009      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1c      	ldr	r2, [pc, #112]	; (80052e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d004      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1b      	ldr	r2, [pc, #108]	; (80052ec <HAL_TIM_Base_Start_IT+0xe8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d115      	bne.n	80052b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	4b19      	ldr	r3, [pc, #100]	; (80052f0 <HAL_TIM_Base_Start_IT+0xec>)
 800528c:	4013      	ands	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b06      	cmp	r3, #6
 8005294:	d015      	beq.n	80052c2 <HAL_TIM_Base_Start_IT+0xbe>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800529c:	d011      	beq.n	80052c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0201 	orr.w	r2, r2, #1
 80052ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ae:	e008      	b.n	80052c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	e000      	b.n	80052c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	40010000 	.word	0x40010000
 80052d8:	40000400 	.word	0x40000400
 80052dc:	40000800 	.word	0x40000800
 80052e0:	40000c00 	.word	0x40000c00
 80052e4:	40010400 	.word	0x40010400
 80052e8:	40014000 	.word	0x40014000
 80052ec:	40001800 	.word	0x40001800
 80052f0:	00010007 	.word	0x00010007

080052f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e049      	b.n	800539a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fd faf8 	bl	8002910 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3304      	adds	r3, #4
 8005330:	4619      	mov	r1, r3
 8005332:	4610      	mov	r0, r2
 8005334:	f000 fede 	bl	80060f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d109      	bne.n	80053c8 <HAL_TIM_PWM_Start+0x24>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	bf14      	ite	ne
 80053c0:	2301      	movne	r3, #1
 80053c2:	2300      	moveq	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	e03c      	b.n	8005442 <HAL_TIM_PWM_Start+0x9e>
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d109      	bne.n	80053e2 <HAL_TIM_PWM_Start+0x3e>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	bf14      	ite	ne
 80053da:	2301      	movne	r3, #1
 80053dc:	2300      	moveq	r3, #0
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	e02f      	b.n	8005442 <HAL_TIM_PWM_Start+0x9e>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d109      	bne.n	80053fc <HAL_TIM_PWM_Start+0x58>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	bf14      	ite	ne
 80053f4:	2301      	movne	r3, #1
 80053f6:	2300      	moveq	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	e022      	b.n	8005442 <HAL_TIM_PWM_Start+0x9e>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2b0c      	cmp	r3, #12
 8005400:	d109      	bne.n	8005416 <HAL_TIM_PWM_Start+0x72>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b01      	cmp	r3, #1
 800540c:	bf14      	ite	ne
 800540e:	2301      	movne	r3, #1
 8005410:	2300      	moveq	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	e015      	b.n	8005442 <HAL_TIM_PWM_Start+0x9e>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b10      	cmp	r3, #16
 800541a:	d109      	bne.n	8005430 <HAL_TIM_PWM_Start+0x8c>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b01      	cmp	r3, #1
 8005426:	bf14      	ite	ne
 8005428:	2301      	movne	r3, #1
 800542a:	2300      	moveq	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	e008      	b.n	8005442 <HAL_TIM_PWM_Start+0x9e>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b01      	cmp	r3, #1
 800543a:	bf14      	ite	ne
 800543c:	2301      	movne	r3, #1
 800543e:	2300      	moveq	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e092      	b.n	8005570 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d104      	bne.n	800545a <HAL_TIM_PWM_Start+0xb6>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005458:	e023      	b.n	80054a2 <HAL_TIM_PWM_Start+0xfe>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b04      	cmp	r3, #4
 800545e:	d104      	bne.n	800546a <HAL_TIM_PWM_Start+0xc6>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005468:	e01b      	b.n	80054a2 <HAL_TIM_PWM_Start+0xfe>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b08      	cmp	r3, #8
 800546e:	d104      	bne.n	800547a <HAL_TIM_PWM_Start+0xd6>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005478:	e013      	b.n	80054a2 <HAL_TIM_PWM_Start+0xfe>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b0c      	cmp	r3, #12
 800547e:	d104      	bne.n	800548a <HAL_TIM_PWM_Start+0xe6>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005488:	e00b      	b.n	80054a2 <HAL_TIM_PWM_Start+0xfe>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b10      	cmp	r3, #16
 800548e:	d104      	bne.n	800549a <HAL_TIM_PWM_Start+0xf6>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005498:	e003      	b.n	80054a2 <HAL_TIM_PWM_Start+0xfe>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2202      	movs	r2, #2
 800549e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2201      	movs	r2, #1
 80054a8:	6839      	ldr	r1, [r7, #0]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f001 fae4 	bl	8006a78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a30      	ldr	r2, [pc, #192]	; (8005578 <HAL_TIM_PWM_Start+0x1d4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d004      	beq.n	80054c4 <HAL_TIM_PWM_Start+0x120>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a2f      	ldr	r2, [pc, #188]	; (800557c <HAL_TIM_PWM_Start+0x1d8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d101      	bne.n	80054c8 <HAL_TIM_PWM_Start+0x124>
 80054c4:	2301      	movs	r3, #1
 80054c6:	e000      	b.n	80054ca <HAL_TIM_PWM_Start+0x126>
 80054c8:	2300      	movs	r3, #0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d007      	beq.n	80054de <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a25      	ldr	r2, [pc, #148]	; (8005578 <HAL_TIM_PWM_Start+0x1d4>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d022      	beq.n	800552e <HAL_TIM_PWM_Start+0x18a>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f0:	d01d      	beq.n	800552e <HAL_TIM_PWM_Start+0x18a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a22      	ldr	r2, [pc, #136]	; (8005580 <HAL_TIM_PWM_Start+0x1dc>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d018      	beq.n	800552e <HAL_TIM_PWM_Start+0x18a>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a20      	ldr	r2, [pc, #128]	; (8005584 <HAL_TIM_PWM_Start+0x1e0>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d013      	beq.n	800552e <HAL_TIM_PWM_Start+0x18a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1f      	ldr	r2, [pc, #124]	; (8005588 <HAL_TIM_PWM_Start+0x1e4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00e      	beq.n	800552e <HAL_TIM_PWM_Start+0x18a>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a19      	ldr	r2, [pc, #100]	; (800557c <HAL_TIM_PWM_Start+0x1d8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d009      	beq.n	800552e <HAL_TIM_PWM_Start+0x18a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1b      	ldr	r2, [pc, #108]	; (800558c <HAL_TIM_PWM_Start+0x1e8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d004      	beq.n	800552e <HAL_TIM_PWM_Start+0x18a>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a19      	ldr	r2, [pc, #100]	; (8005590 <HAL_TIM_PWM_Start+0x1ec>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d115      	bne.n	800555a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	4b17      	ldr	r3, [pc, #92]	; (8005594 <HAL_TIM_PWM_Start+0x1f0>)
 8005536:	4013      	ands	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b06      	cmp	r3, #6
 800553e:	d015      	beq.n	800556c <HAL_TIM_PWM_Start+0x1c8>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005546:	d011      	beq.n	800556c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005558:	e008      	b.n	800556c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0201 	orr.w	r2, r2, #1
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	e000      	b.n	800556e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800556c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	40010000 	.word	0x40010000
 800557c:	40010400 	.word	0x40010400
 8005580:	40000400 	.word	0x40000400
 8005584:	40000800 	.word	0x40000800
 8005588:	40000c00 	.word	0x40000c00
 800558c:	40014000 	.word	0x40014000
 8005590:	40001800 	.word	0x40001800
 8005594:	00010007 	.word	0x00010007

08005598 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e049      	b.n	800563e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f841 	bl	8005646 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3304      	adds	r3, #4
 80055d4:	4619      	mov	r1, r3
 80055d6:	4610      	mov	r0, r2
 80055d8:	f000 fd8c 	bl	80060f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
	...

0800565c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d104      	bne.n	800567a <HAL_TIM_IC_Start_IT+0x1e>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005676:	b2db      	uxtb	r3, r3
 8005678:	e023      	b.n	80056c2 <HAL_TIM_IC_Start_IT+0x66>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b04      	cmp	r3, #4
 800567e:	d104      	bne.n	800568a <HAL_TIM_IC_Start_IT+0x2e>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005686:	b2db      	uxtb	r3, r3
 8005688:	e01b      	b.n	80056c2 <HAL_TIM_IC_Start_IT+0x66>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b08      	cmp	r3, #8
 800568e:	d104      	bne.n	800569a <HAL_TIM_IC_Start_IT+0x3e>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005696:	b2db      	uxtb	r3, r3
 8005698:	e013      	b.n	80056c2 <HAL_TIM_IC_Start_IT+0x66>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b0c      	cmp	r3, #12
 800569e:	d104      	bne.n	80056aa <HAL_TIM_IC_Start_IT+0x4e>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	e00b      	b.n	80056c2 <HAL_TIM_IC_Start_IT+0x66>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b10      	cmp	r3, #16
 80056ae:	d104      	bne.n	80056ba <HAL_TIM_IC_Start_IT+0x5e>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	e003      	b.n	80056c2 <HAL_TIM_IC_Start_IT+0x66>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d104      	bne.n	80056d4 <HAL_TIM_IC_Start_IT+0x78>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	e013      	b.n	80056fc <HAL_TIM_IC_Start_IT+0xa0>
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d104      	bne.n	80056e4 <HAL_TIM_IC_Start_IT+0x88>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	e00b      	b.n	80056fc <HAL_TIM_IC_Start_IT+0xa0>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d104      	bne.n	80056f4 <HAL_TIM_IC_Start_IT+0x98>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	e003      	b.n	80056fc <HAL_TIM_IC_Start_IT+0xa0>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80056fe:	7bbb      	ldrb	r3, [r7, #14]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d102      	bne.n	800570a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005704:	7b7b      	ldrb	r3, [r7, #13]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d001      	beq.n	800570e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e0e2      	b.n	80058d4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d104      	bne.n	800571e <HAL_TIM_IC_Start_IT+0xc2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800571c:	e023      	b.n	8005766 <HAL_TIM_IC_Start_IT+0x10a>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b04      	cmp	r3, #4
 8005722:	d104      	bne.n	800572e <HAL_TIM_IC_Start_IT+0xd2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800572c:	e01b      	b.n	8005766 <HAL_TIM_IC_Start_IT+0x10a>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b08      	cmp	r3, #8
 8005732:	d104      	bne.n	800573e <HAL_TIM_IC_Start_IT+0xe2>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800573c:	e013      	b.n	8005766 <HAL_TIM_IC_Start_IT+0x10a>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b0c      	cmp	r3, #12
 8005742:	d104      	bne.n	800574e <HAL_TIM_IC_Start_IT+0xf2>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800574c:	e00b      	b.n	8005766 <HAL_TIM_IC_Start_IT+0x10a>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b10      	cmp	r3, #16
 8005752:	d104      	bne.n	800575e <HAL_TIM_IC_Start_IT+0x102>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800575c:	e003      	b.n	8005766 <HAL_TIM_IC_Start_IT+0x10a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2202      	movs	r2, #2
 8005762:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d104      	bne.n	8005776 <HAL_TIM_IC_Start_IT+0x11a>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005774:	e013      	b.n	800579e <HAL_TIM_IC_Start_IT+0x142>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b04      	cmp	r3, #4
 800577a:	d104      	bne.n	8005786 <HAL_TIM_IC_Start_IT+0x12a>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005784:	e00b      	b.n	800579e <HAL_TIM_IC_Start_IT+0x142>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b08      	cmp	r3, #8
 800578a:	d104      	bne.n	8005796 <HAL_TIM_IC_Start_IT+0x13a>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005794:	e003      	b.n	800579e <HAL_TIM_IC_Start_IT+0x142>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2202      	movs	r2, #2
 800579a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b0c      	cmp	r3, #12
 80057a2:	d841      	bhi.n	8005828 <HAL_TIM_IC_Start_IT+0x1cc>
 80057a4:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <HAL_TIM_IC_Start_IT+0x150>)
 80057a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057aa:	bf00      	nop
 80057ac:	080057e1 	.word	0x080057e1
 80057b0:	08005829 	.word	0x08005829
 80057b4:	08005829 	.word	0x08005829
 80057b8:	08005829 	.word	0x08005829
 80057bc:	080057f3 	.word	0x080057f3
 80057c0:	08005829 	.word	0x08005829
 80057c4:	08005829 	.word	0x08005829
 80057c8:	08005829 	.word	0x08005829
 80057cc:	08005805 	.word	0x08005805
 80057d0:	08005829 	.word	0x08005829
 80057d4:	08005829 	.word	0x08005829
 80057d8:	08005829 	.word	0x08005829
 80057dc:	08005817 	.word	0x08005817
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0202 	orr.w	r2, r2, #2
 80057ee:	60da      	str	r2, [r3, #12]
      break;
 80057f0:	e01d      	b.n	800582e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f042 0204 	orr.w	r2, r2, #4
 8005800:	60da      	str	r2, [r3, #12]
      break;
 8005802:	e014      	b.n	800582e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0208 	orr.w	r2, r2, #8
 8005812:	60da      	str	r2, [r3, #12]
      break;
 8005814:	e00b      	b.n	800582e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f042 0210 	orr.w	r2, r2, #16
 8005824:	60da      	str	r2, [r3, #12]
      break;
 8005826:	e002      	b.n	800582e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	73fb      	strb	r3, [r7, #15]
      break;
 800582c:	bf00      	nop
  }

  if (status == HAL_OK)
 800582e:	7bfb      	ldrb	r3, [r7, #15]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d14e      	bne.n	80058d2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2201      	movs	r2, #1
 800583a:	6839      	ldr	r1, [r7, #0]
 800583c:	4618      	mov	r0, r3
 800583e:	f001 f91b 	bl	8006a78 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a25      	ldr	r2, [pc, #148]	; (80058dc <HAL_TIM_IC_Start_IT+0x280>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d022      	beq.n	8005892 <HAL_TIM_IC_Start_IT+0x236>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005854:	d01d      	beq.n	8005892 <HAL_TIM_IC_Start_IT+0x236>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a21      	ldr	r2, [pc, #132]	; (80058e0 <HAL_TIM_IC_Start_IT+0x284>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d018      	beq.n	8005892 <HAL_TIM_IC_Start_IT+0x236>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1f      	ldr	r2, [pc, #124]	; (80058e4 <HAL_TIM_IC_Start_IT+0x288>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d013      	beq.n	8005892 <HAL_TIM_IC_Start_IT+0x236>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1e      	ldr	r2, [pc, #120]	; (80058e8 <HAL_TIM_IC_Start_IT+0x28c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00e      	beq.n	8005892 <HAL_TIM_IC_Start_IT+0x236>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a1c      	ldr	r2, [pc, #112]	; (80058ec <HAL_TIM_IC_Start_IT+0x290>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d009      	beq.n	8005892 <HAL_TIM_IC_Start_IT+0x236>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a1b      	ldr	r2, [pc, #108]	; (80058f0 <HAL_TIM_IC_Start_IT+0x294>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d004      	beq.n	8005892 <HAL_TIM_IC_Start_IT+0x236>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a19      	ldr	r2, [pc, #100]	; (80058f4 <HAL_TIM_IC_Start_IT+0x298>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d115      	bne.n	80058be <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	4b17      	ldr	r3, [pc, #92]	; (80058f8 <HAL_TIM_IC_Start_IT+0x29c>)
 800589a:	4013      	ands	r3, r2
 800589c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b06      	cmp	r3, #6
 80058a2:	d015      	beq.n	80058d0 <HAL_TIM_IC_Start_IT+0x274>
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058aa:	d011      	beq.n	80058d0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058bc:	e008      	b.n	80058d0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 0201 	orr.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	e000      	b.n	80058d2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40010000 	.word	0x40010000
 80058e0:	40000400 	.word	0x40000400
 80058e4:	40000800 	.word	0x40000800
 80058e8:	40000c00 	.word	0x40000c00
 80058ec:	40010400 	.word	0x40010400
 80058f0:	40014000 	.word	0x40014000
 80058f4:	40001800 	.word	0x40001800
 80058f8:	00010007 	.word	0x00010007

080058fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b02      	cmp	r3, #2
 8005910:	d122      	bne.n	8005958 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b02      	cmp	r3, #2
 800591e:	d11b      	bne.n	8005958 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0202 	mvn.w	r2, #2
 8005928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fc f816 	bl	8001970 <HAL_TIM_IC_CaptureCallback>
 8005944:	e005      	b.n	8005952 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fbb6 	bl	80060b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fbbd 	bl	80060cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	2b04      	cmp	r3, #4
 8005964:	d122      	bne.n	80059ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b04      	cmp	r3, #4
 8005972:	d11b      	bne.n	80059ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0204 	mvn.w	r2, #4
 800597c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2202      	movs	r2, #2
 8005982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fb ffec 	bl	8001970 <HAL_TIM_IC_CaptureCallback>
 8005998:	e005      	b.n	80059a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fb8c 	bl	80060b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fb93 	bl	80060cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d122      	bne.n	8005a00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d11b      	bne.n	8005a00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f06f 0208 	mvn.w	r2, #8
 80059d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2204      	movs	r2, #4
 80059d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fb ffc2 	bl	8001970 <HAL_TIM_IC_CaptureCallback>
 80059ec:	e005      	b.n	80059fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fb62 	bl	80060b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fb69 	bl	80060cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	2b10      	cmp	r3, #16
 8005a0c:	d122      	bne.n	8005a54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	2b10      	cmp	r3, #16
 8005a1a:	d11b      	bne.n	8005a54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f06f 0210 	mvn.w	r2, #16
 8005a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2208      	movs	r2, #8
 8005a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fb ff98 	bl	8001970 <HAL_TIM_IC_CaptureCallback>
 8005a40:	e005      	b.n	8005a4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fb38 	bl	80060b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fb3f 	bl	80060cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d10e      	bne.n	8005a80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d107      	bne.n	8005a80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f06f 0201 	mvn.w	r2, #1
 8005a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fb ff44 	bl	8001908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8a:	2b80      	cmp	r3, #128	; 0x80
 8005a8c:	d10e      	bne.n	8005aac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a98:	2b80      	cmp	r3, #128	; 0x80
 8005a9a:	d107      	bne.n	8005aac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f001 f8a4 	bl	8006bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aba:	d10e      	bne.n	8005ada <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac6:	2b80      	cmp	r3, #128	; 0x80
 8005ac8:	d107      	bne.n	8005ada <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f001 f897 	bl	8006c08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae4:	2b40      	cmp	r3, #64	; 0x40
 8005ae6:	d10e      	bne.n	8005b06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af2:	2b40      	cmp	r3, #64	; 0x40
 8005af4:	d107      	bne.n	8005b06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 faed 	bl	80060e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	f003 0320 	and.w	r3, r3, #32
 8005b10:	2b20      	cmp	r3, #32
 8005b12:	d10e      	bne.n	8005b32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b20      	cmp	r3, #32
 8005b20:	d107      	bne.n	8005b32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f06f 0220 	mvn.w	r2, #32
 8005b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f001 f857 	bl	8006be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b32:	bf00      	nop
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b086      	sub	sp, #24
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e088      	b.n	8005c6a <HAL_TIM_IC_ConfigChannel+0x130>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d11b      	bne.n	8005b9e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005b76:	f000 fdbb 	bl	80066f0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	699a      	ldr	r2, [r3, #24]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 020c 	bic.w	r2, r2, #12
 8005b88:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6999      	ldr	r1, [r3, #24]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	619a      	str	r2, [r3, #24]
 8005b9c:	e060      	b.n	8005c60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d11c      	bne.n	8005bde <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005bb4:	f000 fe3f 	bl	8006836 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005bc6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6999      	ldr	r1, [r3, #24]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	021a      	lsls	r2, r3, #8
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	619a      	str	r2, [r3, #24]
 8005bdc:	e040      	b.n	8005c60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d11b      	bne.n	8005c1c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005bf4:	f000 fe8c 	bl	8006910 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	69da      	ldr	r2, [r3, #28]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 020c 	bic.w	r2, r2, #12
 8005c06:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	69d9      	ldr	r1, [r3, #28]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	61da      	str	r2, [r3, #28]
 8005c1a:	e021      	b.n	8005c60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b0c      	cmp	r3, #12
 8005c20:	d11c      	bne.n	8005c5c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005c32:	f000 fea9 	bl	8006988 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	69da      	ldr	r2, [r3, #28]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c44:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69d9      	ldr	r1, [r3, #28]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	021a      	lsls	r2, r3, #8
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	61da      	str	r2, [r3, #28]
 8005c5a:	e001      	b.n	8005c60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c8e:	2302      	movs	r3, #2
 8005c90:	e0ff      	b.n	8005e92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b14      	cmp	r3, #20
 8005c9e:	f200 80f0 	bhi.w	8005e82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ca2:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca8:	08005cfd 	.word	0x08005cfd
 8005cac:	08005e83 	.word	0x08005e83
 8005cb0:	08005e83 	.word	0x08005e83
 8005cb4:	08005e83 	.word	0x08005e83
 8005cb8:	08005d3d 	.word	0x08005d3d
 8005cbc:	08005e83 	.word	0x08005e83
 8005cc0:	08005e83 	.word	0x08005e83
 8005cc4:	08005e83 	.word	0x08005e83
 8005cc8:	08005d7f 	.word	0x08005d7f
 8005ccc:	08005e83 	.word	0x08005e83
 8005cd0:	08005e83 	.word	0x08005e83
 8005cd4:	08005e83 	.word	0x08005e83
 8005cd8:	08005dbf 	.word	0x08005dbf
 8005cdc:	08005e83 	.word	0x08005e83
 8005ce0:	08005e83 	.word	0x08005e83
 8005ce4:	08005e83 	.word	0x08005e83
 8005ce8:	08005e01 	.word	0x08005e01
 8005cec:	08005e83 	.word	0x08005e83
 8005cf0:	08005e83 	.word	0x08005e83
 8005cf4:	08005e83 	.word	0x08005e83
 8005cf8:	08005e41 	.word	0x08005e41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fa96 	bl	8006234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699a      	ldr	r2, [r3, #24]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0208 	orr.w	r2, r2, #8
 8005d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	699a      	ldr	r2, [r3, #24]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0204 	bic.w	r2, r2, #4
 8005d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6999      	ldr	r1, [r3, #24]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	691a      	ldr	r2, [r3, #16]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	619a      	str	r2, [r3, #24]
      break;
 8005d3a:	e0a5      	b.n	8005e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fae8 	bl	8006318 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699a      	ldr	r2, [r3, #24]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6999      	ldr	r1, [r3, #24]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	021a      	lsls	r2, r3, #8
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	619a      	str	r2, [r3, #24]
      break;
 8005d7c:	e084      	b.n	8005e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68b9      	ldr	r1, [r7, #8]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 fb3f 	bl	8006408 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69da      	ldr	r2, [r3, #28]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 0208 	orr.w	r2, r2, #8
 8005d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69da      	ldr	r2, [r3, #28]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0204 	bic.w	r2, r2, #4
 8005da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69d9      	ldr	r1, [r3, #28]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	61da      	str	r2, [r3, #28]
      break;
 8005dbc:	e064      	b.n	8005e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fb95 	bl	80064f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69da      	ldr	r2, [r3, #28]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69da      	ldr	r2, [r3, #28]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69d9      	ldr	r1, [r3, #28]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	021a      	lsls	r2, r3, #8
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	61da      	str	r2, [r3, #28]
      break;
 8005dfe:	e043      	b.n	8005e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fbcc 	bl	80065a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0208 	orr.w	r2, r2, #8
 8005e1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0204 	bic.w	r2, r2, #4
 8005e2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	691a      	ldr	r2, [r3, #16]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e3e:	e023      	b.n	8005e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68b9      	ldr	r1, [r7, #8]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 fbfe 	bl	8006648 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	021a      	lsls	r2, r3, #8
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e80:	e002      	b.n	8005e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	75fb      	strb	r3, [r7, #23]
      break;
 8005e86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop

08005e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <HAL_TIM_ConfigClockSource+0x1c>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e0b4      	b.n	8006022 <HAL_TIM_ConfigClockSource+0x186>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	4b56      	ldr	r3, [pc, #344]	; (800602c <HAL_TIM_ConfigClockSource+0x190>)
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ede:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef0:	d03e      	beq.n	8005f70 <HAL_TIM_ConfigClockSource+0xd4>
 8005ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef6:	f200 8087 	bhi.w	8006008 <HAL_TIM_ConfigClockSource+0x16c>
 8005efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efe:	f000 8086 	beq.w	800600e <HAL_TIM_ConfigClockSource+0x172>
 8005f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f06:	d87f      	bhi.n	8006008 <HAL_TIM_ConfigClockSource+0x16c>
 8005f08:	2b70      	cmp	r3, #112	; 0x70
 8005f0a:	d01a      	beq.n	8005f42 <HAL_TIM_ConfigClockSource+0xa6>
 8005f0c:	2b70      	cmp	r3, #112	; 0x70
 8005f0e:	d87b      	bhi.n	8006008 <HAL_TIM_ConfigClockSource+0x16c>
 8005f10:	2b60      	cmp	r3, #96	; 0x60
 8005f12:	d050      	beq.n	8005fb6 <HAL_TIM_ConfigClockSource+0x11a>
 8005f14:	2b60      	cmp	r3, #96	; 0x60
 8005f16:	d877      	bhi.n	8006008 <HAL_TIM_ConfigClockSource+0x16c>
 8005f18:	2b50      	cmp	r3, #80	; 0x50
 8005f1a:	d03c      	beq.n	8005f96 <HAL_TIM_ConfigClockSource+0xfa>
 8005f1c:	2b50      	cmp	r3, #80	; 0x50
 8005f1e:	d873      	bhi.n	8006008 <HAL_TIM_ConfigClockSource+0x16c>
 8005f20:	2b40      	cmp	r3, #64	; 0x40
 8005f22:	d058      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0x13a>
 8005f24:	2b40      	cmp	r3, #64	; 0x40
 8005f26:	d86f      	bhi.n	8006008 <HAL_TIM_ConfigClockSource+0x16c>
 8005f28:	2b30      	cmp	r3, #48	; 0x30
 8005f2a:	d064      	beq.n	8005ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8005f2c:	2b30      	cmp	r3, #48	; 0x30
 8005f2e:	d86b      	bhi.n	8006008 <HAL_TIM_ConfigClockSource+0x16c>
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	d060      	beq.n	8005ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8005f34:	2b20      	cmp	r3, #32
 8005f36:	d867      	bhi.n	8006008 <HAL_TIM_ConfigClockSource+0x16c>
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d05c      	beq.n	8005ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8005f3c:	2b10      	cmp	r3, #16
 8005f3e:	d05a      	beq.n	8005ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8005f40:	e062      	b.n	8006008 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f52:	f000 fd71 	bl	8006a38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	609a      	str	r2, [r3, #8]
      break;
 8005f6e:	e04f      	b.n	8006010 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f80:	f000 fd5a 	bl	8006a38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f92:	609a      	str	r2, [r3, #8]
      break;
 8005f94:	e03c      	b.n	8006010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f000 fc18 	bl	80067d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2150      	movs	r1, #80	; 0x50
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 fd27 	bl	8006a02 <TIM_ITRx_SetConfig>
      break;
 8005fb4:	e02c      	b.n	8006010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f000 fc74 	bl	80068b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2160      	movs	r1, #96	; 0x60
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fd17 	bl	8006a02 <TIM_ITRx_SetConfig>
      break;
 8005fd4:	e01c      	b.n	8006010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f000 fbf8 	bl	80067d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2140      	movs	r1, #64	; 0x40
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fd07 	bl	8006a02 <TIM_ITRx_SetConfig>
      break;
 8005ff4:	e00c      	b.n	8006010 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4619      	mov	r1, r3
 8006000:	4610      	mov	r0, r2
 8006002:	f000 fcfe 	bl	8006a02 <TIM_ITRx_SetConfig>
      break;
 8006006:	e003      	b.n	8006010 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	73fb      	strb	r3, [r7, #15]
      break;
 800600c:	e000      	b.n	8006010 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800600e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006020:	7bfb      	ldrb	r3, [r7, #15]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	fffeff88 	.word	0xfffeff88

08006030 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b0c      	cmp	r3, #12
 8006042:	d831      	bhi.n	80060a8 <HAL_TIM_ReadCapturedValue+0x78>
 8006044:	a201      	add	r2, pc, #4	; (adr r2, 800604c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	08006081 	.word	0x08006081
 8006050:	080060a9 	.word	0x080060a9
 8006054:	080060a9 	.word	0x080060a9
 8006058:	080060a9 	.word	0x080060a9
 800605c:	0800608b 	.word	0x0800608b
 8006060:	080060a9 	.word	0x080060a9
 8006064:	080060a9 	.word	0x080060a9
 8006068:	080060a9 	.word	0x080060a9
 800606c:	08006095 	.word	0x08006095
 8006070:	080060a9 	.word	0x080060a9
 8006074:	080060a9 	.word	0x080060a9
 8006078:	080060a9 	.word	0x080060a9
 800607c:	0800609f 	.word	0x0800609f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006086:	60fb      	str	r3, [r7, #12]

      break;
 8006088:	e00f      	b.n	80060aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	60fb      	str	r3, [r7, #12]

      break;
 8006092:	e00a      	b.n	80060aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609a:	60fb      	str	r3, [r7, #12]

      break;
 800609c:	e005      	b.n	80060aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a4:	60fb      	str	r3, [r7, #12]

      break;
 80060a6:	e000      	b.n	80060aa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80060a8:	bf00      	nop
  }

  return tmpreg;
 80060aa:	68fb      	ldr	r3, [r7, #12]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a40      	ldr	r2, [pc, #256]	; (8006208 <TIM_Base_SetConfig+0x114>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d013      	beq.n	8006134 <TIM_Base_SetConfig+0x40>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006112:	d00f      	beq.n	8006134 <TIM_Base_SetConfig+0x40>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a3d      	ldr	r2, [pc, #244]	; (800620c <TIM_Base_SetConfig+0x118>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d00b      	beq.n	8006134 <TIM_Base_SetConfig+0x40>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a3c      	ldr	r2, [pc, #240]	; (8006210 <TIM_Base_SetConfig+0x11c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d007      	beq.n	8006134 <TIM_Base_SetConfig+0x40>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a3b      	ldr	r2, [pc, #236]	; (8006214 <TIM_Base_SetConfig+0x120>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d003      	beq.n	8006134 <TIM_Base_SetConfig+0x40>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a3a      	ldr	r2, [pc, #232]	; (8006218 <TIM_Base_SetConfig+0x124>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d108      	bne.n	8006146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a2f      	ldr	r2, [pc, #188]	; (8006208 <TIM_Base_SetConfig+0x114>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d02b      	beq.n	80061a6 <TIM_Base_SetConfig+0xb2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006154:	d027      	beq.n	80061a6 <TIM_Base_SetConfig+0xb2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a2c      	ldr	r2, [pc, #176]	; (800620c <TIM_Base_SetConfig+0x118>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d023      	beq.n	80061a6 <TIM_Base_SetConfig+0xb2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a2b      	ldr	r2, [pc, #172]	; (8006210 <TIM_Base_SetConfig+0x11c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d01f      	beq.n	80061a6 <TIM_Base_SetConfig+0xb2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a2a      	ldr	r2, [pc, #168]	; (8006214 <TIM_Base_SetConfig+0x120>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d01b      	beq.n	80061a6 <TIM_Base_SetConfig+0xb2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a29      	ldr	r2, [pc, #164]	; (8006218 <TIM_Base_SetConfig+0x124>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d017      	beq.n	80061a6 <TIM_Base_SetConfig+0xb2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a28      	ldr	r2, [pc, #160]	; (800621c <TIM_Base_SetConfig+0x128>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d013      	beq.n	80061a6 <TIM_Base_SetConfig+0xb2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a27      	ldr	r2, [pc, #156]	; (8006220 <TIM_Base_SetConfig+0x12c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d00f      	beq.n	80061a6 <TIM_Base_SetConfig+0xb2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a26      	ldr	r2, [pc, #152]	; (8006224 <TIM_Base_SetConfig+0x130>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00b      	beq.n	80061a6 <TIM_Base_SetConfig+0xb2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a25      	ldr	r2, [pc, #148]	; (8006228 <TIM_Base_SetConfig+0x134>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d007      	beq.n	80061a6 <TIM_Base_SetConfig+0xb2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a24      	ldr	r2, [pc, #144]	; (800622c <TIM_Base_SetConfig+0x138>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d003      	beq.n	80061a6 <TIM_Base_SetConfig+0xb2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a23      	ldr	r2, [pc, #140]	; (8006230 <TIM_Base_SetConfig+0x13c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d108      	bne.n	80061b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a0a      	ldr	r2, [pc, #40]	; (8006208 <TIM_Base_SetConfig+0x114>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d003      	beq.n	80061ec <TIM_Base_SetConfig+0xf8>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a0c      	ldr	r2, [pc, #48]	; (8006218 <TIM_Base_SetConfig+0x124>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d103      	bne.n	80061f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	615a      	str	r2, [r3, #20]
}
 80061fa:	bf00      	nop
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	40010000 	.word	0x40010000
 800620c:	40000400 	.word	0x40000400
 8006210:	40000800 	.word	0x40000800
 8006214:	40000c00 	.word	0x40000c00
 8006218:	40010400 	.word	0x40010400
 800621c:	40014000 	.word	0x40014000
 8006220:	40014400 	.word	0x40014400
 8006224:	40014800 	.word	0x40014800
 8006228:	40001800 	.word	0x40001800
 800622c:	40001c00 	.word	0x40001c00
 8006230:	40002000 	.word	0x40002000

08006234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	f023 0201 	bic.w	r2, r3, #1
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4b2b      	ldr	r3, [pc, #172]	; (800630c <TIM_OC1_SetConfig+0xd8>)
 8006260:	4013      	ands	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0303 	bic.w	r3, r3, #3
 800626a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f023 0302 	bic.w	r3, r3, #2
 800627c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	4313      	orrs	r3, r2
 8006286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a21      	ldr	r2, [pc, #132]	; (8006310 <TIM_OC1_SetConfig+0xdc>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d003      	beq.n	8006298 <TIM_OC1_SetConfig+0x64>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a20      	ldr	r2, [pc, #128]	; (8006314 <TIM_OC1_SetConfig+0xe0>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d10c      	bne.n	80062b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f023 0308 	bic.w	r3, r3, #8
 800629e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f023 0304 	bic.w	r3, r3, #4
 80062b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a16      	ldr	r2, [pc, #88]	; (8006310 <TIM_OC1_SetConfig+0xdc>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d003      	beq.n	80062c2 <TIM_OC1_SetConfig+0x8e>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a15      	ldr	r2, [pc, #84]	; (8006314 <TIM_OC1_SetConfig+0xe0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d111      	bne.n	80062e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	4313      	orrs	r3, r2
 80062da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	621a      	str	r2, [r3, #32]
}
 8006300:	bf00      	nop
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	fffeff8f 	.word	0xfffeff8f
 8006310:	40010000 	.word	0x40010000
 8006314:	40010400 	.word	0x40010400

08006318 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	f023 0210 	bic.w	r2, r3, #16
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	4b2e      	ldr	r3, [pc, #184]	; (80063fc <TIM_OC2_SetConfig+0xe4>)
 8006344:	4013      	ands	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800634e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	021b      	lsls	r3, r3, #8
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f023 0320 	bic.w	r3, r3, #32
 8006362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	011b      	lsls	r3, r3, #4
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	4313      	orrs	r3, r2
 800636e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a23      	ldr	r2, [pc, #140]	; (8006400 <TIM_OC2_SetConfig+0xe8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d003      	beq.n	8006380 <TIM_OC2_SetConfig+0x68>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a22      	ldr	r2, [pc, #136]	; (8006404 <TIM_OC2_SetConfig+0xec>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d10d      	bne.n	800639c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	011b      	lsls	r3, r3, #4
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800639a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a18      	ldr	r2, [pc, #96]	; (8006400 <TIM_OC2_SetConfig+0xe8>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d003      	beq.n	80063ac <TIM_OC2_SetConfig+0x94>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a17      	ldr	r2, [pc, #92]	; (8006404 <TIM_OC2_SetConfig+0xec>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d113      	bne.n	80063d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	621a      	str	r2, [r3, #32]
}
 80063ee:	bf00      	nop
 80063f0:	371c      	adds	r7, #28
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	feff8fff 	.word	0xfeff8fff
 8006400:	40010000 	.word	0x40010000
 8006404:	40010400 	.word	0x40010400

08006408 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	4b2d      	ldr	r3, [pc, #180]	; (80064e8 <TIM_OC3_SetConfig+0xe0>)
 8006434:	4013      	ands	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0303 	bic.w	r3, r3, #3
 800643e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	4313      	orrs	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	021b      	lsls	r3, r3, #8
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	4313      	orrs	r3, r2
 800645c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a22      	ldr	r2, [pc, #136]	; (80064ec <TIM_OC3_SetConfig+0xe4>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d003      	beq.n	800646e <TIM_OC3_SetConfig+0x66>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a21      	ldr	r2, [pc, #132]	; (80064f0 <TIM_OC3_SetConfig+0xe8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d10d      	bne.n	800648a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	021b      	lsls	r3, r3, #8
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	4313      	orrs	r3, r2
 8006480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a17      	ldr	r2, [pc, #92]	; (80064ec <TIM_OC3_SetConfig+0xe4>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d003      	beq.n	800649a <TIM_OC3_SetConfig+0x92>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a16      	ldr	r2, [pc, #88]	; (80064f0 <TIM_OC3_SetConfig+0xe8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d113      	bne.n	80064c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	011b      	lsls	r3, r3, #4
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	011b      	lsls	r3, r3, #4
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	4313      	orrs	r3, r2
 80064c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	621a      	str	r2, [r3, #32]
}
 80064dc:	bf00      	nop
 80064de:	371c      	adds	r7, #28
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	fffeff8f 	.word	0xfffeff8f
 80064ec:	40010000 	.word	0x40010000
 80064f0:	40010400 	.word	0x40010400

080064f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	4b1e      	ldr	r3, [pc, #120]	; (8006598 <TIM_OC4_SetConfig+0xa4>)
 8006520:	4013      	ands	r3, r2
 8006522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800652a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	021b      	lsls	r3, r3, #8
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4313      	orrs	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800653e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	031b      	lsls	r3, r3, #12
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a13      	ldr	r2, [pc, #76]	; (800659c <TIM_OC4_SetConfig+0xa8>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d003      	beq.n	800655c <TIM_OC4_SetConfig+0x68>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a12      	ldr	r2, [pc, #72]	; (80065a0 <TIM_OC4_SetConfig+0xac>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d109      	bne.n	8006570 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006562:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	019b      	lsls	r3, r3, #6
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	4313      	orrs	r3, r2
 800656e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	621a      	str	r2, [r3, #32]
}
 800658a:	bf00      	nop
 800658c:	371c      	adds	r7, #28
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	feff8fff 	.word	0xfeff8fff
 800659c:	40010000 	.word	0x40010000
 80065a0:	40010400 	.word	0x40010400

080065a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	4b1b      	ldr	r3, [pc, #108]	; (800663c <TIM_OC5_SetConfig+0x98>)
 80065d0:	4013      	ands	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80065e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	041b      	lsls	r3, r3, #16
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a12      	ldr	r2, [pc, #72]	; (8006640 <TIM_OC5_SetConfig+0x9c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d003      	beq.n	8006602 <TIM_OC5_SetConfig+0x5e>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a11      	ldr	r2, [pc, #68]	; (8006644 <TIM_OC5_SetConfig+0xa0>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d109      	bne.n	8006616 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006608:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	021b      	lsls	r3, r3, #8
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	4313      	orrs	r3, r2
 8006614:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	621a      	str	r2, [r3, #32]
}
 8006630:	bf00      	nop
 8006632:	371c      	adds	r7, #28
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	fffeff8f 	.word	0xfffeff8f
 8006640:	40010000 	.word	0x40010000
 8006644:	40010400 	.word	0x40010400

08006648 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	4b1c      	ldr	r3, [pc, #112]	; (80066e4 <TIM_OC6_SetConfig+0x9c>)
 8006674:	4013      	ands	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	021b      	lsls	r3, r3, #8
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4313      	orrs	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800668a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	051b      	lsls	r3, r3, #20
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4313      	orrs	r3, r2
 8006696:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a13      	ldr	r2, [pc, #76]	; (80066e8 <TIM_OC6_SetConfig+0xa0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d003      	beq.n	80066a8 <TIM_OC6_SetConfig+0x60>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a12      	ldr	r2, [pc, #72]	; (80066ec <TIM_OC6_SetConfig+0xa4>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d109      	bne.n	80066bc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	029b      	lsls	r3, r3, #10
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	621a      	str	r2, [r3, #32]
}
 80066d6:	bf00      	nop
 80066d8:	371c      	adds	r7, #28
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	feff8fff 	.word	0xfeff8fff
 80066e8:	40010000 	.word	0x40010000
 80066ec:	40010400 	.word	0x40010400

080066f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
 80066fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	f023 0201 	bic.w	r2, r3, #1
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4a28      	ldr	r2, [pc, #160]	; (80067bc <TIM_TI1_SetConfig+0xcc>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d01b      	beq.n	8006756 <TIM_TI1_SetConfig+0x66>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006724:	d017      	beq.n	8006756 <TIM_TI1_SetConfig+0x66>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	4a25      	ldr	r2, [pc, #148]	; (80067c0 <TIM_TI1_SetConfig+0xd0>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d013      	beq.n	8006756 <TIM_TI1_SetConfig+0x66>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4a24      	ldr	r2, [pc, #144]	; (80067c4 <TIM_TI1_SetConfig+0xd4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00f      	beq.n	8006756 <TIM_TI1_SetConfig+0x66>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4a23      	ldr	r2, [pc, #140]	; (80067c8 <TIM_TI1_SetConfig+0xd8>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d00b      	beq.n	8006756 <TIM_TI1_SetConfig+0x66>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4a22      	ldr	r2, [pc, #136]	; (80067cc <TIM_TI1_SetConfig+0xdc>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d007      	beq.n	8006756 <TIM_TI1_SetConfig+0x66>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4a21      	ldr	r2, [pc, #132]	; (80067d0 <TIM_TI1_SetConfig+0xe0>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d003      	beq.n	8006756 <TIM_TI1_SetConfig+0x66>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4a20      	ldr	r2, [pc, #128]	; (80067d4 <TIM_TI1_SetConfig+0xe4>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d101      	bne.n	800675a <TIM_TI1_SetConfig+0x6a>
 8006756:	2301      	movs	r3, #1
 8006758:	e000      	b.n	800675c <TIM_TI1_SetConfig+0x6c>
 800675a:	2300      	movs	r3, #0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d008      	beq.n	8006772 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f023 0303 	bic.w	r3, r3, #3
 8006766:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	e003      	b.n	800677a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f043 0301 	orr.w	r3, r3, #1
 8006778:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006780:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	011b      	lsls	r3, r3, #4
 8006786:	b2db      	uxtb	r3, r3
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f023 030a 	bic.w	r3, r3, #10
 8006794:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f003 030a 	and.w	r3, r3, #10
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4313      	orrs	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	621a      	str	r2, [r3, #32]
}
 80067ae:	bf00      	nop
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	40010000 	.word	0x40010000
 80067c0:	40000400 	.word	0x40000400
 80067c4:	40000800 	.word	0x40000800
 80067c8:	40000c00 	.word	0x40000c00
 80067cc:	40010400 	.word	0x40010400
 80067d0:	40014000 	.word	0x40014000
 80067d4:	40001800 	.word	0x40001800

080067d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	f023 0201 	bic.w	r2, r3, #1
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	4313      	orrs	r3, r2
 800680c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f023 030a 	bic.w	r3, r3, #10
 8006814:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	4313      	orrs	r3, r2
 800681c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	621a      	str	r2, [r3, #32]
}
 800682a:	bf00      	nop
 800682c:	371c      	adds	r7, #28
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006836:	b480      	push	{r7}
 8006838:	b087      	sub	sp, #28
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	607a      	str	r2, [r7, #4]
 8006842:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	f023 0210 	bic.w	r2, r3, #16
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006862:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	021b      	lsls	r3, r3, #8
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	4313      	orrs	r3, r2
 800686c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	031b      	lsls	r3, r3, #12
 800687a:	b29b      	uxth	r3, r3
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006888:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	011b      	lsls	r3, r3, #4
 800688e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	621a      	str	r2, [r3, #32]
}
 80068a4:	bf00      	nop
 80068a6:	371c      	adds	r7, #28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b087      	sub	sp, #28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6a1b      	ldr	r3, [r3, #32]
 80068c0:	f023 0210 	bic.w	r2, r3, #16
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	031b      	lsls	r3, r3, #12
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	011b      	lsls	r3, r3, #4
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	621a      	str	r2, [r3, #32]
}
 8006904:	bf00      	nop
 8006906:	371c      	adds	r7, #28
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
 800691c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f023 0303 	bic.w	r3, r3, #3
 800693c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4313      	orrs	r3, r2
 8006944:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800694c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	011b      	lsls	r3, r3, #4
 8006952:	b2db      	uxtb	r3, r3
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	4313      	orrs	r3, r2
 8006958:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006960:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	021b      	lsls	r3, r3, #8
 8006966:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	621a      	str	r2, [r3, #32]
}
 800697c:	bf00      	nop
 800697e:	371c      	adds	r7, #28
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
 8006994:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	021b      	lsls	r3, r3, #8
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	4313      	orrs	r3, r2
 80069be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	031b      	lsls	r3, r3, #12
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80069da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	031b      	lsls	r3, r3, #12
 80069e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	621a      	str	r2, [r3, #32]
}
 80069f6:	bf00      	nop
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b085      	sub	sp, #20
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	f043 0307 	orr.w	r3, r3, #7
 8006a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	609a      	str	r2, [r3, #8]
}
 8006a2c:	bf00      	nop
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	021a      	lsls	r2, r3, #8
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	431a      	orrs	r2, r3
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	609a      	str	r2, [r3, #8]
}
 8006a6c:	bf00      	nop
 8006a6e:	371c      	adds	r7, #28
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f003 031f 	and.w	r3, r3, #31
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a1a      	ldr	r2, [r3, #32]
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	43db      	mvns	r3, r3
 8006a9a:	401a      	ands	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6a1a      	ldr	r2, [r3, #32]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f003 031f 	and.w	r3, r3, #31
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	621a      	str	r2, [r3, #32]
}
 8006ab6:	bf00      	nop
 8006ab8:	371c      	adds	r7, #28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
	...

08006ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d101      	bne.n	8006adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	e06d      	b.n	8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a30      	ldr	r2, [pc, #192]	; (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d004      	beq.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a2f      	ldr	r2, [pc, #188]	; (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d108      	bne.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a20      	ldr	r2, [pc, #128]	; (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d022      	beq.n	8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4e:	d01d      	beq.n	8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a1d      	ldr	r2, [pc, #116]	; (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d018      	beq.n	8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a1c      	ldr	r2, [pc, #112]	; (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d013      	beq.n	8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a1a      	ldr	r2, [pc, #104]	; (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d00e      	beq.n	8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a15      	ldr	r2, [pc, #84]	; (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d009      	beq.n	8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a16      	ldr	r2, [pc, #88]	; (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d004      	beq.n	8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a15      	ldr	r2, [pc, #84]	; (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d10c      	bne.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	40010000 	.word	0x40010000
 8006bc8:	40010400 	.word	0x40010400
 8006bcc:	40000400 	.word	0x40000400
 8006bd0:	40000800 	.word	0x40000800
 8006bd4:	40000c00 	.word	0x40000c00
 8006bd8:	40014000 	.word	0x40014000
 8006bdc:	40001800 	.word	0x40001800

08006be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e040      	b.n	8006cb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d106      	bne.n	8006c44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7fb febe 	bl	80029c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2224      	movs	r2, #36	; 0x24
 8006c48:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 0201 	bic.w	r2, r2, #1
 8006c58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fbe6 	bl	800742c <UART_SetConfig>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d101      	bne.n	8006c6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e022      	b.n	8006cb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d002      	beq.n	8006c78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fe3e 	bl	80078f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 0201 	orr.w	r2, r2, #1
 8006ca6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fec5 	bl	8007a38 <UART_CheckIdleState>
 8006cae:	4603      	mov	r3, r0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b08a      	sub	sp, #40	; 0x28
 8006cbc:	af02      	add	r7, sp, #8
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	603b      	str	r3, [r7, #0]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ccc:	2b20      	cmp	r3, #32
 8006cce:	d171      	bne.n	8006db4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <HAL_UART_Transmit+0x24>
 8006cd6:	88fb      	ldrh	r3, [r7, #6]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e06a      	b.n	8006db6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2221      	movs	r2, #33	; 0x21
 8006cec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cee:	f7fc f915 	bl	8002f1c <HAL_GetTick>
 8006cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	88fa      	ldrh	r2, [r7, #6]
 8006cf8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	88fa      	ldrh	r2, [r7, #6]
 8006d00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d0c:	d108      	bne.n	8006d20 <HAL_UART_Transmit+0x68>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d104      	bne.n	8006d20 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	61bb      	str	r3, [r7, #24]
 8006d1e:	e003      	b.n	8006d28 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d24:	2300      	movs	r3, #0
 8006d26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d28:	e02c      	b.n	8006d84 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2200      	movs	r2, #0
 8006d32:	2180      	movs	r1, #128	; 0x80
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 feb6 	bl	8007aa6 <UART_WaitOnFlagUntilTimeout>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e038      	b.n	8006db6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10b      	bne.n	8006d62 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	3302      	adds	r3, #2
 8006d5e:	61bb      	str	r3, [r7, #24]
 8006d60:	e007      	b.n	8006d72 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	781a      	ldrb	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1cc      	bne.n	8006d2a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	2200      	movs	r2, #0
 8006d98:	2140      	movs	r1, #64	; 0x40
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f000 fe83 	bl	8007aa6 <UART_WaitOnFlagUntilTimeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e005      	b.n	8006db6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2220      	movs	r2, #32
 8006dae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	e000      	b.n	8006db6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006db4:	2302      	movs	r3, #2
  }
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3720      	adds	r7, #32
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b08a      	sub	sp, #40	; 0x28
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dd2:	2b20      	cmp	r3, #32
 8006dd4:	d132      	bne.n	8006e3c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <HAL_UART_Receive_IT+0x24>
 8006ddc:	88fb      	ldrh	r3, [r7, #6]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e02b      	b.n	8006e3e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d018      	beq.n	8006e2c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	e853 3f00 	ldrex	r3, [r3]
 8006e06:	613b      	str	r3, [r7, #16]
   return(result);
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	461a      	mov	r2, r3
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	623b      	str	r3, [r7, #32]
 8006e1a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1c:	69f9      	ldr	r1, [r7, #28]
 8006e1e:	6a3a      	ldr	r2, [r7, #32]
 8006e20:	e841 2300 	strex	r3, r2, [r1]
 8006e24:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1e6      	bne.n	8006dfa <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e2c:	88fb      	ldrh	r3, [r7, #6]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	68b9      	ldr	r1, [r7, #8]
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f000 fefe 	bl	8007c34 <UART_Start_Receive_IT>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	e000      	b.n	8006e3e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006e3c:	2302      	movs	r3, #2
  }
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3728      	adds	r7, #40	; 0x28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b0ba      	sub	sp, #232	; 0xe8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006e72:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e76:	4013      	ands	r3, r2
 8006e78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006e7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d115      	bne.n	8006eb0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e88:	f003 0320 	and.w	r3, r3, #32
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00f      	beq.n	8006eb0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e94:	f003 0320 	and.w	r3, r3, #32
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d009      	beq.n	8006eb0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8297 	beq.w	80073d4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	4798      	blx	r3
      }
      return;
 8006eae:	e291      	b.n	80073d4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006eb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 8117 	beq.w	80070e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d106      	bne.n	8006ed4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006ec6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006eca:	4b85      	ldr	r3, [pc, #532]	; (80070e0 <HAL_UART_IRQHandler+0x298>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 810a 	beq.w	80070e8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d011      	beq.n	8006f04 <HAL_UART_IRQHandler+0xbc>
 8006ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00b      	beq.n	8006f04 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006efa:	f043 0201 	orr.w	r2, r3, #1
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d011      	beq.n	8006f34 <HAL_UART_IRQHandler+0xec>
 8006f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00b      	beq.n	8006f34 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2202      	movs	r2, #2
 8006f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f2a:	f043 0204 	orr.w	r2, r3, #4
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d011      	beq.n	8006f64 <HAL_UART_IRQHandler+0x11c>
 8006f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00b      	beq.n	8006f64 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2204      	movs	r2, #4
 8006f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f5a:	f043 0202 	orr.w	r2, r3, #2
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f68:	f003 0308 	and.w	r3, r3, #8
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d017      	beq.n	8006fa0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f74:	f003 0320 	and.w	r3, r3, #32
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d105      	bne.n	8006f88 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f80:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00b      	beq.n	8006fa0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2208      	movs	r2, #8
 8006f8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f96:	f043 0208 	orr.w	r2, r3, #8
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d012      	beq.n	8006fd2 <HAL_UART_IRQHandler+0x18a>
 8006fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00c      	beq.n	8006fd2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fc8:	f043 0220 	orr.w	r2, r3, #32
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 81fd 	beq.w	80073d8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe2:	f003 0320 	and.w	r3, r3, #32
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00d      	beq.n	8007006 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fee:	f003 0320 	and.w	r3, r3, #32
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d007      	beq.n	8007006 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800700c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701a:	2b40      	cmp	r3, #64	; 0x40
 800701c:	d005      	beq.n	800702a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800701e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007022:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007026:	2b00      	cmp	r3, #0
 8007028:	d04f      	beq.n	80070ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fec8 	bl	8007dc0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703a:	2b40      	cmp	r3, #64	; 0x40
 800703c:	d141      	bne.n	80070c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3308      	adds	r3, #8
 8007044:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007048:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800704c:	e853 3f00 	ldrex	r3, [r3]
 8007050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007054:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800705c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3308      	adds	r3, #8
 8007066:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800706a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800706e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007076:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800707a:	e841 2300 	strex	r3, r2, [r1]
 800707e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007082:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1d9      	bne.n	800703e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800708e:	2b00      	cmp	r3, #0
 8007090:	d013      	beq.n	80070ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007096:	4a13      	ldr	r2, [pc, #76]	; (80070e4 <HAL_UART_IRQHandler+0x29c>)
 8007098:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fc f8ed 	bl	800327e <HAL_DMA_Abort_IT>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d017      	beq.n	80070da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80070b4:	4610      	mov	r0, r2
 80070b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b8:	e00f      	b.n	80070da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f9a0 	bl	8007400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c0:	e00b      	b.n	80070da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f99c 	bl	8007400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c8:	e007      	b.n	80070da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f998 	bl	8007400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80070d8:	e17e      	b.n	80073d8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070da:	bf00      	nop
    return;
 80070dc:	e17c      	b.n	80073d8 <HAL_UART_IRQHandler+0x590>
 80070de:	bf00      	nop
 80070e0:	04000120 	.word	0x04000120
 80070e4:	08007e89 	.word	0x08007e89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	f040 814c 	bne.w	800738a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80070f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f6:	f003 0310 	and.w	r3, r3, #16
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 8145 	beq.w	800738a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007104:	f003 0310 	and.w	r3, r3, #16
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 813e 	beq.w	800738a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2210      	movs	r2, #16
 8007114:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007120:	2b40      	cmp	r3, #64	; 0x40
 8007122:	f040 80b6 	bne.w	8007292 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007132:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007136:	2b00      	cmp	r3, #0
 8007138:	f000 8150 	beq.w	80073dc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007142:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007146:	429a      	cmp	r2, r3
 8007148:	f080 8148 	bcs.w	80073dc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007152:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007160:	f000 8086 	beq.w	8007270 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007178:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800717c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007180:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800718e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007192:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007196:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800719a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800719e:	e841 2300 	strex	r3, r2, [r1]
 80071a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80071a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1da      	bne.n	8007164 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3308      	adds	r3, #8
 80071b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071b8:	e853 3f00 	ldrex	r3, [r3]
 80071bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80071be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071c0:	f023 0301 	bic.w	r3, r3, #1
 80071c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	3308      	adds	r3, #8
 80071ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80071d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80071d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80071da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80071de:	e841 2300 	strex	r3, r2, [r1]
 80071e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80071e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1e1      	bne.n	80071ae <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3308      	adds	r3, #8
 80071f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3308      	adds	r3, #8
 800720a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800720e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007210:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007214:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800721c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e3      	bne.n	80071ea <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2220      	movs	r2, #32
 8007226:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007238:	e853 3f00 	ldrex	r3, [r3]
 800723c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800723e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007240:	f023 0310 	bic.w	r3, r3, #16
 8007244:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	461a      	mov	r2, r3
 800724e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007252:	65bb      	str	r3, [r7, #88]	; 0x58
 8007254:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007258:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e4      	bne.n	8007230 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800726a:	4618      	mov	r0, r3
 800726c:	f7fb ff97 	bl	800319e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007282:	b29b      	uxth	r3, r3
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	b29b      	uxth	r3, r3
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f8c2 	bl	8007414 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007290:	e0a4      	b.n	80073dc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800729e:	b29b      	uxth	r3, r3
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 8096 	beq.w	80073e0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80072b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 8091 	beq.w	80073e0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c6:	e853 3f00 	ldrex	r3, [r3]
 80072ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072e0:	647b      	str	r3, [r7, #68]	; 0x44
 80072e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072e8:	e841 2300 	strex	r3, r2, [r1]
 80072ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1e4      	bne.n	80072be <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3308      	adds	r3, #8
 80072fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	e853 3f00 	ldrex	r3, [r3]
 8007302:	623b      	str	r3, [r7, #32]
   return(result);
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	f023 0301 	bic.w	r3, r3, #1
 800730a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3308      	adds	r3, #8
 8007314:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007318:	633a      	str	r2, [r7, #48]	; 0x30
 800731a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800731e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007320:	e841 2300 	strex	r3, r2, [r1]
 8007324:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e3      	bne.n	80072f4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2220      	movs	r2, #32
 8007330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	e853 3f00 	ldrex	r3, [r3]
 800734c:	60fb      	str	r3, [r7, #12]
   return(result);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f023 0310 	bic.w	r3, r3, #16
 8007354:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007362:	61fb      	str	r3, [r7, #28]
 8007364:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007366:	69b9      	ldr	r1, [r7, #24]
 8007368:	69fa      	ldr	r2, [r7, #28]
 800736a:	e841 2300 	strex	r3, r2, [r1]
 800736e:	617b      	str	r3, [r7, #20]
   return(result);
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1e4      	bne.n	8007340 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2202      	movs	r2, #2
 800737a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800737c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007380:	4619      	mov	r1, r3
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f846 	bl	8007414 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007388:	e02a      	b.n	80073e0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800738a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800738e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00e      	beq.n	80073b4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800739a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d008      	beq.n	80073b4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d01c      	beq.n	80073e4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	4798      	blx	r3
    }
    return;
 80073b2:	e017      	b.n	80073e4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d012      	beq.n	80073e6 <HAL_UART_IRQHandler+0x59e>
 80073c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00c      	beq.n	80073e6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fd71 	bl	8007eb4 <UART_EndTransmit_IT>
    return;
 80073d2:	e008      	b.n	80073e6 <HAL_UART_IRQHandler+0x59e>
      return;
 80073d4:	bf00      	nop
 80073d6:	e006      	b.n	80073e6 <HAL_UART_IRQHandler+0x59e>
    return;
 80073d8:	bf00      	nop
 80073da:	e004      	b.n	80073e6 <HAL_UART_IRQHandler+0x59e>
      return;
 80073dc:	bf00      	nop
 80073de:	e002      	b.n	80073e6 <HAL_UART_IRQHandler+0x59e>
      return;
 80073e0:	bf00      	nop
 80073e2:	e000      	b.n	80073e6 <HAL_UART_IRQHandler+0x59e>
    return;
 80073e4:	bf00      	nop
  }

}
 80073e6:	37e8      	adds	r7, #232	; 0xe8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007434:	2300      	movs	r3, #0
 8007436:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	431a      	orrs	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	431a      	orrs	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	69db      	ldr	r3, [r3, #28]
 800744c:	4313      	orrs	r3, r2
 800744e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	4ba6      	ldr	r3, [pc, #664]	; (80076f0 <UART_SetConfig+0x2c4>)
 8007458:	4013      	ands	r3, r2
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	6812      	ldr	r2, [r2, #0]
 800745e:	6979      	ldr	r1, [r7, #20]
 8007460:	430b      	orrs	r3, r1
 8007462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a1b      	ldr	r3, [r3, #32]
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	4313      	orrs	r3, r2
 8007488:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	430a      	orrs	r2, r1
 800749c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a94      	ldr	r2, [pc, #592]	; (80076f4 <UART_SetConfig+0x2c8>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d120      	bne.n	80074ea <UART_SetConfig+0xbe>
 80074a8:	4b93      	ldr	r3, [pc, #588]	; (80076f8 <UART_SetConfig+0x2cc>)
 80074aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	d816      	bhi.n	80074e4 <UART_SetConfig+0xb8>
 80074b6:	a201      	add	r2, pc, #4	; (adr r2, 80074bc <UART_SetConfig+0x90>)
 80074b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074bc:	080074cd 	.word	0x080074cd
 80074c0:	080074d9 	.word	0x080074d9
 80074c4:	080074d3 	.word	0x080074d3
 80074c8:	080074df 	.word	0x080074df
 80074cc:	2301      	movs	r3, #1
 80074ce:	77fb      	strb	r3, [r7, #31]
 80074d0:	e150      	b.n	8007774 <UART_SetConfig+0x348>
 80074d2:	2302      	movs	r3, #2
 80074d4:	77fb      	strb	r3, [r7, #31]
 80074d6:	e14d      	b.n	8007774 <UART_SetConfig+0x348>
 80074d8:	2304      	movs	r3, #4
 80074da:	77fb      	strb	r3, [r7, #31]
 80074dc:	e14a      	b.n	8007774 <UART_SetConfig+0x348>
 80074de:	2308      	movs	r3, #8
 80074e0:	77fb      	strb	r3, [r7, #31]
 80074e2:	e147      	b.n	8007774 <UART_SetConfig+0x348>
 80074e4:	2310      	movs	r3, #16
 80074e6:	77fb      	strb	r3, [r7, #31]
 80074e8:	e144      	b.n	8007774 <UART_SetConfig+0x348>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a83      	ldr	r2, [pc, #524]	; (80076fc <UART_SetConfig+0x2d0>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d132      	bne.n	800755a <UART_SetConfig+0x12e>
 80074f4:	4b80      	ldr	r3, [pc, #512]	; (80076f8 <UART_SetConfig+0x2cc>)
 80074f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074fa:	f003 030c 	and.w	r3, r3, #12
 80074fe:	2b0c      	cmp	r3, #12
 8007500:	d828      	bhi.n	8007554 <UART_SetConfig+0x128>
 8007502:	a201      	add	r2, pc, #4	; (adr r2, 8007508 <UART_SetConfig+0xdc>)
 8007504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007508:	0800753d 	.word	0x0800753d
 800750c:	08007555 	.word	0x08007555
 8007510:	08007555 	.word	0x08007555
 8007514:	08007555 	.word	0x08007555
 8007518:	08007549 	.word	0x08007549
 800751c:	08007555 	.word	0x08007555
 8007520:	08007555 	.word	0x08007555
 8007524:	08007555 	.word	0x08007555
 8007528:	08007543 	.word	0x08007543
 800752c:	08007555 	.word	0x08007555
 8007530:	08007555 	.word	0x08007555
 8007534:	08007555 	.word	0x08007555
 8007538:	0800754f 	.word	0x0800754f
 800753c:	2300      	movs	r3, #0
 800753e:	77fb      	strb	r3, [r7, #31]
 8007540:	e118      	b.n	8007774 <UART_SetConfig+0x348>
 8007542:	2302      	movs	r3, #2
 8007544:	77fb      	strb	r3, [r7, #31]
 8007546:	e115      	b.n	8007774 <UART_SetConfig+0x348>
 8007548:	2304      	movs	r3, #4
 800754a:	77fb      	strb	r3, [r7, #31]
 800754c:	e112      	b.n	8007774 <UART_SetConfig+0x348>
 800754e:	2308      	movs	r3, #8
 8007550:	77fb      	strb	r3, [r7, #31]
 8007552:	e10f      	b.n	8007774 <UART_SetConfig+0x348>
 8007554:	2310      	movs	r3, #16
 8007556:	77fb      	strb	r3, [r7, #31]
 8007558:	e10c      	b.n	8007774 <UART_SetConfig+0x348>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a68      	ldr	r2, [pc, #416]	; (8007700 <UART_SetConfig+0x2d4>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d120      	bne.n	80075a6 <UART_SetConfig+0x17a>
 8007564:	4b64      	ldr	r3, [pc, #400]	; (80076f8 <UART_SetConfig+0x2cc>)
 8007566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800756a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800756e:	2b30      	cmp	r3, #48	; 0x30
 8007570:	d013      	beq.n	800759a <UART_SetConfig+0x16e>
 8007572:	2b30      	cmp	r3, #48	; 0x30
 8007574:	d814      	bhi.n	80075a0 <UART_SetConfig+0x174>
 8007576:	2b20      	cmp	r3, #32
 8007578:	d009      	beq.n	800758e <UART_SetConfig+0x162>
 800757a:	2b20      	cmp	r3, #32
 800757c:	d810      	bhi.n	80075a0 <UART_SetConfig+0x174>
 800757e:	2b00      	cmp	r3, #0
 8007580:	d002      	beq.n	8007588 <UART_SetConfig+0x15c>
 8007582:	2b10      	cmp	r3, #16
 8007584:	d006      	beq.n	8007594 <UART_SetConfig+0x168>
 8007586:	e00b      	b.n	80075a0 <UART_SetConfig+0x174>
 8007588:	2300      	movs	r3, #0
 800758a:	77fb      	strb	r3, [r7, #31]
 800758c:	e0f2      	b.n	8007774 <UART_SetConfig+0x348>
 800758e:	2302      	movs	r3, #2
 8007590:	77fb      	strb	r3, [r7, #31]
 8007592:	e0ef      	b.n	8007774 <UART_SetConfig+0x348>
 8007594:	2304      	movs	r3, #4
 8007596:	77fb      	strb	r3, [r7, #31]
 8007598:	e0ec      	b.n	8007774 <UART_SetConfig+0x348>
 800759a:	2308      	movs	r3, #8
 800759c:	77fb      	strb	r3, [r7, #31]
 800759e:	e0e9      	b.n	8007774 <UART_SetConfig+0x348>
 80075a0:	2310      	movs	r3, #16
 80075a2:	77fb      	strb	r3, [r7, #31]
 80075a4:	e0e6      	b.n	8007774 <UART_SetConfig+0x348>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a56      	ldr	r2, [pc, #344]	; (8007704 <UART_SetConfig+0x2d8>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d120      	bne.n	80075f2 <UART_SetConfig+0x1c6>
 80075b0:	4b51      	ldr	r3, [pc, #324]	; (80076f8 <UART_SetConfig+0x2cc>)
 80075b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80075ba:	2bc0      	cmp	r3, #192	; 0xc0
 80075bc:	d013      	beq.n	80075e6 <UART_SetConfig+0x1ba>
 80075be:	2bc0      	cmp	r3, #192	; 0xc0
 80075c0:	d814      	bhi.n	80075ec <UART_SetConfig+0x1c0>
 80075c2:	2b80      	cmp	r3, #128	; 0x80
 80075c4:	d009      	beq.n	80075da <UART_SetConfig+0x1ae>
 80075c6:	2b80      	cmp	r3, #128	; 0x80
 80075c8:	d810      	bhi.n	80075ec <UART_SetConfig+0x1c0>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d002      	beq.n	80075d4 <UART_SetConfig+0x1a8>
 80075ce:	2b40      	cmp	r3, #64	; 0x40
 80075d0:	d006      	beq.n	80075e0 <UART_SetConfig+0x1b4>
 80075d2:	e00b      	b.n	80075ec <UART_SetConfig+0x1c0>
 80075d4:	2300      	movs	r3, #0
 80075d6:	77fb      	strb	r3, [r7, #31]
 80075d8:	e0cc      	b.n	8007774 <UART_SetConfig+0x348>
 80075da:	2302      	movs	r3, #2
 80075dc:	77fb      	strb	r3, [r7, #31]
 80075de:	e0c9      	b.n	8007774 <UART_SetConfig+0x348>
 80075e0:	2304      	movs	r3, #4
 80075e2:	77fb      	strb	r3, [r7, #31]
 80075e4:	e0c6      	b.n	8007774 <UART_SetConfig+0x348>
 80075e6:	2308      	movs	r3, #8
 80075e8:	77fb      	strb	r3, [r7, #31]
 80075ea:	e0c3      	b.n	8007774 <UART_SetConfig+0x348>
 80075ec:	2310      	movs	r3, #16
 80075ee:	77fb      	strb	r3, [r7, #31]
 80075f0:	e0c0      	b.n	8007774 <UART_SetConfig+0x348>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a44      	ldr	r2, [pc, #272]	; (8007708 <UART_SetConfig+0x2dc>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d125      	bne.n	8007648 <UART_SetConfig+0x21c>
 80075fc:	4b3e      	ldr	r3, [pc, #248]	; (80076f8 <UART_SetConfig+0x2cc>)
 80075fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800760a:	d017      	beq.n	800763c <UART_SetConfig+0x210>
 800760c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007610:	d817      	bhi.n	8007642 <UART_SetConfig+0x216>
 8007612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007616:	d00b      	beq.n	8007630 <UART_SetConfig+0x204>
 8007618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800761c:	d811      	bhi.n	8007642 <UART_SetConfig+0x216>
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <UART_SetConfig+0x1fe>
 8007622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007626:	d006      	beq.n	8007636 <UART_SetConfig+0x20a>
 8007628:	e00b      	b.n	8007642 <UART_SetConfig+0x216>
 800762a:	2300      	movs	r3, #0
 800762c:	77fb      	strb	r3, [r7, #31]
 800762e:	e0a1      	b.n	8007774 <UART_SetConfig+0x348>
 8007630:	2302      	movs	r3, #2
 8007632:	77fb      	strb	r3, [r7, #31]
 8007634:	e09e      	b.n	8007774 <UART_SetConfig+0x348>
 8007636:	2304      	movs	r3, #4
 8007638:	77fb      	strb	r3, [r7, #31]
 800763a:	e09b      	b.n	8007774 <UART_SetConfig+0x348>
 800763c:	2308      	movs	r3, #8
 800763e:	77fb      	strb	r3, [r7, #31]
 8007640:	e098      	b.n	8007774 <UART_SetConfig+0x348>
 8007642:	2310      	movs	r3, #16
 8007644:	77fb      	strb	r3, [r7, #31]
 8007646:	e095      	b.n	8007774 <UART_SetConfig+0x348>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a2f      	ldr	r2, [pc, #188]	; (800770c <UART_SetConfig+0x2e0>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d125      	bne.n	800769e <UART_SetConfig+0x272>
 8007652:	4b29      	ldr	r3, [pc, #164]	; (80076f8 <UART_SetConfig+0x2cc>)
 8007654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007658:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800765c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007660:	d017      	beq.n	8007692 <UART_SetConfig+0x266>
 8007662:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007666:	d817      	bhi.n	8007698 <UART_SetConfig+0x26c>
 8007668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800766c:	d00b      	beq.n	8007686 <UART_SetConfig+0x25a>
 800766e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007672:	d811      	bhi.n	8007698 <UART_SetConfig+0x26c>
 8007674:	2b00      	cmp	r3, #0
 8007676:	d003      	beq.n	8007680 <UART_SetConfig+0x254>
 8007678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800767c:	d006      	beq.n	800768c <UART_SetConfig+0x260>
 800767e:	e00b      	b.n	8007698 <UART_SetConfig+0x26c>
 8007680:	2301      	movs	r3, #1
 8007682:	77fb      	strb	r3, [r7, #31]
 8007684:	e076      	b.n	8007774 <UART_SetConfig+0x348>
 8007686:	2302      	movs	r3, #2
 8007688:	77fb      	strb	r3, [r7, #31]
 800768a:	e073      	b.n	8007774 <UART_SetConfig+0x348>
 800768c:	2304      	movs	r3, #4
 800768e:	77fb      	strb	r3, [r7, #31]
 8007690:	e070      	b.n	8007774 <UART_SetConfig+0x348>
 8007692:	2308      	movs	r3, #8
 8007694:	77fb      	strb	r3, [r7, #31]
 8007696:	e06d      	b.n	8007774 <UART_SetConfig+0x348>
 8007698:	2310      	movs	r3, #16
 800769a:	77fb      	strb	r3, [r7, #31]
 800769c:	e06a      	b.n	8007774 <UART_SetConfig+0x348>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a1b      	ldr	r2, [pc, #108]	; (8007710 <UART_SetConfig+0x2e4>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d138      	bne.n	800771a <UART_SetConfig+0x2ee>
 80076a8:	4b13      	ldr	r3, [pc, #76]	; (80076f8 <UART_SetConfig+0x2cc>)
 80076aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80076b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076b6:	d017      	beq.n	80076e8 <UART_SetConfig+0x2bc>
 80076b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076bc:	d82a      	bhi.n	8007714 <UART_SetConfig+0x2e8>
 80076be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c2:	d00b      	beq.n	80076dc <UART_SetConfig+0x2b0>
 80076c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c8:	d824      	bhi.n	8007714 <UART_SetConfig+0x2e8>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <UART_SetConfig+0x2aa>
 80076ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d2:	d006      	beq.n	80076e2 <UART_SetConfig+0x2b6>
 80076d4:	e01e      	b.n	8007714 <UART_SetConfig+0x2e8>
 80076d6:	2300      	movs	r3, #0
 80076d8:	77fb      	strb	r3, [r7, #31]
 80076da:	e04b      	b.n	8007774 <UART_SetConfig+0x348>
 80076dc:	2302      	movs	r3, #2
 80076de:	77fb      	strb	r3, [r7, #31]
 80076e0:	e048      	b.n	8007774 <UART_SetConfig+0x348>
 80076e2:	2304      	movs	r3, #4
 80076e4:	77fb      	strb	r3, [r7, #31]
 80076e6:	e045      	b.n	8007774 <UART_SetConfig+0x348>
 80076e8:	2308      	movs	r3, #8
 80076ea:	77fb      	strb	r3, [r7, #31]
 80076ec:	e042      	b.n	8007774 <UART_SetConfig+0x348>
 80076ee:	bf00      	nop
 80076f0:	efff69f3 	.word	0xefff69f3
 80076f4:	40011000 	.word	0x40011000
 80076f8:	40023800 	.word	0x40023800
 80076fc:	40004400 	.word	0x40004400
 8007700:	40004800 	.word	0x40004800
 8007704:	40004c00 	.word	0x40004c00
 8007708:	40005000 	.word	0x40005000
 800770c:	40011400 	.word	0x40011400
 8007710:	40007800 	.word	0x40007800
 8007714:	2310      	movs	r3, #16
 8007716:	77fb      	strb	r3, [r7, #31]
 8007718:	e02c      	b.n	8007774 <UART_SetConfig+0x348>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a72      	ldr	r2, [pc, #456]	; (80078e8 <UART_SetConfig+0x4bc>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d125      	bne.n	8007770 <UART_SetConfig+0x344>
 8007724:	4b71      	ldr	r3, [pc, #452]	; (80078ec <UART_SetConfig+0x4c0>)
 8007726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800772a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800772e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007732:	d017      	beq.n	8007764 <UART_SetConfig+0x338>
 8007734:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007738:	d817      	bhi.n	800776a <UART_SetConfig+0x33e>
 800773a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800773e:	d00b      	beq.n	8007758 <UART_SetConfig+0x32c>
 8007740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007744:	d811      	bhi.n	800776a <UART_SetConfig+0x33e>
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <UART_SetConfig+0x326>
 800774a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800774e:	d006      	beq.n	800775e <UART_SetConfig+0x332>
 8007750:	e00b      	b.n	800776a <UART_SetConfig+0x33e>
 8007752:	2300      	movs	r3, #0
 8007754:	77fb      	strb	r3, [r7, #31]
 8007756:	e00d      	b.n	8007774 <UART_SetConfig+0x348>
 8007758:	2302      	movs	r3, #2
 800775a:	77fb      	strb	r3, [r7, #31]
 800775c:	e00a      	b.n	8007774 <UART_SetConfig+0x348>
 800775e:	2304      	movs	r3, #4
 8007760:	77fb      	strb	r3, [r7, #31]
 8007762:	e007      	b.n	8007774 <UART_SetConfig+0x348>
 8007764:	2308      	movs	r3, #8
 8007766:	77fb      	strb	r3, [r7, #31]
 8007768:	e004      	b.n	8007774 <UART_SetConfig+0x348>
 800776a:	2310      	movs	r3, #16
 800776c:	77fb      	strb	r3, [r7, #31]
 800776e:	e001      	b.n	8007774 <UART_SetConfig+0x348>
 8007770:	2310      	movs	r3, #16
 8007772:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	69db      	ldr	r3, [r3, #28]
 8007778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800777c:	d15b      	bne.n	8007836 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800777e:	7ffb      	ldrb	r3, [r7, #31]
 8007780:	2b08      	cmp	r3, #8
 8007782:	d828      	bhi.n	80077d6 <UART_SetConfig+0x3aa>
 8007784:	a201      	add	r2, pc, #4	; (adr r2, 800778c <UART_SetConfig+0x360>)
 8007786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778a:	bf00      	nop
 800778c:	080077b1 	.word	0x080077b1
 8007790:	080077b9 	.word	0x080077b9
 8007794:	080077c1 	.word	0x080077c1
 8007798:	080077d7 	.word	0x080077d7
 800779c:	080077c7 	.word	0x080077c7
 80077a0:	080077d7 	.word	0x080077d7
 80077a4:	080077d7 	.word	0x080077d7
 80077a8:	080077d7 	.word	0x080077d7
 80077ac:	080077cf 	.word	0x080077cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077b0:	f7fd f8b8 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 80077b4:	61b8      	str	r0, [r7, #24]
        break;
 80077b6:	e013      	b.n	80077e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077b8:	f7fd f8c8 	bl	800494c <HAL_RCC_GetPCLK2Freq>
 80077bc:	61b8      	str	r0, [r7, #24]
        break;
 80077be:	e00f      	b.n	80077e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077c0:	4b4b      	ldr	r3, [pc, #300]	; (80078f0 <UART_SetConfig+0x4c4>)
 80077c2:	61bb      	str	r3, [r7, #24]
        break;
 80077c4:	e00c      	b.n	80077e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077c6:	f7fc ff9b 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 80077ca:	61b8      	str	r0, [r7, #24]
        break;
 80077cc:	e008      	b.n	80077e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077d2:	61bb      	str	r3, [r7, #24]
        break;
 80077d4:	e004      	b.n	80077e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	77bb      	strb	r3, [r7, #30]
        break;
 80077de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d074      	beq.n	80078d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	005a      	lsls	r2, r3, #1
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	085b      	lsrs	r3, r3, #1
 80077f0:	441a      	add	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	2b0f      	cmp	r3, #15
 8007800:	d916      	bls.n	8007830 <UART_SetConfig+0x404>
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007808:	d212      	bcs.n	8007830 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	b29b      	uxth	r3, r3
 800780e:	f023 030f 	bic.w	r3, r3, #15
 8007812:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	085b      	lsrs	r3, r3, #1
 8007818:	b29b      	uxth	r3, r3
 800781a:	f003 0307 	and.w	r3, r3, #7
 800781e:	b29a      	uxth	r2, r3
 8007820:	89fb      	ldrh	r3, [r7, #14]
 8007822:	4313      	orrs	r3, r2
 8007824:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	89fa      	ldrh	r2, [r7, #14]
 800782c:	60da      	str	r2, [r3, #12]
 800782e:	e04f      	b.n	80078d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	77bb      	strb	r3, [r7, #30]
 8007834:	e04c      	b.n	80078d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007836:	7ffb      	ldrb	r3, [r7, #31]
 8007838:	2b08      	cmp	r3, #8
 800783a:	d828      	bhi.n	800788e <UART_SetConfig+0x462>
 800783c:	a201      	add	r2, pc, #4	; (adr r2, 8007844 <UART_SetConfig+0x418>)
 800783e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007842:	bf00      	nop
 8007844:	08007869 	.word	0x08007869
 8007848:	08007871 	.word	0x08007871
 800784c:	08007879 	.word	0x08007879
 8007850:	0800788f 	.word	0x0800788f
 8007854:	0800787f 	.word	0x0800787f
 8007858:	0800788f 	.word	0x0800788f
 800785c:	0800788f 	.word	0x0800788f
 8007860:	0800788f 	.word	0x0800788f
 8007864:	08007887 	.word	0x08007887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007868:	f7fd f85c 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 800786c:	61b8      	str	r0, [r7, #24]
        break;
 800786e:	e013      	b.n	8007898 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007870:	f7fd f86c 	bl	800494c <HAL_RCC_GetPCLK2Freq>
 8007874:	61b8      	str	r0, [r7, #24]
        break;
 8007876:	e00f      	b.n	8007898 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007878:	4b1d      	ldr	r3, [pc, #116]	; (80078f0 <UART_SetConfig+0x4c4>)
 800787a:	61bb      	str	r3, [r7, #24]
        break;
 800787c:	e00c      	b.n	8007898 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800787e:	f7fc ff3f 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 8007882:	61b8      	str	r0, [r7, #24]
        break;
 8007884:	e008      	b.n	8007898 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800788a:	61bb      	str	r3, [r7, #24]
        break;
 800788c:	e004      	b.n	8007898 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	77bb      	strb	r3, [r7, #30]
        break;
 8007896:	bf00      	nop
    }

    if (pclk != 0U)
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d018      	beq.n	80078d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	085a      	lsrs	r2, r3, #1
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	441a      	add	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	2b0f      	cmp	r3, #15
 80078b6:	d909      	bls.n	80078cc <UART_SetConfig+0x4a0>
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078be:	d205      	bcs.n	80078cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	60da      	str	r2, [r3, #12]
 80078ca:	e001      	b.n	80078d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80078dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3720      	adds	r7, #32
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	40007c00 	.word	0x40007c00
 80078ec:	40023800 	.word	0x40023800
 80078f0:	00f42400 	.word	0x00f42400

080078f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00a      	beq.n	800791e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007922:	f003 0302 	and.w	r3, r3, #2
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00a      	beq.n	8007940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	430a      	orrs	r2, r1
 800793e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00a      	beq.n	8007962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	f003 0308 	and.w	r3, r3, #8
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	430a      	orrs	r2, r1
 8007982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00a      	beq.n	80079a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	430a      	orrs	r2, r1
 80079a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00a      	beq.n	80079c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d01a      	beq.n	8007a0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079f2:	d10a      	bne.n	8007a0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	605a      	str	r2, [r3, #4]
  }
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af02      	add	r7, sp, #8
 8007a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a48:	f7fb fa68 	bl	8002f1c <HAL_GetTick>
 8007a4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0308 	and.w	r3, r3, #8
 8007a58:	2b08      	cmp	r3, #8
 8007a5a:	d10e      	bne.n	8007a7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f81b 	bl	8007aa6 <UART_WaitOnFlagUntilTimeout>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e011      	b.n	8007a9e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2220      	movs	r2, #32
 8007a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b09c      	sub	sp, #112	; 0x70
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	60f8      	str	r0, [r7, #12]
 8007aae:	60b9      	str	r1, [r7, #8]
 8007ab0:	603b      	str	r3, [r7, #0]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ab6:	e0a7      	b.n	8007c08 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abe:	f000 80a3 	beq.w	8007c08 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ac2:	f7fb fa2b 	bl	8002f1c <HAL_GetTick>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d302      	bcc.n	8007ad8 <UART_WaitOnFlagUntilTimeout+0x32>
 8007ad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d13f      	bne.n	8007b58 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ae0:	e853 3f00 	ldrex	r3, [r3]
 8007ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007aec:	667b      	str	r3, [r7, #100]	; 0x64
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007af6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007af8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007afc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e6      	bne.n	8007ad8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3308      	adds	r3, #8
 8007b10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1c:	f023 0301 	bic.w	r3, r3, #1
 8007b20:	663b      	str	r3, [r7, #96]	; 0x60
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3308      	adds	r3, #8
 8007b28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e5      	bne.n	8007b0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2220      	movs	r2, #32
 8007b42:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2220      	movs	r2, #32
 8007b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e068      	b.n	8007c2a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0304 	and.w	r3, r3, #4
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d050      	beq.n	8007c08 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	69db      	ldr	r3, [r3, #28]
 8007b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b74:	d148      	bne.n	8007c08 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b7e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1e6      	bne.n	8007b80 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3308      	adds	r3, #8
 8007bb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	e853 3f00 	ldrex	r3, [r3]
 8007bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	f023 0301 	bic.w	r3, r3, #1
 8007bc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3308      	adds	r3, #8
 8007bd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bd2:	623a      	str	r2, [r7, #32]
 8007bd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	69f9      	ldr	r1, [r7, #28]
 8007bd8:	6a3a      	ldr	r2, [r7, #32]
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	61bb      	str	r3, [r7, #24]
   return(result);
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e5      	bne.n	8007bb2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2220      	movs	r2, #32
 8007bea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2220      	movs	r2, #32
 8007bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e010      	b.n	8007c2a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	69da      	ldr	r2, [r3, #28]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	4013      	ands	r3, r2
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	bf0c      	ite	eq
 8007c18:	2301      	moveq	r3, #1
 8007c1a:	2300      	movne	r3, #0
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	461a      	mov	r2, r3
 8007c20:	79fb      	ldrb	r3, [r7, #7]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	f43f af48 	beq.w	8007ab8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3770      	adds	r7, #112	; 0x70
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b097      	sub	sp, #92	; 0x5c
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	88fa      	ldrh	r2, [r7, #6]
 8007c4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	88fa      	ldrh	r2, [r7, #6]
 8007c54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c66:	d10e      	bne.n	8007c86 <UART_Start_Receive_IT+0x52>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d105      	bne.n	8007c7c <UART_Start_Receive_IT+0x48>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007c76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c7a:	e02d      	b.n	8007cd8 <UART_Start_Receive_IT+0xa4>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	22ff      	movs	r2, #255	; 0xff
 8007c80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c84:	e028      	b.n	8007cd8 <UART_Start_Receive_IT+0xa4>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10d      	bne.n	8007caa <UART_Start_Receive_IT+0x76>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d104      	bne.n	8007ca0 <UART_Start_Receive_IT+0x6c>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	22ff      	movs	r2, #255	; 0xff
 8007c9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c9e:	e01b      	b.n	8007cd8 <UART_Start_Receive_IT+0xa4>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	227f      	movs	r2, #127	; 0x7f
 8007ca4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ca8:	e016      	b.n	8007cd8 <UART_Start_Receive_IT+0xa4>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cb2:	d10d      	bne.n	8007cd0 <UART_Start_Receive_IT+0x9c>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d104      	bne.n	8007cc6 <UART_Start_Receive_IT+0x92>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	227f      	movs	r2, #127	; 0x7f
 8007cc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cc4:	e008      	b.n	8007cd8 <UART_Start_Receive_IT+0xa4>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	223f      	movs	r2, #63	; 0x3f
 8007cca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cce:	e003      	b.n	8007cd8 <UART_Start_Receive_IT+0xa4>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2222      	movs	r2, #34	; 0x22
 8007ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	3308      	adds	r3, #8
 8007cee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf2:	e853 3f00 	ldrex	r3, [r3]
 8007cf6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfa:	f043 0301 	orr.w	r3, r3, #1
 8007cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3308      	adds	r3, #8
 8007d06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d08:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d0a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d10:	e841 2300 	strex	r3, r2, [r1]
 8007d14:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1e5      	bne.n	8007ce8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d24:	d107      	bne.n	8007d36 <UART_Start_Receive_IT+0x102>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d103      	bne.n	8007d36 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	4a21      	ldr	r2, [pc, #132]	; (8007db8 <UART_Start_Receive_IT+0x184>)
 8007d32:	669a      	str	r2, [r3, #104]	; 0x68
 8007d34:	e002      	b.n	8007d3c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	4a20      	ldr	r2, [pc, #128]	; (8007dbc <UART_Start_Receive_IT+0x188>)
 8007d3a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d019      	beq.n	8007d78 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007d58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d62:	637b      	str	r3, [r7, #52]	; 0x34
 8007d64:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d6a:	e841 2300 	strex	r3, r2, [r1]
 8007d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1e6      	bne.n	8007d44 <UART_Start_Receive_IT+0x110>
 8007d76:	e018      	b.n	8007daa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	e853 3f00 	ldrex	r3, [r3]
 8007d84:	613b      	str	r3, [r7, #16]
   return(result);
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	f043 0320 	orr.w	r3, r3, #32
 8007d8c:	653b      	str	r3, [r7, #80]	; 0x50
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	461a      	mov	r2, r3
 8007d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d96:	623b      	str	r3, [r7, #32]
 8007d98:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9a:	69f9      	ldr	r1, [r7, #28]
 8007d9c:	6a3a      	ldr	r2, [r7, #32]
 8007d9e:	e841 2300 	strex	r3, r2, [r1]
 8007da2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1e6      	bne.n	8007d78 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	375c      	adds	r7, #92	; 0x5c
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	0800806f 	.word	0x0800806f
 8007dbc:	08007f09 	.word	0x08007f09

08007dc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b095      	sub	sp, #84	; 0x54
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd0:	e853 3f00 	ldrex	r3, [r3]
 8007dd4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	461a      	mov	r2, r3
 8007de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007de6:	643b      	str	r3, [r7, #64]	; 0x40
 8007de8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dee:	e841 2300 	strex	r3, r2, [r1]
 8007df2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1e6      	bne.n	8007dc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3308      	adds	r3, #8
 8007e00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	e853 3f00 	ldrex	r3, [r3]
 8007e08:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	f023 0301 	bic.w	r3, r3, #1
 8007e10:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3308      	adds	r3, #8
 8007e18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e22:	e841 2300 	strex	r3, r2, [r1]
 8007e26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1e5      	bne.n	8007dfa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d118      	bne.n	8007e68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	e853 3f00 	ldrex	r3, [r3]
 8007e42:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f023 0310 	bic.w	r3, r3, #16
 8007e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	461a      	mov	r2, r3
 8007e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e54:	61bb      	str	r3, [r7, #24]
 8007e56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e58:	6979      	ldr	r1, [r7, #20]
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	e841 2300 	strex	r3, r2, [r1]
 8007e60:	613b      	str	r3, [r7, #16]
   return(result);
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e6      	bne.n	8007e36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e7c:	bf00      	nop
 8007e7e:	3754      	adds	r7, #84	; 0x54
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f7ff faaa 	bl	8007400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eac:	bf00      	nop
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b088      	sub	sp, #32
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	e853 3f00 	ldrex	r3, [r3]
 8007ec8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ed0:	61fb      	str	r3, [r7, #28]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	61bb      	str	r3, [r7, #24]
 8007edc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ede:	6979      	ldr	r1, [r7, #20]
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	e841 2300 	strex	r3, r2, [r1]
 8007ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1e6      	bne.n	8007ebc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2220      	movs	r2, #32
 8007ef2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7ff fa76 	bl	80073ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f00:	bf00      	nop
 8007f02:	3720      	adds	r7, #32
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b096      	sub	sp, #88	; 0x58
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f16:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f20:	2b22      	cmp	r3, #34	; 0x22
 8007f22:	f040 8098 	bne.w	8008056 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f30:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007f34:	b2d9      	uxtb	r1, r3
 8007f36:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f40:	400a      	ands	r2, r1
 8007f42:	b2d2      	uxtb	r2, r2
 8007f44:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4a:	1c5a      	adds	r2, r3, #1
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d17b      	bne.n	8008066 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f76:	e853 3f00 	ldrex	r3, [r3]
 8007f7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f82:	653b      	str	r3, [r7, #80]	; 0x50
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	461a      	mov	r2, r3
 8007f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f8c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f8e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f94:	e841 2300 	strex	r3, r2, [r1]
 8007f98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1e6      	bne.n	8007f6e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	3308      	adds	r3, #8
 8007fa6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007faa:	e853 3f00 	ldrex	r3, [r3]
 8007fae:	623b      	str	r3, [r7, #32]
   return(result);
 8007fb0:	6a3b      	ldr	r3, [r7, #32]
 8007fb2:	f023 0301 	bic.w	r3, r3, #1
 8007fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fc0:	633a      	str	r2, [r7, #48]	; 0x30
 8007fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fc8:	e841 2300 	strex	r3, r2, [r1]
 8007fcc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1e5      	bne.n	8007fa0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d12e      	bne.n	800804e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	60fb      	str	r3, [r7, #12]
   return(result);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f023 0310 	bic.w	r3, r3, #16
 800800a:	64bb      	str	r3, [r7, #72]	; 0x48
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	461a      	mov	r2, r3
 8008012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008014:	61fb      	str	r3, [r7, #28]
 8008016:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	69b9      	ldr	r1, [r7, #24]
 800801a:	69fa      	ldr	r2, [r7, #28]
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	617b      	str	r3, [r7, #20]
   return(result);
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e6      	bne.n	8007ff6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	f003 0310 	and.w	r3, r3, #16
 8008032:	2b10      	cmp	r3, #16
 8008034:	d103      	bne.n	800803e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2210      	movs	r2, #16
 800803c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7ff f9e4 	bl	8007414 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800804c:	e00b      	b.n	8008066 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7f9 fd18 	bl	8001a84 <HAL_UART_RxCpltCallback>
}
 8008054:	e007      	b.n	8008066 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	699a      	ldr	r2, [r3, #24]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f042 0208 	orr.w	r2, r2, #8
 8008064:	619a      	str	r2, [r3, #24]
}
 8008066:	bf00      	nop
 8008068:	3758      	adds	r7, #88	; 0x58
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b096      	sub	sp, #88	; 0x58
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800807c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008086:	2b22      	cmp	r3, #34	; 0x22
 8008088:	f040 8098 	bne.w	80081bc <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008092:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800809a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800809c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80080a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80080a4:	4013      	ands	r3, r2
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080aa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b0:	1c9a      	adds	r2, r3, #2
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080bc:	b29b      	uxth	r3, r3
 80080be:	3b01      	subs	r3, #1
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d17b      	bne.n	80081cc <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080dc:	e853 3f00 	ldrex	r3, [r3]
 80080e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	461a      	mov	r2, r3
 80080f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080f2:	643b      	str	r3, [r7, #64]	; 0x40
 80080f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080fa:	e841 2300 	strex	r3, r2, [r1]
 80080fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1e6      	bne.n	80080d4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	3308      	adds	r3, #8
 800810c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	e853 3f00 	ldrex	r3, [r3]
 8008114:	61fb      	str	r3, [r7, #28]
   return(result);
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	f023 0301 	bic.w	r3, r3, #1
 800811c:	64bb      	str	r3, [r7, #72]	; 0x48
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3308      	adds	r3, #8
 8008124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008126:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008128:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800812c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800812e:	e841 2300 	strex	r3, r2, [r1]
 8008132:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1e5      	bne.n	8008106 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2220      	movs	r2, #32
 800813e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008152:	2b01      	cmp	r3, #1
 8008154:	d12e      	bne.n	80081b4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	e853 3f00 	ldrex	r3, [r3]
 8008168:	60bb      	str	r3, [r7, #8]
   return(result);
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	f023 0310 	bic.w	r3, r3, #16
 8008170:	647b      	str	r3, [r7, #68]	; 0x44
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800817a:	61bb      	str	r3, [r7, #24]
 800817c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817e:	6979      	ldr	r1, [r7, #20]
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	e841 2300 	strex	r3, r2, [r1]
 8008186:	613b      	str	r3, [r7, #16]
   return(result);
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1e6      	bne.n	800815c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	f003 0310 	and.w	r3, r3, #16
 8008198:	2b10      	cmp	r3, #16
 800819a:	d103      	bne.n	80081a4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2210      	movs	r2, #16
 80081a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7ff f931 	bl	8007414 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081b2:	e00b      	b.n	80081cc <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7f9 fc65 	bl	8001a84 <HAL_UART_RxCpltCallback>
}
 80081ba:	e007      	b.n	80081cc <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f042 0208 	orr.w	r2, r2, #8
 80081ca:	619a      	str	r2, [r3, #24]
}
 80081cc:	bf00      	nop
 80081ce:	3758      	adds	r7, #88	; 0x58
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081d4:	b084      	sub	sp, #16
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	f107 001c 	add.w	r0, r7, #28
 80081e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80081e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d120      	bne.n	800822e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	68da      	ldr	r2, [r3, #12]
 80081fc:	4b20      	ldr	r3, [pc, #128]	; (8008280 <USB_CoreInit+0xac>)
 80081fe:	4013      	ands	r3, r2
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008212:	2b01      	cmp	r3, #1
 8008214:	d105      	bne.n	8008222 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fa96 	bl	8008754 <USB_CoreReset>
 8008228:	4603      	mov	r3, r0
 800822a:	73fb      	strb	r3, [r7, #15]
 800822c:	e010      	b.n	8008250 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fa8a 	bl	8008754 <USB_CoreReset>
 8008240:	4603      	mov	r3, r0
 8008242:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008248:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008252:	2b01      	cmp	r3, #1
 8008254:	d10b      	bne.n	800826e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f043 0206 	orr.w	r2, r3, #6
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f043 0220 	orr.w	r2, r3, #32
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800826e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800827a:	b004      	add	sp, #16
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	ffbdffbf 	.word	0xffbdffbf

08008284 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	f023 0201 	bic.w	r2, r3, #1
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	460b      	mov	r3, r1
 80082b0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082c2:	78fb      	ldrb	r3, [r7, #3]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d115      	bne.n	80082f4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80082d4:	2001      	movs	r0, #1
 80082d6:	f7fa fe2d 	bl	8002f34 <HAL_Delay>
      ms++;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	3301      	adds	r3, #1
 80082de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fa29 	bl	8008738 <USB_GetMode>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d01e      	beq.n	800832a <USB_SetCurrentMode+0x84>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2b31      	cmp	r3, #49	; 0x31
 80082f0:	d9f0      	bls.n	80082d4 <USB_SetCurrentMode+0x2e>
 80082f2:	e01a      	b.n	800832a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80082f4:	78fb      	ldrb	r3, [r7, #3]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d115      	bne.n	8008326 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008306:	2001      	movs	r0, #1
 8008308:	f7fa fe14 	bl	8002f34 <HAL_Delay>
      ms++;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	3301      	adds	r3, #1
 8008310:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fa10 	bl	8008738 <USB_GetMode>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d005      	beq.n	800832a <USB_SetCurrentMode+0x84>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2b31      	cmp	r3, #49	; 0x31
 8008322:	d9f0      	bls.n	8008306 <USB_SetCurrentMode+0x60>
 8008324:	e001      	b.n	800832a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e005      	b.n	8008336 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b32      	cmp	r3, #50	; 0x32
 800832e:	d101      	bne.n	8008334 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e000      	b.n	8008336 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008340:	b084      	sub	sp, #16
 8008342:	b580      	push	{r7, lr}
 8008344:	b086      	sub	sp, #24
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800834e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800835a:	2300      	movs	r3, #0
 800835c:	613b      	str	r3, [r7, #16]
 800835e:	e009      	b.n	8008374 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	3340      	adds	r3, #64	; 0x40
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	2200      	movs	r2, #0
 800836c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	3301      	adds	r3, #1
 8008372:	613b      	str	r3, [r7, #16]
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	2b0e      	cmp	r3, #14
 8008378:	d9f2      	bls.n	8008360 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800837a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800837c:	2b00      	cmp	r3, #0
 800837e:	d11c      	bne.n	80083ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800838e:	f043 0302 	orr.w	r3, r3, #2
 8008392:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008398:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	e005      	b.n	80083c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083cc:	461a      	mov	r2, r3
 80083ce:	2300      	movs	r3, #0
 80083d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d8:	4619      	mov	r1, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e0:	461a      	mov	r2, r3
 80083e2:	680b      	ldr	r3, [r1, #0]
 80083e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d10c      	bne.n	8008406 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80083ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d104      	bne.n	80083fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80083f2:	2100      	movs	r1, #0
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f965 	bl	80086c4 <USB_SetDevSpeed>
 80083fa:	e008      	b.n	800840e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80083fc:	2101      	movs	r1, #1
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f960 	bl	80086c4 <USB_SetDevSpeed>
 8008404:	e003      	b.n	800840e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008406:	2103      	movs	r1, #3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f95b 	bl	80086c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800840e:	2110      	movs	r1, #16
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f8f3 	bl	80085fc <USB_FlushTxFifo>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d001      	beq.n	8008420 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f91f 	bl	8008664 <USB_FlushRxFifo>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d001      	beq.n	8008430 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008436:	461a      	mov	r2, r3
 8008438:	2300      	movs	r3, #0
 800843a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008442:	461a      	mov	r2, r3
 8008444:	2300      	movs	r3, #0
 8008446:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800844e:	461a      	mov	r2, r3
 8008450:	2300      	movs	r3, #0
 8008452:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008454:	2300      	movs	r3, #0
 8008456:	613b      	str	r3, [r7, #16]
 8008458:	e043      	b.n	80084e2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	4413      	add	r3, r2
 8008462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800846c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008470:	d118      	bne.n	80084a4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10a      	bne.n	800848e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	015a      	lsls	r2, r3, #5
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	4413      	add	r3, r2
 8008480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008484:	461a      	mov	r2, r3
 8008486:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800848a:	6013      	str	r3, [r2, #0]
 800848c:	e013      	b.n	80084b6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	015a      	lsls	r2, r3, #5
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	4413      	add	r3, r2
 8008496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800849a:	461a      	mov	r2, r3
 800849c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084a0:	6013      	str	r3, [r2, #0]
 80084a2:	e008      	b.n	80084b6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	015a      	lsls	r2, r3, #5
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4413      	add	r3, r2
 80084ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b0:	461a      	mov	r2, r3
 80084b2:	2300      	movs	r3, #0
 80084b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c2:	461a      	mov	r2, r3
 80084c4:	2300      	movs	r3, #0
 80084c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d4:	461a      	mov	r2, r3
 80084d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	3301      	adds	r3, #1
 80084e0:	613b      	str	r3, [r7, #16]
 80084e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d3b7      	bcc.n	800845a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084ea:	2300      	movs	r3, #0
 80084ec:	613b      	str	r3, [r7, #16]
 80084ee:	e043      	b.n	8008578 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008506:	d118      	bne.n	800853a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10a      	bne.n	8008524 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851a:	461a      	mov	r2, r3
 800851c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008520:	6013      	str	r3, [r2, #0]
 8008522:	e013      	b.n	800854c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008530:	461a      	mov	r2, r3
 8008532:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008536:	6013      	str	r3, [r2, #0]
 8008538:	e008      	b.n	800854c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	015a      	lsls	r2, r3, #5
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	4413      	add	r3, r2
 8008542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008546:	461a      	mov	r2, r3
 8008548:	2300      	movs	r3, #0
 800854a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	015a      	lsls	r2, r3, #5
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4413      	add	r3, r2
 8008554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008558:	461a      	mov	r2, r3
 800855a:	2300      	movs	r3, #0
 800855c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	015a      	lsls	r2, r3, #5
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	4413      	add	r3, r2
 8008566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856a:	461a      	mov	r2, r3
 800856c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008570:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	3301      	adds	r3, #1
 8008576:	613b      	str	r3, [r7, #16]
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	429a      	cmp	r2, r3
 800857e:	d3b7      	bcc.n	80084f0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800858e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008592:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80085a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d105      	bne.n	80085b4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	f043 0210 	orr.w	r2, r3, #16
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	699a      	ldr	r2, [r3, #24]
 80085b8:	4b0e      	ldr	r3, [pc, #56]	; (80085f4 <USB_DevInit+0x2b4>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d005      	beq.n	80085d2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	f043 0208 	orr.w	r2, r3, #8
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d105      	bne.n	80085e4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	699a      	ldr	r2, [r3, #24]
 80085dc:	4b06      	ldr	r3, [pc, #24]	; (80085f8 <USB_DevInit+0x2b8>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80085e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085f0:	b004      	add	sp, #16
 80085f2:	4770      	bx	lr
 80085f4:	803c3800 	.word	0x803c3800
 80085f8:	40000004 	.word	0x40000004

080085fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008606:	2300      	movs	r3, #0
 8008608:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3301      	adds	r3, #1
 800860e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4a13      	ldr	r2, [pc, #76]	; (8008660 <USB_FlushTxFifo+0x64>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d901      	bls.n	800861c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008618:	2303      	movs	r3, #3
 800861a:	e01b      	b.n	8008654 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	2b00      	cmp	r3, #0
 8008622:	daf2      	bge.n	800860a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008624:	2300      	movs	r3, #0
 8008626:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	019b      	lsls	r3, r3, #6
 800862c:	f043 0220 	orr.w	r2, r3, #32
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	3301      	adds	r3, #1
 8008638:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	4a08      	ldr	r2, [pc, #32]	; (8008660 <USB_FlushTxFifo+0x64>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d901      	bls.n	8008646 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e006      	b.n	8008654 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	f003 0320 	and.w	r3, r3, #32
 800864e:	2b20      	cmp	r3, #32
 8008650:	d0f0      	beq.n	8008634 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3714      	adds	r7, #20
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	00030d40 	.word	0x00030d40

08008664 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800866c:	2300      	movs	r3, #0
 800866e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	3301      	adds	r3, #1
 8008674:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	4a11      	ldr	r2, [pc, #68]	; (80086c0 <USB_FlushRxFifo+0x5c>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d901      	bls.n	8008682 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e018      	b.n	80086b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	daf2      	bge.n	8008670 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800868a:	2300      	movs	r3, #0
 800868c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2210      	movs	r2, #16
 8008692:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	3301      	adds	r3, #1
 8008698:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	4a08      	ldr	r2, [pc, #32]	; (80086c0 <USB_FlushRxFifo+0x5c>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d901      	bls.n	80086a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	e006      	b.n	80086b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	f003 0310 	and.w	r3, r3, #16
 80086ae:	2b10      	cmp	r3, #16
 80086b0:	d0f0      	beq.n	8008694 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	00030d40 	.word	0x00030d40

080086c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	78fb      	ldrb	r3, [r7, #3]
 80086de:	68f9      	ldr	r1, [r7, #12]
 80086e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086e4:	4313      	orrs	r3, r2
 80086e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b085      	sub	sp, #20
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008710:	f023 0303 	bic.w	r3, r3, #3
 8008714:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008724:	f043 0302 	orr.w	r3, r3, #2
 8008728:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	695b      	ldr	r3, [r3, #20]
 8008744:	f003 0301 	and.w	r3, r3, #1
}
 8008748:	4618      	mov	r0, r3
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800875c:	2300      	movs	r3, #0
 800875e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	3301      	adds	r3, #1
 8008764:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	4a13      	ldr	r2, [pc, #76]	; (80087b8 <USB_CoreReset+0x64>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d901      	bls.n	8008772 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800876e:	2303      	movs	r3, #3
 8008770:	e01b      	b.n	80087aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	2b00      	cmp	r3, #0
 8008778:	daf2      	bge.n	8008760 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800877a:	2300      	movs	r3, #0
 800877c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	f043 0201 	orr.w	r2, r3, #1
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	3301      	adds	r3, #1
 800878e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	4a09      	ldr	r2, [pc, #36]	; (80087b8 <USB_CoreReset+0x64>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d901      	bls.n	800879c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e006      	b.n	80087aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d0f0      	beq.n	800878a <USB_CoreReset+0x36>

  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	00030d40 	.word	0x00030d40

080087bc <__cvt>:
 80087bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087c0:	ec55 4b10 	vmov	r4, r5, d0
 80087c4:	2d00      	cmp	r5, #0
 80087c6:	460e      	mov	r6, r1
 80087c8:	4619      	mov	r1, r3
 80087ca:	462b      	mov	r3, r5
 80087cc:	bfbb      	ittet	lt
 80087ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80087d2:	461d      	movlt	r5, r3
 80087d4:	2300      	movge	r3, #0
 80087d6:	232d      	movlt	r3, #45	; 0x2d
 80087d8:	700b      	strb	r3, [r1, #0]
 80087da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80087e0:	4691      	mov	r9, r2
 80087e2:	f023 0820 	bic.w	r8, r3, #32
 80087e6:	bfbc      	itt	lt
 80087e8:	4622      	movlt	r2, r4
 80087ea:	4614      	movlt	r4, r2
 80087ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087f0:	d005      	beq.n	80087fe <__cvt+0x42>
 80087f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80087f6:	d100      	bne.n	80087fa <__cvt+0x3e>
 80087f8:	3601      	adds	r6, #1
 80087fa:	2102      	movs	r1, #2
 80087fc:	e000      	b.n	8008800 <__cvt+0x44>
 80087fe:	2103      	movs	r1, #3
 8008800:	ab03      	add	r3, sp, #12
 8008802:	9301      	str	r3, [sp, #4]
 8008804:	ab02      	add	r3, sp, #8
 8008806:	9300      	str	r3, [sp, #0]
 8008808:	ec45 4b10 	vmov	d0, r4, r5
 800880c:	4653      	mov	r3, sl
 800880e:	4632      	mov	r2, r6
 8008810:	f001 f8ba 	bl	8009988 <_dtoa_r>
 8008814:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008818:	4607      	mov	r7, r0
 800881a:	d102      	bne.n	8008822 <__cvt+0x66>
 800881c:	f019 0f01 	tst.w	r9, #1
 8008820:	d022      	beq.n	8008868 <__cvt+0xac>
 8008822:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008826:	eb07 0906 	add.w	r9, r7, r6
 800882a:	d110      	bne.n	800884e <__cvt+0x92>
 800882c:	783b      	ldrb	r3, [r7, #0]
 800882e:	2b30      	cmp	r3, #48	; 0x30
 8008830:	d10a      	bne.n	8008848 <__cvt+0x8c>
 8008832:	2200      	movs	r2, #0
 8008834:	2300      	movs	r3, #0
 8008836:	4620      	mov	r0, r4
 8008838:	4629      	mov	r1, r5
 800883a:	f7f8 f965 	bl	8000b08 <__aeabi_dcmpeq>
 800883e:	b918      	cbnz	r0, 8008848 <__cvt+0x8c>
 8008840:	f1c6 0601 	rsb	r6, r6, #1
 8008844:	f8ca 6000 	str.w	r6, [sl]
 8008848:	f8da 3000 	ldr.w	r3, [sl]
 800884c:	4499      	add	r9, r3
 800884e:	2200      	movs	r2, #0
 8008850:	2300      	movs	r3, #0
 8008852:	4620      	mov	r0, r4
 8008854:	4629      	mov	r1, r5
 8008856:	f7f8 f957 	bl	8000b08 <__aeabi_dcmpeq>
 800885a:	b108      	cbz	r0, 8008860 <__cvt+0xa4>
 800885c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008860:	2230      	movs	r2, #48	; 0x30
 8008862:	9b03      	ldr	r3, [sp, #12]
 8008864:	454b      	cmp	r3, r9
 8008866:	d307      	bcc.n	8008878 <__cvt+0xbc>
 8008868:	9b03      	ldr	r3, [sp, #12]
 800886a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800886c:	1bdb      	subs	r3, r3, r7
 800886e:	4638      	mov	r0, r7
 8008870:	6013      	str	r3, [r2, #0]
 8008872:	b004      	add	sp, #16
 8008874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008878:	1c59      	adds	r1, r3, #1
 800887a:	9103      	str	r1, [sp, #12]
 800887c:	701a      	strb	r2, [r3, #0]
 800887e:	e7f0      	b.n	8008862 <__cvt+0xa6>

08008880 <__exponent>:
 8008880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008882:	4603      	mov	r3, r0
 8008884:	2900      	cmp	r1, #0
 8008886:	bfb8      	it	lt
 8008888:	4249      	neglt	r1, r1
 800888a:	f803 2b02 	strb.w	r2, [r3], #2
 800888e:	bfb4      	ite	lt
 8008890:	222d      	movlt	r2, #45	; 0x2d
 8008892:	222b      	movge	r2, #43	; 0x2b
 8008894:	2909      	cmp	r1, #9
 8008896:	7042      	strb	r2, [r0, #1]
 8008898:	dd2a      	ble.n	80088f0 <__exponent+0x70>
 800889a:	f10d 0207 	add.w	r2, sp, #7
 800889e:	4617      	mov	r7, r2
 80088a0:	260a      	movs	r6, #10
 80088a2:	4694      	mov	ip, r2
 80088a4:	fb91 f5f6 	sdiv	r5, r1, r6
 80088a8:	fb06 1415 	mls	r4, r6, r5, r1
 80088ac:	3430      	adds	r4, #48	; 0x30
 80088ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80088b2:	460c      	mov	r4, r1
 80088b4:	2c63      	cmp	r4, #99	; 0x63
 80088b6:	f102 32ff 	add.w	r2, r2, #4294967295
 80088ba:	4629      	mov	r1, r5
 80088bc:	dcf1      	bgt.n	80088a2 <__exponent+0x22>
 80088be:	3130      	adds	r1, #48	; 0x30
 80088c0:	f1ac 0402 	sub.w	r4, ip, #2
 80088c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80088c8:	1c41      	adds	r1, r0, #1
 80088ca:	4622      	mov	r2, r4
 80088cc:	42ba      	cmp	r2, r7
 80088ce:	d30a      	bcc.n	80088e6 <__exponent+0x66>
 80088d0:	f10d 0209 	add.w	r2, sp, #9
 80088d4:	eba2 020c 	sub.w	r2, r2, ip
 80088d8:	42bc      	cmp	r4, r7
 80088da:	bf88      	it	hi
 80088dc:	2200      	movhi	r2, #0
 80088de:	4413      	add	r3, r2
 80088e0:	1a18      	subs	r0, r3, r0
 80088e2:	b003      	add	sp, #12
 80088e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80088ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 80088ee:	e7ed      	b.n	80088cc <__exponent+0x4c>
 80088f0:	2330      	movs	r3, #48	; 0x30
 80088f2:	3130      	adds	r1, #48	; 0x30
 80088f4:	7083      	strb	r3, [r0, #2]
 80088f6:	70c1      	strb	r1, [r0, #3]
 80088f8:	1d03      	adds	r3, r0, #4
 80088fa:	e7f1      	b.n	80088e0 <__exponent+0x60>

080088fc <_printf_float>:
 80088fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008900:	ed2d 8b02 	vpush	{d8}
 8008904:	b08d      	sub	sp, #52	; 0x34
 8008906:	460c      	mov	r4, r1
 8008908:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800890c:	4616      	mov	r6, r2
 800890e:	461f      	mov	r7, r3
 8008910:	4605      	mov	r5, r0
 8008912:	f000 ff25 	bl	8009760 <_localeconv_r>
 8008916:	f8d0 a000 	ldr.w	sl, [r0]
 800891a:	4650      	mov	r0, sl
 800891c:	f7f7 fcc8 	bl	80002b0 <strlen>
 8008920:	2300      	movs	r3, #0
 8008922:	930a      	str	r3, [sp, #40]	; 0x28
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	9305      	str	r3, [sp, #20]
 8008928:	f8d8 3000 	ldr.w	r3, [r8]
 800892c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008930:	3307      	adds	r3, #7
 8008932:	f023 0307 	bic.w	r3, r3, #7
 8008936:	f103 0208 	add.w	r2, r3, #8
 800893a:	f8c8 2000 	str.w	r2, [r8]
 800893e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008942:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008946:	9307      	str	r3, [sp, #28]
 8008948:	f8cd 8018 	str.w	r8, [sp, #24]
 800894c:	ee08 0a10 	vmov	s16, r0
 8008950:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008954:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008958:	4b9e      	ldr	r3, [pc, #632]	; (8008bd4 <_printf_float+0x2d8>)
 800895a:	f04f 32ff 	mov.w	r2, #4294967295
 800895e:	f7f8 f905 	bl	8000b6c <__aeabi_dcmpun>
 8008962:	bb88      	cbnz	r0, 80089c8 <_printf_float+0xcc>
 8008964:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008968:	4b9a      	ldr	r3, [pc, #616]	; (8008bd4 <_printf_float+0x2d8>)
 800896a:	f04f 32ff 	mov.w	r2, #4294967295
 800896e:	f7f8 f8df 	bl	8000b30 <__aeabi_dcmple>
 8008972:	bb48      	cbnz	r0, 80089c8 <_printf_float+0xcc>
 8008974:	2200      	movs	r2, #0
 8008976:	2300      	movs	r3, #0
 8008978:	4640      	mov	r0, r8
 800897a:	4649      	mov	r1, r9
 800897c:	f7f8 f8ce 	bl	8000b1c <__aeabi_dcmplt>
 8008980:	b110      	cbz	r0, 8008988 <_printf_float+0x8c>
 8008982:	232d      	movs	r3, #45	; 0x2d
 8008984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008988:	4a93      	ldr	r2, [pc, #588]	; (8008bd8 <_printf_float+0x2dc>)
 800898a:	4b94      	ldr	r3, [pc, #592]	; (8008bdc <_printf_float+0x2e0>)
 800898c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008990:	bf94      	ite	ls
 8008992:	4690      	movls	r8, r2
 8008994:	4698      	movhi	r8, r3
 8008996:	2303      	movs	r3, #3
 8008998:	6123      	str	r3, [r4, #16]
 800899a:	9b05      	ldr	r3, [sp, #20]
 800899c:	f023 0304 	bic.w	r3, r3, #4
 80089a0:	6023      	str	r3, [r4, #0]
 80089a2:	f04f 0900 	mov.w	r9, #0
 80089a6:	9700      	str	r7, [sp, #0]
 80089a8:	4633      	mov	r3, r6
 80089aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80089ac:	4621      	mov	r1, r4
 80089ae:	4628      	mov	r0, r5
 80089b0:	f000 f9da 	bl	8008d68 <_printf_common>
 80089b4:	3001      	adds	r0, #1
 80089b6:	f040 8090 	bne.w	8008ada <_printf_float+0x1de>
 80089ba:	f04f 30ff 	mov.w	r0, #4294967295
 80089be:	b00d      	add	sp, #52	; 0x34
 80089c0:	ecbd 8b02 	vpop	{d8}
 80089c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c8:	4642      	mov	r2, r8
 80089ca:	464b      	mov	r3, r9
 80089cc:	4640      	mov	r0, r8
 80089ce:	4649      	mov	r1, r9
 80089d0:	f7f8 f8cc 	bl	8000b6c <__aeabi_dcmpun>
 80089d4:	b140      	cbz	r0, 80089e8 <_printf_float+0xec>
 80089d6:	464b      	mov	r3, r9
 80089d8:	2b00      	cmp	r3, #0
 80089da:	bfbc      	itt	lt
 80089dc:	232d      	movlt	r3, #45	; 0x2d
 80089de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80089e2:	4a7f      	ldr	r2, [pc, #508]	; (8008be0 <_printf_float+0x2e4>)
 80089e4:	4b7f      	ldr	r3, [pc, #508]	; (8008be4 <_printf_float+0x2e8>)
 80089e6:	e7d1      	b.n	800898c <_printf_float+0x90>
 80089e8:	6863      	ldr	r3, [r4, #4]
 80089ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80089ee:	9206      	str	r2, [sp, #24]
 80089f0:	1c5a      	adds	r2, r3, #1
 80089f2:	d13f      	bne.n	8008a74 <_printf_float+0x178>
 80089f4:	2306      	movs	r3, #6
 80089f6:	6063      	str	r3, [r4, #4]
 80089f8:	9b05      	ldr	r3, [sp, #20]
 80089fa:	6861      	ldr	r1, [r4, #4]
 80089fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008a00:	2300      	movs	r3, #0
 8008a02:	9303      	str	r3, [sp, #12]
 8008a04:	ab0a      	add	r3, sp, #40	; 0x28
 8008a06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008a0a:	ab09      	add	r3, sp, #36	; 0x24
 8008a0c:	ec49 8b10 	vmov	d0, r8, r9
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	6022      	str	r2, [r4, #0]
 8008a14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a18:	4628      	mov	r0, r5
 8008a1a:	f7ff fecf 	bl	80087bc <__cvt>
 8008a1e:	9b06      	ldr	r3, [sp, #24]
 8008a20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a22:	2b47      	cmp	r3, #71	; 0x47
 8008a24:	4680      	mov	r8, r0
 8008a26:	d108      	bne.n	8008a3a <_printf_float+0x13e>
 8008a28:	1cc8      	adds	r0, r1, #3
 8008a2a:	db02      	blt.n	8008a32 <_printf_float+0x136>
 8008a2c:	6863      	ldr	r3, [r4, #4]
 8008a2e:	4299      	cmp	r1, r3
 8008a30:	dd41      	ble.n	8008ab6 <_printf_float+0x1ba>
 8008a32:	f1ab 0302 	sub.w	r3, fp, #2
 8008a36:	fa5f fb83 	uxtb.w	fp, r3
 8008a3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a3e:	d820      	bhi.n	8008a82 <_printf_float+0x186>
 8008a40:	3901      	subs	r1, #1
 8008a42:	465a      	mov	r2, fp
 8008a44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a48:	9109      	str	r1, [sp, #36]	; 0x24
 8008a4a:	f7ff ff19 	bl	8008880 <__exponent>
 8008a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a50:	1813      	adds	r3, r2, r0
 8008a52:	2a01      	cmp	r2, #1
 8008a54:	4681      	mov	r9, r0
 8008a56:	6123      	str	r3, [r4, #16]
 8008a58:	dc02      	bgt.n	8008a60 <_printf_float+0x164>
 8008a5a:	6822      	ldr	r2, [r4, #0]
 8008a5c:	07d2      	lsls	r2, r2, #31
 8008a5e:	d501      	bpl.n	8008a64 <_printf_float+0x168>
 8008a60:	3301      	adds	r3, #1
 8008a62:	6123      	str	r3, [r4, #16]
 8008a64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d09c      	beq.n	80089a6 <_printf_float+0xaa>
 8008a6c:	232d      	movs	r3, #45	; 0x2d
 8008a6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a72:	e798      	b.n	80089a6 <_printf_float+0xaa>
 8008a74:	9a06      	ldr	r2, [sp, #24]
 8008a76:	2a47      	cmp	r2, #71	; 0x47
 8008a78:	d1be      	bne.n	80089f8 <_printf_float+0xfc>
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1bc      	bne.n	80089f8 <_printf_float+0xfc>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e7b9      	b.n	80089f6 <_printf_float+0xfa>
 8008a82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008a86:	d118      	bne.n	8008aba <_printf_float+0x1be>
 8008a88:	2900      	cmp	r1, #0
 8008a8a:	6863      	ldr	r3, [r4, #4]
 8008a8c:	dd0b      	ble.n	8008aa6 <_printf_float+0x1aa>
 8008a8e:	6121      	str	r1, [r4, #16]
 8008a90:	b913      	cbnz	r3, 8008a98 <_printf_float+0x19c>
 8008a92:	6822      	ldr	r2, [r4, #0]
 8008a94:	07d0      	lsls	r0, r2, #31
 8008a96:	d502      	bpl.n	8008a9e <_printf_float+0x1a2>
 8008a98:	3301      	adds	r3, #1
 8008a9a:	440b      	add	r3, r1
 8008a9c:	6123      	str	r3, [r4, #16]
 8008a9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008aa0:	f04f 0900 	mov.w	r9, #0
 8008aa4:	e7de      	b.n	8008a64 <_printf_float+0x168>
 8008aa6:	b913      	cbnz	r3, 8008aae <_printf_float+0x1b2>
 8008aa8:	6822      	ldr	r2, [r4, #0]
 8008aaa:	07d2      	lsls	r2, r2, #31
 8008aac:	d501      	bpl.n	8008ab2 <_printf_float+0x1b6>
 8008aae:	3302      	adds	r3, #2
 8008ab0:	e7f4      	b.n	8008a9c <_printf_float+0x1a0>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e7f2      	b.n	8008a9c <_printf_float+0x1a0>
 8008ab6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008abc:	4299      	cmp	r1, r3
 8008abe:	db05      	blt.n	8008acc <_printf_float+0x1d0>
 8008ac0:	6823      	ldr	r3, [r4, #0]
 8008ac2:	6121      	str	r1, [r4, #16]
 8008ac4:	07d8      	lsls	r0, r3, #31
 8008ac6:	d5ea      	bpl.n	8008a9e <_printf_float+0x1a2>
 8008ac8:	1c4b      	adds	r3, r1, #1
 8008aca:	e7e7      	b.n	8008a9c <_printf_float+0x1a0>
 8008acc:	2900      	cmp	r1, #0
 8008ace:	bfd4      	ite	le
 8008ad0:	f1c1 0202 	rsble	r2, r1, #2
 8008ad4:	2201      	movgt	r2, #1
 8008ad6:	4413      	add	r3, r2
 8008ad8:	e7e0      	b.n	8008a9c <_printf_float+0x1a0>
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	055a      	lsls	r2, r3, #21
 8008ade:	d407      	bmi.n	8008af0 <_printf_float+0x1f4>
 8008ae0:	6923      	ldr	r3, [r4, #16]
 8008ae2:	4642      	mov	r2, r8
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b8      	blx	r7
 8008aea:	3001      	adds	r0, #1
 8008aec:	d12c      	bne.n	8008b48 <_printf_float+0x24c>
 8008aee:	e764      	b.n	80089ba <_printf_float+0xbe>
 8008af0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008af4:	f240 80e0 	bls.w	8008cb8 <_printf_float+0x3bc>
 8008af8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008afc:	2200      	movs	r2, #0
 8008afe:	2300      	movs	r3, #0
 8008b00:	f7f8 f802 	bl	8000b08 <__aeabi_dcmpeq>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	d034      	beq.n	8008b72 <_printf_float+0x276>
 8008b08:	4a37      	ldr	r2, [pc, #220]	; (8008be8 <_printf_float+0x2ec>)
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	4631      	mov	r1, r6
 8008b0e:	4628      	mov	r0, r5
 8008b10:	47b8      	blx	r7
 8008b12:	3001      	adds	r0, #1
 8008b14:	f43f af51 	beq.w	80089ba <_printf_float+0xbe>
 8008b18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	db02      	blt.n	8008b26 <_printf_float+0x22a>
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	07d8      	lsls	r0, r3, #31
 8008b24:	d510      	bpl.n	8008b48 <_printf_float+0x24c>
 8008b26:	ee18 3a10 	vmov	r3, s16
 8008b2a:	4652      	mov	r2, sl
 8008b2c:	4631      	mov	r1, r6
 8008b2e:	4628      	mov	r0, r5
 8008b30:	47b8      	blx	r7
 8008b32:	3001      	adds	r0, #1
 8008b34:	f43f af41 	beq.w	80089ba <_printf_float+0xbe>
 8008b38:	f04f 0800 	mov.w	r8, #0
 8008b3c:	f104 091a 	add.w	r9, r4, #26
 8008b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b42:	3b01      	subs	r3, #1
 8008b44:	4543      	cmp	r3, r8
 8008b46:	dc09      	bgt.n	8008b5c <_printf_float+0x260>
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	079b      	lsls	r3, r3, #30
 8008b4c:	f100 8107 	bmi.w	8008d5e <_printf_float+0x462>
 8008b50:	68e0      	ldr	r0, [r4, #12]
 8008b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b54:	4298      	cmp	r0, r3
 8008b56:	bfb8      	it	lt
 8008b58:	4618      	movlt	r0, r3
 8008b5a:	e730      	b.n	80089be <_printf_float+0xc2>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	464a      	mov	r2, r9
 8008b60:	4631      	mov	r1, r6
 8008b62:	4628      	mov	r0, r5
 8008b64:	47b8      	blx	r7
 8008b66:	3001      	adds	r0, #1
 8008b68:	f43f af27 	beq.w	80089ba <_printf_float+0xbe>
 8008b6c:	f108 0801 	add.w	r8, r8, #1
 8008b70:	e7e6      	b.n	8008b40 <_printf_float+0x244>
 8008b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	dc39      	bgt.n	8008bec <_printf_float+0x2f0>
 8008b78:	4a1b      	ldr	r2, [pc, #108]	; (8008be8 <_printf_float+0x2ec>)
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	4631      	mov	r1, r6
 8008b7e:	4628      	mov	r0, r5
 8008b80:	47b8      	blx	r7
 8008b82:	3001      	adds	r0, #1
 8008b84:	f43f af19 	beq.w	80089ba <_printf_float+0xbe>
 8008b88:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	d102      	bne.n	8008b96 <_printf_float+0x29a>
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	07d9      	lsls	r1, r3, #31
 8008b94:	d5d8      	bpl.n	8008b48 <_printf_float+0x24c>
 8008b96:	ee18 3a10 	vmov	r3, s16
 8008b9a:	4652      	mov	r2, sl
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	47b8      	blx	r7
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	f43f af09 	beq.w	80089ba <_printf_float+0xbe>
 8008ba8:	f04f 0900 	mov.w	r9, #0
 8008bac:	f104 0a1a 	add.w	sl, r4, #26
 8008bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb2:	425b      	negs	r3, r3
 8008bb4:	454b      	cmp	r3, r9
 8008bb6:	dc01      	bgt.n	8008bbc <_printf_float+0x2c0>
 8008bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bba:	e792      	b.n	8008ae2 <_printf_float+0x1e6>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	4652      	mov	r2, sl
 8008bc0:	4631      	mov	r1, r6
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	47b8      	blx	r7
 8008bc6:	3001      	adds	r0, #1
 8008bc8:	f43f aef7 	beq.w	80089ba <_printf_float+0xbe>
 8008bcc:	f109 0901 	add.w	r9, r9, #1
 8008bd0:	e7ee      	b.n	8008bb0 <_printf_float+0x2b4>
 8008bd2:	bf00      	nop
 8008bd4:	7fefffff 	.word	0x7fefffff
 8008bd8:	0800d8d8 	.word	0x0800d8d8
 8008bdc:	0800d8dc 	.word	0x0800d8dc
 8008be0:	0800d8e0 	.word	0x0800d8e0
 8008be4:	0800d8e4 	.word	0x0800d8e4
 8008be8:	0800dc70 	.word	0x0800dc70
 8008bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	bfa8      	it	ge
 8008bf4:	461a      	movge	r2, r3
 8008bf6:	2a00      	cmp	r2, #0
 8008bf8:	4691      	mov	r9, r2
 8008bfa:	dc37      	bgt.n	8008c6c <_printf_float+0x370>
 8008bfc:	f04f 0b00 	mov.w	fp, #0
 8008c00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c04:	f104 021a 	add.w	r2, r4, #26
 8008c08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c0a:	9305      	str	r3, [sp, #20]
 8008c0c:	eba3 0309 	sub.w	r3, r3, r9
 8008c10:	455b      	cmp	r3, fp
 8008c12:	dc33      	bgt.n	8008c7c <_printf_float+0x380>
 8008c14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	db3b      	blt.n	8008c94 <_printf_float+0x398>
 8008c1c:	6823      	ldr	r3, [r4, #0]
 8008c1e:	07da      	lsls	r2, r3, #31
 8008c20:	d438      	bmi.n	8008c94 <_printf_float+0x398>
 8008c22:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008c26:	eba2 0903 	sub.w	r9, r2, r3
 8008c2a:	9b05      	ldr	r3, [sp, #20]
 8008c2c:	1ad2      	subs	r2, r2, r3
 8008c2e:	4591      	cmp	r9, r2
 8008c30:	bfa8      	it	ge
 8008c32:	4691      	movge	r9, r2
 8008c34:	f1b9 0f00 	cmp.w	r9, #0
 8008c38:	dc35      	bgt.n	8008ca6 <_printf_float+0x3aa>
 8008c3a:	f04f 0800 	mov.w	r8, #0
 8008c3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c42:	f104 0a1a 	add.w	sl, r4, #26
 8008c46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c4a:	1a9b      	subs	r3, r3, r2
 8008c4c:	eba3 0309 	sub.w	r3, r3, r9
 8008c50:	4543      	cmp	r3, r8
 8008c52:	f77f af79 	ble.w	8008b48 <_printf_float+0x24c>
 8008c56:	2301      	movs	r3, #1
 8008c58:	4652      	mov	r2, sl
 8008c5a:	4631      	mov	r1, r6
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	47b8      	blx	r7
 8008c60:	3001      	adds	r0, #1
 8008c62:	f43f aeaa 	beq.w	80089ba <_printf_float+0xbe>
 8008c66:	f108 0801 	add.w	r8, r8, #1
 8008c6a:	e7ec      	b.n	8008c46 <_printf_float+0x34a>
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	4631      	mov	r1, r6
 8008c70:	4642      	mov	r2, r8
 8008c72:	4628      	mov	r0, r5
 8008c74:	47b8      	blx	r7
 8008c76:	3001      	adds	r0, #1
 8008c78:	d1c0      	bne.n	8008bfc <_printf_float+0x300>
 8008c7a:	e69e      	b.n	80089ba <_printf_float+0xbe>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	4631      	mov	r1, r6
 8008c80:	4628      	mov	r0, r5
 8008c82:	9205      	str	r2, [sp, #20]
 8008c84:	47b8      	blx	r7
 8008c86:	3001      	adds	r0, #1
 8008c88:	f43f ae97 	beq.w	80089ba <_printf_float+0xbe>
 8008c8c:	9a05      	ldr	r2, [sp, #20]
 8008c8e:	f10b 0b01 	add.w	fp, fp, #1
 8008c92:	e7b9      	b.n	8008c08 <_printf_float+0x30c>
 8008c94:	ee18 3a10 	vmov	r3, s16
 8008c98:	4652      	mov	r2, sl
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	47b8      	blx	r7
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	d1be      	bne.n	8008c22 <_printf_float+0x326>
 8008ca4:	e689      	b.n	80089ba <_printf_float+0xbe>
 8008ca6:	9a05      	ldr	r2, [sp, #20]
 8008ca8:	464b      	mov	r3, r9
 8008caa:	4442      	add	r2, r8
 8008cac:	4631      	mov	r1, r6
 8008cae:	4628      	mov	r0, r5
 8008cb0:	47b8      	blx	r7
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	d1c1      	bne.n	8008c3a <_printf_float+0x33e>
 8008cb6:	e680      	b.n	80089ba <_printf_float+0xbe>
 8008cb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cba:	2a01      	cmp	r2, #1
 8008cbc:	dc01      	bgt.n	8008cc2 <_printf_float+0x3c6>
 8008cbe:	07db      	lsls	r3, r3, #31
 8008cc0:	d53a      	bpl.n	8008d38 <_printf_float+0x43c>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	4642      	mov	r2, r8
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	4628      	mov	r0, r5
 8008cca:	47b8      	blx	r7
 8008ccc:	3001      	adds	r0, #1
 8008cce:	f43f ae74 	beq.w	80089ba <_printf_float+0xbe>
 8008cd2:	ee18 3a10 	vmov	r3, s16
 8008cd6:	4652      	mov	r2, sl
 8008cd8:	4631      	mov	r1, r6
 8008cda:	4628      	mov	r0, r5
 8008cdc:	47b8      	blx	r7
 8008cde:	3001      	adds	r0, #1
 8008ce0:	f43f ae6b 	beq.w	80089ba <_printf_float+0xbe>
 8008ce4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ce8:	2200      	movs	r2, #0
 8008cea:	2300      	movs	r3, #0
 8008cec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008cf0:	f7f7 ff0a 	bl	8000b08 <__aeabi_dcmpeq>
 8008cf4:	b9d8      	cbnz	r0, 8008d2e <_printf_float+0x432>
 8008cf6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008cfa:	f108 0201 	add.w	r2, r8, #1
 8008cfe:	4631      	mov	r1, r6
 8008d00:	4628      	mov	r0, r5
 8008d02:	47b8      	blx	r7
 8008d04:	3001      	adds	r0, #1
 8008d06:	d10e      	bne.n	8008d26 <_printf_float+0x42a>
 8008d08:	e657      	b.n	80089ba <_printf_float+0xbe>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	4652      	mov	r2, sl
 8008d0e:	4631      	mov	r1, r6
 8008d10:	4628      	mov	r0, r5
 8008d12:	47b8      	blx	r7
 8008d14:	3001      	adds	r0, #1
 8008d16:	f43f ae50 	beq.w	80089ba <_printf_float+0xbe>
 8008d1a:	f108 0801 	add.w	r8, r8, #1
 8008d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d20:	3b01      	subs	r3, #1
 8008d22:	4543      	cmp	r3, r8
 8008d24:	dcf1      	bgt.n	8008d0a <_printf_float+0x40e>
 8008d26:	464b      	mov	r3, r9
 8008d28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d2c:	e6da      	b.n	8008ae4 <_printf_float+0x1e8>
 8008d2e:	f04f 0800 	mov.w	r8, #0
 8008d32:	f104 0a1a 	add.w	sl, r4, #26
 8008d36:	e7f2      	b.n	8008d1e <_printf_float+0x422>
 8008d38:	2301      	movs	r3, #1
 8008d3a:	4642      	mov	r2, r8
 8008d3c:	e7df      	b.n	8008cfe <_printf_float+0x402>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	464a      	mov	r2, r9
 8008d42:	4631      	mov	r1, r6
 8008d44:	4628      	mov	r0, r5
 8008d46:	47b8      	blx	r7
 8008d48:	3001      	adds	r0, #1
 8008d4a:	f43f ae36 	beq.w	80089ba <_printf_float+0xbe>
 8008d4e:	f108 0801 	add.w	r8, r8, #1
 8008d52:	68e3      	ldr	r3, [r4, #12]
 8008d54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d56:	1a5b      	subs	r3, r3, r1
 8008d58:	4543      	cmp	r3, r8
 8008d5a:	dcf0      	bgt.n	8008d3e <_printf_float+0x442>
 8008d5c:	e6f8      	b.n	8008b50 <_printf_float+0x254>
 8008d5e:	f04f 0800 	mov.w	r8, #0
 8008d62:	f104 0919 	add.w	r9, r4, #25
 8008d66:	e7f4      	b.n	8008d52 <_printf_float+0x456>

08008d68 <_printf_common>:
 8008d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d6c:	4616      	mov	r6, r2
 8008d6e:	4699      	mov	r9, r3
 8008d70:	688a      	ldr	r2, [r1, #8]
 8008d72:	690b      	ldr	r3, [r1, #16]
 8008d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	bfb8      	it	lt
 8008d7c:	4613      	movlt	r3, r2
 8008d7e:	6033      	str	r3, [r6, #0]
 8008d80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d84:	4607      	mov	r7, r0
 8008d86:	460c      	mov	r4, r1
 8008d88:	b10a      	cbz	r2, 8008d8e <_printf_common+0x26>
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	6033      	str	r3, [r6, #0]
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	0699      	lsls	r1, r3, #26
 8008d92:	bf42      	ittt	mi
 8008d94:	6833      	ldrmi	r3, [r6, #0]
 8008d96:	3302      	addmi	r3, #2
 8008d98:	6033      	strmi	r3, [r6, #0]
 8008d9a:	6825      	ldr	r5, [r4, #0]
 8008d9c:	f015 0506 	ands.w	r5, r5, #6
 8008da0:	d106      	bne.n	8008db0 <_printf_common+0x48>
 8008da2:	f104 0a19 	add.w	sl, r4, #25
 8008da6:	68e3      	ldr	r3, [r4, #12]
 8008da8:	6832      	ldr	r2, [r6, #0]
 8008daa:	1a9b      	subs	r3, r3, r2
 8008dac:	42ab      	cmp	r3, r5
 8008dae:	dc26      	bgt.n	8008dfe <_printf_common+0x96>
 8008db0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008db4:	1e13      	subs	r3, r2, #0
 8008db6:	6822      	ldr	r2, [r4, #0]
 8008db8:	bf18      	it	ne
 8008dba:	2301      	movne	r3, #1
 8008dbc:	0692      	lsls	r2, r2, #26
 8008dbe:	d42b      	bmi.n	8008e18 <_printf_common+0xb0>
 8008dc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008dc4:	4649      	mov	r1, r9
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	47c0      	blx	r8
 8008dca:	3001      	adds	r0, #1
 8008dcc:	d01e      	beq.n	8008e0c <_printf_common+0xa4>
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	6922      	ldr	r2, [r4, #16]
 8008dd2:	f003 0306 	and.w	r3, r3, #6
 8008dd6:	2b04      	cmp	r3, #4
 8008dd8:	bf02      	ittt	eq
 8008dda:	68e5      	ldreq	r5, [r4, #12]
 8008ddc:	6833      	ldreq	r3, [r6, #0]
 8008dde:	1aed      	subeq	r5, r5, r3
 8008de0:	68a3      	ldr	r3, [r4, #8]
 8008de2:	bf0c      	ite	eq
 8008de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008de8:	2500      	movne	r5, #0
 8008dea:	4293      	cmp	r3, r2
 8008dec:	bfc4      	itt	gt
 8008dee:	1a9b      	subgt	r3, r3, r2
 8008df0:	18ed      	addgt	r5, r5, r3
 8008df2:	2600      	movs	r6, #0
 8008df4:	341a      	adds	r4, #26
 8008df6:	42b5      	cmp	r5, r6
 8008df8:	d11a      	bne.n	8008e30 <_printf_common+0xc8>
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	e008      	b.n	8008e10 <_printf_common+0xa8>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	4652      	mov	r2, sl
 8008e02:	4649      	mov	r1, r9
 8008e04:	4638      	mov	r0, r7
 8008e06:	47c0      	blx	r8
 8008e08:	3001      	adds	r0, #1
 8008e0a:	d103      	bne.n	8008e14 <_printf_common+0xac>
 8008e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e14:	3501      	adds	r5, #1
 8008e16:	e7c6      	b.n	8008da6 <_printf_common+0x3e>
 8008e18:	18e1      	adds	r1, r4, r3
 8008e1a:	1c5a      	adds	r2, r3, #1
 8008e1c:	2030      	movs	r0, #48	; 0x30
 8008e1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e22:	4422      	add	r2, r4
 8008e24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e2c:	3302      	adds	r3, #2
 8008e2e:	e7c7      	b.n	8008dc0 <_printf_common+0x58>
 8008e30:	2301      	movs	r3, #1
 8008e32:	4622      	mov	r2, r4
 8008e34:	4649      	mov	r1, r9
 8008e36:	4638      	mov	r0, r7
 8008e38:	47c0      	blx	r8
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	d0e6      	beq.n	8008e0c <_printf_common+0xa4>
 8008e3e:	3601      	adds	r6, #1
 8008e40:	e7d9      	b.n	8008df6 <_printf_common+0x8e>
	...

08008e44 <_printf_i>:
 8008e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e48:	7e0f      	ldrb	r7, [r1, #24]
 8008e4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e4c:	2f78      	cmp	r7, #120	; 0x78
 8008e4e:	4691      	mov	r9, r2
 8008e50:	4680      	mov	r8, r0
 8008e52:	460c      	mov	r4, r1
 8008e54:	469a      	mov	sl, r3
 8008e56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e5a:	d807      	bhi.n	8008e6c <_printf_i+0x28>
 8008e5c:	2f62      	cmp	r7, #98	; 0x62
 8008e5e:	d80a      	bhi.n	8008e76 <_printf_i+0x32>
 8008e60:	2f00      	cmp	r7, #0
 8008e62:	f000 80d4 	beq.w	800900e <_printf_i+0x1ca>
 8008e66:	2f58      	cmp	r7, #88	; 0x58
 8008e68:	f000 80c0 	beq.w	8008fec <_printf_i+0x1a8>
 8008e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e74:	e03a      	b.n	8008eec <_printf_i+0xa8>
 8008e76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e7a:	2b15      	cmp	r3, #21
 8008e7c:	d8f6      	bhi.n	8008e6c <_printf_i+0x28>
 8008e7e:	a101      	add	r1, pc, #4	; (adr r1, 8008e84 <_printf_i+0x40>)
 8008e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e84:	08008edd 	.word	0x08008edd
 8008e88:	08008ef1 	.word	0x08008ef1
 8008e8c:	08008e6d 	.word	0x08008e6d
 8008e90:	08008e6d 	.word	0x08008e6d
 8008e94:	08008e6d 	.word	0x08008e6d
 8008e98:	08008e6d 	.word	0x08008e6d
 8008e9c:	08008ef1 	.word	0x08008ef1
 8008ea0:	08008e6d 	.word	0x08008e6d
 8008ea4:	08008e6d 	.word	0x08008e6d
 8008ea8:	08008e6d 	.word	0x08008e6d
 8008eac:	08008e6d 	.word	0x08008e6d
 8008eb0:	08008ff5 	.word	0x08008ff5
 8008eb4:	08008f1d 	.word	0x08008f1d
 8008eb8:	08008faf 	.word	0x08008faf
 8008ebc:	08008e6d 	.word	0x08008e6d
 8008ec0:	08008e6d 	.word	0x08008e6d
 8008ec4:	08009017 	.word	0x08009017
 8008ec8:	08008e6d 	.word	0x08008e6d
 8008ecc:	08008f1d 	.word	0x08008f1d
 8008ed0:	08008e6d 	.word	0x08008e6d
 8008ed4:	08008e6d 	.word	0x08008e6d
 8008ed8:	08008fb7 	.word	0x08008fb7
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	1d1a      	adds	r2, r3, #4
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	602a      	str	r2, [r5, #0]
 8008ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008eec:	2301      	movs	r3, #1
 8008eee:	e09f      	b.n	8009030 <_printf_i+0x1ec>
 8008ef0:	6820      	ldr	r0, [r4, #0]
 8008ef2:	682b      	ldr	r3, [r5, #0]
 8008ef4:	0607      	lsls	r7, r0, #24
 8008ef6:	f103 0104 	add.w	r1, r3, #4
 8008efa:	6029      	str	r1, [r5, #0]
 8008efc:	d501      	bpl.n	8008f02 <_printf_i+0xbe>
 8008efe:	681e      	ldr	r6, [r3, #0]
 8008f00:	e003      	b.n	8008f0a <_printf_i+0xc6>
 8008f02:	0646      	lsls	r6, r0, #25
 8008f04:	d5fb      	bpl.n	8008efe <_printf_i+0xba>
 8008f06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008f0a:	2e00      	cmp	r6, #0
 8008f0c:	da03      	bge.n	8008f16 <_printf_i+0xd2>
 8008f0e:	232d      	movs	r3, #45	; 0x2d
 8008f10:	4276      	negs	r6, r6
 8008f12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f16:	485a      	ldr	r0, [pc, #360]	; (8009080 <_printf_i+0x23c>)
 8008f18:	230a      	movs	r3, #10
 8008f1a:	e012      	b.n	8008f42 <_printf_i+0xfe>
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	6820      	ldr	r0, [r4, #0]
 8008f20:	1d19      	adds	r1, r3, #4
 8008f22:	6029      	str	r1, [r5, #0]
 8008f24:	0605      	lsls	r5, r0, #24
 8008f26:	d501      	bpl.n	8008f2c <_printf_i+0xe8>
 8008f28:	681e      	ldr	r6, [r3, #0]
 8008f2a:	e002      	b.n	8008f32 <_printf_i+0xee>
 8008f2c:	0641      	lsls	r1, r0, #25
 8008f2e:	d5fb      	bpl.n	8008f28 <_printf_i+0xe4>
 8008f30:	881e      	ldrh	r6, [r3, #0]
 8008f32:	4853      	ldr	r0, [pc, #332]	; (8009080 <_printf_i+0x23c>)
 8008f34:	2f6f      	cmp	r7, #111	; 0x6f
 8008f36:	bf0c      	ite	eq
 8008f38:	2308      	moveq	r3, #8
 8008f3a:	230a      	movne	r3, #10
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f42:	6865      	ldr	r5, [r4, #4]
 8008f44:	60a5      	str	r5, [r4, #8]
 8008f46:	2d00      	cmp	r5, #0
 8008f48:	bfa2      	ittt	ge
 8008f4a:	6821      	ldrge	r1, [r4, #0]
 8008f4c:	f021 0104 	bicge.w	r1, r1, #4
 8008f50:	6021      	strge	r1, [r4, #0]
 8008f52:	b90e      	cbnz	r6, 8008f58 <_printf_i+0x114>
 8008f54:	2d00      	cmp	r5, #0
 8008f56:	d04b      	beq.n	8008ff0 <_printf_i+0x1ac>
 8008f58:	4615      	mov	r5, r2
 8008f5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f5e:	fb03 6711 	mls	r7, r3, r1, r6
 8008f62:	5dc7      	ldrb	r7, [r0, r7]
 8008f64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f68:	4637      	mov	r7, r6
 8008f6a:	42bb      	cmp	r3, r7
 8008f6c:	460e      	mov	r6, r1
 8008f6e:	d9f4      	bls.n	8008f5a <_printf_i+0x116>
 8008f70:	2b08      	cmp	r3, #8
 8008f72:	d10b      	bne.n	8008f8c <_printf_i+0x148>
 8008f74:	6823      	ldr	r3, [r4, #0]
 8008f76:	07de      	lsls	r6, r3, #31
 8008f78:	d508      	bpl.n	8008f8c <_printf_i+0x148>
 8008f7a:	6923      	ldr	r3, [r4, #16]
 8008f7c:	6861      	ldr	r1, [r4, #4]
 8008f7e:	4299      	cmp	r1, r3
 8008f80:	bfde      	ittt	le
 8008f82:	2330      	movle	r3, #48	; 0x30
 8008f84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f8c:	1b52      	subs	r2, r2, r5
 8008f8e:	6122      	str	r2, [r4, #16]
 8008f90:	f8cd a000 	str.w	sl, [sp]
 8008f94:	464b      	mov	r3, r9
 8008f96:	aa03      	add	r2, sp, #12
 8008f98:	4621      	mov	r1, r4
 8008f9a:	4640      	mov	r0, r8
 8008f9c:	f7ff fee4 	bl	8008d68 <_printf_common>
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	d14a      	bne.n	800903a <_printf_i+0x1f6>
 8008fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa8:	b004      	add	sp, #16
 8008faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	f043 0320 	orr.w	r3, r3, #32
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	4833      	ldr	r0, [pc, #204]	; (8009084 <_printf_i+0x240>)
 8008fb8:	2778      	movs	r7, #120	; 0x78
 8008fba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	6829      	ldr	r1, [r5, #0]
 8008fc2:	061f      	lsls	r7, r3, #24
 8008fc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008fc8:	d402      	bmi.n	8008fd0 <_printf_i+0x18c>
 8008fca:	065f      	lsls	r7, r3, #25
 8008fcc:	bf48      	it	mi
 8008fce:	b2b6      	uxthmi	r6, r6
 8008fd0:	07df      	lsls	r7, r3, #31
 8008fd2:	bf48      	it	mi
 8008fd4:	f043 0320 	orrmi.w	r3, r3, #32
 8008fd8:	6029      	str	r1, [r5, #0]
 8008fda:	bf48      	it	mi
 8008fdc:	6023      	strmi	r3, [r4, #0]
 8008fde:	b91e      	cbnz	r6, 8008fe8 <_printf_i+0x1a4>
 8008fe0:	6823      	ldr	r3, [r4, #0]
 8008fe2:	f023 0320 	bic.w	r3, r3, #32
 8008fe6:	6023      	str	r3, [r4, #0]
 8008fe8:	2310      	movs	r3, #16
 8008fea:	e7a7      	b.n	8008f3c <_printf_i+0xf8>
 8008fec:	4824      	ldr	r0, [pc, #144]	; (8009080 <_printf_i+0x23c>)
 8008fee:	e7e4      	b.n	8008fba <_printf_i+0x176>
 8008ff0:	4615      	mov	r5, r2
 8008ff2:	e7bd      	b.n	8008f70 <_printf_i+0x12c>
 8008ff4:	682b      	ldr	r3, [r5, #0]
 8008ff6:	6826      	ldr	r6, [r4, #0]
 8008ff8:	6961      	ldr	r1, [r4, #20]
 8008ffa:	1d18      	adds	r0, r3, #4
 8008ffc:	6028      	str	r0, [r5, #0]
 8008ffe:	0635      	lsls	r5, r6, #24
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	d501      	bpl.n	8009008 <_printf_i+0x1c4>
 8009004:	6019      	str	r1, [r3, #0]
 8009006:	e002      	b.n	800900e <_printf_i+0x1ca>
 8009008:	0670      	lsls	r0, r6, #25
 800900a:	d5fb      	bpl.n	8009004 <_printf_i+0x1c0>
 800900c:	8019      	strh	r1, [r3, #0]
 800900e:	2300      	movs	r3, #0
 8009010:	6123      	str	r3, [r4, #16]
 8009012:	4615      	mov	r5, r2
 8009014:	e7bc      	b.n	8008f90 <_printf_i+0x14c>
 8009016:	682b      	ldr	r3, [r5, #0]
 8009018:	1d1a      	adds	r2, r3, #4
 800901a:	602a      	str	r2, [r5, #0]
 800901c:	681d      	ldr	r5, [r3, #0]
 800901e:	6862      	ldr	r2, [r4, #4]
 8009020:	2100      	movs	r1, #0
 8009022:	4628      	mov	r0, r5
 8009024:	f7f7 f8f4 	bl	8000210 <memchr>
 8009028:	b108      	cbz	r0, 800902e <_printf_i+0x1ea>
 800902a:	1b40      	subs	r0, r0, r5
 800902c:	6060      	str	r0, [r4, #4]
 800902e:	6863      	ldr	r3, [r4, #4]
 8009030:	6123      	str	r3, [r4, #16]
 8009032:	2300      	movs	r3, #0
 8009034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009038:	e7aa      	b.n	8008f90 <_printf_i+0x14c>
 800903a:	6923      	ldr	r3, [r4, #16]
 800903c:	462a      	mov	r2, r5
 800903e:	4649      	mov	r1, r9
 8009040:	4640      	mov	r0, r8
 8009042:	47d0      	blx	sl
 8009044:	3001      	adds	r0, #1
 8009046:	d0ad      	beq.n	8008fa4 <_printf_i+0x160>
 8009048:	6823      	ldr	r3, [r4, #0]
 800904a:	079b      	lsls	r3, r3, #30
 800904c:	d413      	bmi.n	8009076 <_printf_i+0x232>
 800904e:	68e0      	ldr	r0, [r4, #12]
 8009050:	9b03      	ldr	r3, [sp, #12]
 8009052:	4298      	cmp	r0, r3
 8009054:	bfb8      	it	lt
 8009056:	4618      	movlt	r0, r3
 8009058:	e7a6      	b.n	8008fa8 <_printf_i+0x164>
 800905a:	2301      	movs	r3, #1
 800905c:	4632      	mov	r2, r6
 800905e:	4649      	mov	r1, r9
 8009060:	4640      	mov	r0, r8
 8009062:	47d0      	blx	sl
 8009064:	3001      	adds	r0, #1
 8009066:	d09d      	beq.n	8008fa4 <_printf_i+0x160>
 8009068:	3501      	adds	r5, #1
 800906a:	68e3      	ldr	r3, [r4, #12]
 800906c:	9903      	ldr	r1, [sp, #12]
 800906e:	1a5b      	subs	r3, r3, r1
 8009070:	42ab      	cmp	r3, r5
 8009072:	dcf2      	bgt.n	800905a <_printf_i+0x216>
 8009074:	e7eb      	b.n	800904e <_printf_i+0x20a>
 8009076:	2500      	movs	r5, #0
 8009078:	f104 0619 	add.w	r6, r4, #25
 800907c:	e7f5      	b.n	800906a <_printf_i+0x226>
 800907e:	bf00      	nop
 8009080:	0800d8e8 	.word	0x0800d8e8
 8009084:	0800d8f9 	.word	0x0800d8f9

08009088 <_scanf_float>:
 8009088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908c:	b087      	sub	sp, #28
 800908e:	4617      	mov	r7, r2
 8009090:	9303      	str	r3, [sp, #12]
 8009092:	688b      	ldr	r3, [r1, #8]
 8009094:	1e5a      	subs	r2, r3, #1
 8009096:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800909a:	bf83      	ittte	hi
 800909c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80090a0:	195b      	addhi	r3, r3, r5
 80090a2:	9302      	strhi	r3, [sp, #8]
 80090a4:	2300      	movls	r3, #0
 80090a6:	bf86      	itte	hi
 80090a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80090ac:	608b      	strhi	r3, [r1, #8]
 80090ae:	9302      	strls	r3, [sp, #8]
 80090b0:	680b      	ldr	r3, [r1, #0]
 80090b2:	468b      	mov	fp, r1
 80090b4:	2500      	movs	r5, #0
 80090b6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80090ba:	f84b 3b1c 	str.w	r3, [fp], #28
 80090be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80090c2:	4680      	mov	r8, r0
 80090c4:	460c      	mov	r4, r1
 80090c6:	465e      	mov	r6, fp
 80090c8:	46aa      	mov	sl, r5
 80090ca:	46a9      	mov	r9, r5
 80090cc:	9501      	str	r5, [sp, #4]
 80090ce:	68a2      	ldr	r2, [r4, #8]
 80090d0:	b152      	cbz	r2, 80090e8 <_scanf_float+0x60>
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	2b4e      	cmp	r3, #78	; 0x4e
 80090d8:	d864      	bhi.n	80091a4 <_scanf_float+0x11c>
 80090da:	2b40      	cmp	r3, #64	; 0x40
 80090dc:	d83c      	bhi.n	8009158 <_scanf_float+0xd0>
 80090de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80090e2:	b2c8      	uxtb	r0, r1
 80090e4:	280e      	cmp	r0, #14
 80090e6:	d93a      	bls.n	800915e <_scanf_float+0xd6>
 80090e8:	f1b9 0f00 	cmp.w	r9, #0
 80090ec:	d003      	beq.n	80090f6 <_scanf_float+0x6e>
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090fa:	f1ba 0f01 	cmp.w	sl, #1
 80090fe:	f200 8113 	bhi.w	8009328 <_scanf_float+0x2a0>
 8009102:	455e      	cmp	r6, fp
 8009104:	f200 8105 	bhi.w	8009312 <_scanf_float+0x28a>
 8009108:	2501      	movs	r5, #1
 800910a:	4628      	mov	r0, r5
 800910c:	b007      	add	sp, #28
 800910e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009112:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009116:	2a0d      	cmp	r2, #13
 8009118:	d8e6      	bhi.n	80090e8 <_scanf_float+0x60>
 800911a:	a101      	add	r1, pc, #4	; (adr r1, 8009120 <_scanf_float+0x98>)
 800911c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009120:	0800925f 	.word	0x0800925f
 8009124:	080090e9 	.word	0x080090e9
 8009128:	080090e9 	.word	0x080090e9
 800912c:	080090e9 	.word	0x080090e9
 8009130:	080092bf 	.word	0x080092bf
 8009134:	08009297 	.word	0x08009297
 8009138:	080090e9 	.word	0x080090e9
 800913c:	080090e9 	.word	0x080090e9
 8009140:	0800926d 	.word	0x0800926d
 8009144:	080090e9 	.word	0x080090e9
 8009148:	080090e9 	.word	0x080090e9
 800914c:	080090e9 	.word	0x080090e9
 8009150:	080090e9 	.word	0x080090e9
 8009154:	08009225 	.word	0x08009225
 8009158:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800915c:	e7db      	b.n	8009116 <_scanf_float+0x8e>
 800915e:	290e      	cmp	r1, #14
 8009160:	d8c2      	bhi.n	80090e8 <_scanf_float+0x60>
 8009162:	a001      	add	r0, pc, #4	; (adr r0, 8009168 <_scanf_float+0xe0>)
 8009164:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009168:	08009217 	.word	0x08009217
 800916c:	080090e9 	.word	0x080090e9
 8009170:	08009217 	.word	0x08009217
 8009174:	080092ab 	.word	0x080092ab
 8009178:	080090e9 	.word	0x080090e9
 800917c:	080091c5 	.word	0x080091c5
 8009180:	08009201 	.word	0x08009201
 8009184:	08009201 	.word	0x08009201
 8009188:	08009201 	.word	0x08009201
 800918c:	08009201 	.word	0x08009201
 8009190:	08009201 	.word	0x08009201
 8009194:	08009201 	.word	0x08009201
 8009198:	08009201 	.word	0x08009201
 800919c:	08009201 	.word	0x08009201
 80091a0:	08009201 	.word	0x08009201
 80091a4:	2b6e      	cmp	r3, #110	; 0x6e
 80091a6:	d809      	bhi.n	80091bc <_scanf_float+0x134>
 80091a8:	2b60      	cmp	r3, #96	; 0x60
 80091aa:	d8b2      	bhi.n	8009112 <_scanf_float+0x8a>
 80091ac:	2b54      	cmp	r3, #84	; 0x54
 80091ae:	d077      	beq.n	80092a0 <_scanf_float+0x218>
 80091b0:	2b59      	cmp	r3, #89	; 0x59
 80091b2:	d199      	bne.n	80090e8 <_scanf_float+0x60>
 80091b4:	2d07      	cmp	r5, #7
 80091b6:	d197      	bne.n	80090e8 <_scanf_float+0x60>
 80091b8:	2508      	movs	r5, #8
 80091ba:	e029      	b.n	8009210 <_scanf_float+0x188>
 80091bc:	2b74      	cmp	r3, #116	; 0x74
 80091be:	d06f      	beq.n	80092a0 <_scanf_float+0x218>
 80091c0:	2b79      	cmp	r3, #121	; 0x79
 80091c2:	e7f6      	b.n	80091b2 <_scanf_float+0x12a>
 80091c4:	6821      	ldr	r1, [r4, #0]
 80091c6:	05c8      	lsls	r0, r1, #23
 80091c8:	d51a      	bpl.n	8009200 <_scanf_float+0x178>
 80091ca:	9b02      	ldr	r3, [sp, #8]
 80091cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80091d0:	6021      	str	r1, [r4, #0]
 80091d2:	f109 0901 	add.w	r9, r9, #1
 80091d6:	b11b      	cbz	r3, 80091e0 <_scanf_float+0x158>
 80091d8:	3b01      	subs	r3, #1
 80091da:	3201      	adds	r2, #1
 80091dc:	9302      	str	r3, [sp, #8]
 80091de:	60a2      	str	r2, [r4, #8]
 80091e0:	68a3      	ldr	r3, [r4, #8]
 80091e2:	3b01      	subs	r3, #1
 80091e4:	60a3      	str	r3, [r4, #8]
 80091e6:	6923      	ldr	r3, [r4, #16]
 80091e8:	3301      	adds	r3, #1
 80091ea:	6123      	str	r3, [r4, #16]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	3b01      	subs	r3, #1
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	607b      	str	r3, [r7, #4]
 80091f4:	f340 8084 	ble.w	8009300 <_scanf_float+0x278>
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	3301      	adds	r3, #1
 80091fc:	603b      	str	r3, [r7, #0]
 80091fe:	e766      	b.n	80090ce <_scanf_float+0x46>
 8009200:	eb1a 0f05 	cmn.w	sl, r5
 8009204:	f47f af70 	bne.w	80090e8 <_scanf_float+0x60>
 8009208:	6822      	ldr	r2, [r4, #0]
 800920a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800920e:	6022      	str	r2, [r4, #0]
 8009210:	f806 3b01 	strb.w	r3, [r6], #1
 8009214:	e7e4      	b.n	80091e0 <_scanf_float+0x158>
 8009216:	6822      	ldr	r2, [r4, #0]
 8009218:	0610      	lsls	r0, r2, #24
 800921a:	f57f af65 	bpl.w	80090e8 <_scanf_float+0x60>
 800921e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009222:	e7f4      	b.n	800920e <_scanf_float+0x186>
 8009224:	f1ba 0f00 	cmp.w	sl, #0
 8009228:	d10e      	bne.n	8009248 <_scanf_float+0x1c0>
 800922a:	f1b9 0f00 	cmp.w	r9, #0
 800922e:	d10e      	bne.n	800924e <_scanf_float+0x1c6>
 8009230:	6822      	ldr	r2, [r4, #0]
 8009232:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009236:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800923a:	d108      	bne.n	800924e <_scanf_float+0x1c6>
 800923c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009240:	6022      	str	r2, [r4, #0]
 8009242:	f04f 0a01 	mov.w	sl, #1
 8009246:	e7e3      	b.n	8009210 <_scanf_float+0x188>
 8009248:	f1ba 0f02 	cmp.w	sl, #2
 800924c:	d055      	beq.n	80092fa <_scanf_float+0x272>
 800924e:	2d01      	cmp	r5, #1
 8009250:	d002      	beq.n	8009258 <_scanf_float+0x1d0>
 8009252:	2d04      	cmp	r5, #4
 8009254:	f47f af48 	bne.w	80090e8 <_scanf_float+0x60>
 8009258:	3501      	adds	r5, #1
 800925a:	b2ed      	uxtb	r5, r5
 800925c:	e7d8      	b.n	8009210 <_scanf_float+0x188>
 800925e:	f1ba 0f01 	cmp.w	sl, #1
 8009262:	f47f af41 	bne.w	80090e8 <_scanf_float+0x60>
 8009266:	f04f 0a02 	mov.w	sl, #2
 800926a:	e7d1      	b.n	8009210 <_scanf_float+0x188>
 800926c:	b97d      	cbnz	r5, 800928e <_scanf_float+0x206>
 800926e:	f1b9 0f00 	cmp.w	r9, #0
 8009272:	f47f af3c 	bne.w	80090ee <_scanf_float+0x66>
 8009276:	6822      	ldr	r2, [r4, #0]
 8009278:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800927c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009280:	f47f af39 	bne.w	80090f6 <_scanf_float+0x6e>
 8009284:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009288:	6022      	str	r2, [r4, #0]
 800928a:	2501      	movs	r5, #1
 800928c:	e7c0      	b.n	8009210 <_scanf_float+0x188>
 800928e:	2d03      	cmp	r5, #3
 8009290:	d0e2      	beq.n	8009258 <_scanf_float+0x1d0>
 8009292:	2d05      	cmp	r5, #5
 8009294:	e7de      	b.n	8009254 <_scanf_float+0x1cc>
 8009296:	2d02      	cmp	r5, #2
 8009298:	f47f af26 	bne.w	80090e8 <_scanf_float+0x60>
 800929c:	2503      	movs	r5, #3
 800929e:	e7b7      	b.n	8009210 <_scanf_float+0x188>
 80092a0:	2d06      	cmp	r5, #6
 80092a2:	f47f af21 	bne.w	80090e8 <_scanf_float+0x60>
 80092a6:	2507      	movs	r5, #7
 80092a8:	e7b2      	b.n	8009210 <_scanf_float+0x188>
 80092aa:	6822      	ldr	r2, [r4, #0]
 80092ac:	0591      	lsls	r1, r2, #22
 80092ae:	f57f af1b 	bpl.w	80090e8 <_scanf_float+0x60>
 80092b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80092b6:	6022      	str	r2, [r4, #0]
 80092b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80092bc:	e7a8      	b.n	8009210 <_scanf_float+0x188>
 80092be:	6822      	ldr	r2, [r4, #0]
 80092c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80092c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80092c8:	d006      	beq.n	80092d8 <_scanf_float+0x250>
 80092ca:	0550      	lsls	r0, r2, #21
 80092cc:	f57f af0c 	bpl.w	80090e8 <_scanf_float+0x60>
 80092d0:	f1b9 0f00 	cmp.w	r9, #0
 80092d4:	f43f af0f 	beq.w	80090f6 <_scanf_float+0x6e>
 80092d8:	0591      	lsls	r1, r2, #22
 80092da:	bf58      	it	pl
 80092dc:	9901      	ldrpl	r1, [sp, #4]
 80092de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80092e2:	bf58      	it	pl
 80092e4:	eba9 0101 	subpl.w	r1, r9, r1
 80092e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80092ec:	bf58      	it	pl
 80092ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80092f2:	6022      	str	r2, [r4, #0]
 80092f4:	f04f 0900 	mov.w	r9, #0
 80092f8:	e78a      	b.n	8009210 <_scanf_float+0x188>
 80092fa:	f04f 0a03 	mov.w	sl, #3
 80092fe:	e787      	b.n	8009210 <_scanf_float+0x188>
 8009300:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009304:	4639      	mov	r1, r7
 8009306:	4640      	mov	r0, r8
 8009308:	4798      	blx	r3
 800930a:	2800      	cmp	r0, #0
 800930c:	f43f aedf 	beq.w	80090ce <_scanf_float+0x46>
 8009310:	e6ea      	b.n	80090e8 <_scanf_float+0x60>
 8009312:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009316:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800931a:	463a      	mov	r2, r7
 800931c:	4640      	mov	r0, r8
 800931e:	4798      	blx	r3
 8009320:	6923      	ldr	r3, [r4, #16]
 8009322:	3b01      	subs	r3, #1
 8009324:	6123      	str	r3, [r4, #16]
 8009326:	e6ec      	b.n	8009102 <_scanf_float+0x7a>
 8009328:	1e6b      	subs	r3, r5, #1
 800932a:	2b06      	cmp	r3, #6
 800932c:	d825      	bhi.n	800937a <_scanf_float+0x2f2>
 800932e:	2d02      	cmp	r5, #2
 8009330:	d836      	bhi.n	80093a0 <_scanf_float+0x318>
 8009332:	455e      	cmp	r6, fp
 8009334:	f67f aee8 	bls.w	8009108 <_scanf_float+0x80>
 8009338:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800933c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009340:	463a      	mov	r2, r7
 8009342:	4640      	mov	r0, r8
 8009344:	4798      	blx	r3
 8009346:	6923      	ldr	r3, [r4, #16]
 8009348:	3b01      	subs	r3, #1
 800934a:	6123      	str	r3, [r4, #16]
 800934c:	e7f1      	b.n	8009332 <_scanf_float+0x2aa>
 800934e:	9802      	ldr	r0, [sp, #8]
 8009350:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009354:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009358:	9002      	str	r0, [sp, #8]
 800935a:	463a      	mov	r2, r7
 800935c:	4640      	mov	r0, r8
 800935e:	4798      	blx	r3
 8009360:	6923      	ldr	r3, [r4, #16]
 8009362:	3b01      	subs	r3, #1
 8009364:	6123      	str	r3, [r4, #16]
 8009366:	f10a 3aff 	add.w	sl, sl, #4294967295
 800936a:	fa5f fa8a 	uxtb.w	sl, sl
 800936e:	f1ba 0f02 	cmp.w	sl, #2
 8009372:	d1ec      	bne.n	800934e <_scanf_float+0x2c6>
 8009374:	3d03      	subs	r5, #3
 8009376:	b2ed      	uxtb	r5, r5
 8009378:	1b76      	subs	r6, r6, r5
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	05da      	lsls	r2, r3, #23
 800937e:	d52f      	bpl.n	80093e0 <_scanf_float+0x358>
 8009380:	055b      	lsls	r3, r3, #21
 8009382:	d510      	bpl.n	80093a6 <_scanf_float+0x31e>
 8009384:	455e      	cmp	r6, fp
 8009386:	f67f aebf 	bls.w	8009108 <_scanf_float+0x80>
 800938a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800938e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009392:	463a      	mov	r2, r7
 8009394:	4640      	mov	r0, r8
 8009396:	4798      	blx	r3
 8009398:	6923      	ldr	r3, [r4, #16]
 800939a:	3b01      	subs	r3, #1
 800939c:	6123      	str	r3, [r4, #16]
 800939e:	e7f1      	b.n	8009384 <_scanf_float+0x2fc>
 80093a0:	46aa      	mov	sl, r5
 80093a2:	9602      	str	r6, [sp, #8]
 80093a4:	e7df      	b.n	8009366 <_scanf_float+0x2de>
 80093a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80093aa:	6923      	ldr	r3, [r4, #16]
 80093ac:	2965      	cmp	r1, #101	; 0x65
 80093ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80093b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80093b6:	6123      	str	r3, [r4, #16]
 80093b8:	d00c      	beq.n	80093d4 <_scanf_float+0x34c>
 80093ba:	2945      	cmp	r1, #69	; 0x45
 80093bc:	d00a      	beq.n	80093d4 <_scanf_float+0x34c>
 80093be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093c2:	463a      	mov	r2, r7
 80093c4:	4640      	mov	r0, r8
 80093c6:	4798      	blx	r3
 80093c8:	6923      	ldr	r3, [r4, #16]
 80093ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80093ce:	3b01      	subs	r3, #1
 80093d0:	1eb5      	subs	r5, r6, #2
 80093d2:	6123      	str	r3, [r4, #16]
 80093d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093d8:	463a      	mov	r2, r7
 80093da:	4640      	mov	r0, r8
 80093dc:	4798      	blx	r3
 80093de:	462e      	mov	r6, r5
 80093e0:	6825      	ldr	r5, [r4, #0]
 80093e2:	f015 0510 	ands.w	r5, r5, #16
 80093e6:	d158      	bne.n	800949a <_scanf_float+0x412>
 80093e8:	7035      	strb	r5, [r6, #0]
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80093f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093f4:	d11c      	bne.n	8009430 <_scanf_float+0x3a8>
 80093f6:	9b01      	ldr	r3, [sp, #4]
 80093f8:	454b      	cmp	r3, r9
 80093fa:	eba3 0209 	sub.w	r2, r3, r9
 80093fe:	d124      	bne.n	800944a <_scanf_float+0x3c2>
 8009400:	2200      	movs	r2, #0
 8009402:	4659      	mov	r1, fp
 8009404:	4640      	mov	r0, r8
 8009406:	f002 fc6b 	bl	800bce0 <_strtod_r>
 800940a:	9b03      	ldr	r3, [sp, #12]
 800940c:	6821      	ldr	r1, [r4, #0]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f011 0f02 	tst.w	r1, #2
 8009414:	ec57 6b10 	vmov	r6, r7, d0
 8009418:	f103 0204 	add.w	r2, r3, #4
 800941c:	d020      	beq.n	8009460 <_scanf_float+0x3d8>
 800941e:	9903      	ldr	r1, [sp, #12]
 8009420:	600a      	str	r2, [r1, #0]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	e9c3 6700 	strd	r6, r7, [r3]
 8009428:	68e3      	ldr	r3, [r4, #12]
 800942a:	3301      	adds	r3, #1
 800942c:	60e3      	str	r3, [r4, #12]
 800942e:	e66c      	b.n	800910a <_scanf_float+0x82>
 8009430:	9b04      	ldr	r3, [sp, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d0e4      	beq.n	8009400 <_scanf_float+0x378>
 8009436:	9905      	ldr	r1, [sp, #20]
 8009438:	230a      	movs	r3, #10
 800943a:	462a      	mov	r2, r5
 800943c:	3101      	adds	r1, #1
 800943e:	4640      	mov	r0, r8
 8009440:	f002 fcd6 	bl	800bdf0 <_strtol_r>
 8009444:	9b04      	ldr	r3, [sp, #16]
 8009446:	9e05      	ldr	r6, [sp, #20]
 8009448:	1ac2      	subs	r2, r0, r3
 800944a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800944e:	429e      	cmp	r6, r3
 8009450:	bf28      	it	cs
 8009452:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009456:	4912      	ldr	r1, [pc, #72]	; (80094a0 <_scanf_float+0x418>)
 8009458:	4630      	mov	r0, r6
 800945a:	f000 f8e7 	bl	800962c <siprintf>
 800945e:	e7cf      	b.n	8009400 <_scanf_float+0x378>
 8009460:	f011 0f04 	tst.w	r1, #4
 8009464:	9903      	ldr	r1, [sp, #12]
 8009466:	600a      	str	r2, [r1, #0]
 8009468:	d1db      	bne.n	8009422 <_scanf_float+0x39a>
 800946a:	f8d3 8000 	ldr.w	r8, [r3]
 800946e:	ee10 2a10 	vmov	r2, s0
 8009472:	ee10 0a10 	vmov	r0, s0
 8009476:	463b      	mov	r3, r7
 8009478:	4639      	mov	r1, r7
 800947a:	f7f7 fb77 	bl	8000b6c <__aeabi_dcmpun>
 800947e:	b128      	cbz	r0, 800948c <_scanf_float+0x404>
 8009480:	4808      	ldr	r0, [pc, #32]	; (80094a4 <_scanf_float+0x41c>)
 8009482:	f000 f9f3 	bl	800986c <nanf>
 8009486:	ed88 0a00 	vstr	s0, [r8]
 800948a:	e7cd      	b.n	8009428 <_scanf_float+0x3a0>
 800948c:	4630      	mov	r0, r6
 800948e:	4639      	mov	r1, r7
 8009490:	f7f7 fbca 	bl	8000c28 <__aeabi_d2f>
 8009494:	f8c8 0000 	str.w	r0, [r8]
 8009498:	e7c6      	b.n	8009428 <_scanf_float+0x3a0>
 800949a:	2500      	movs	r5, #0
 800949c:	e635      	b.n	800910a <_scanf_float+0x82>
 800949e:	bf00      	nop
 80094a0:	0800d90a 	.word	0x0800d90a
 80094a4:	0800dcb8 	.word	0x0800dcb8

080094a8 <std>:
 80094a8:	2300      	movs	r3, #0
 80094aa:	b510      	push	{r4, lr}
 80094ac:	4604      	mov	r4, r0
 80094ae:	e9c0 3300 	strd	r3, r3, [r0]
 80094b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094b6:	6083      	str	r3, [r0, #8]
 80094b8:	8181      	strh	r1, [r0, #12]
 80094ba:	6643      	str	r3, [r0, #100]	; 0x64
 80094bc:	81c2      	strh	r2, [r0, #14]
 80094be:	6183      	str	r3, [r0, #24]
 80094c0:	4619      	mov	r1, r3
 80094c2:	2208      	movs	r2, #8
 80094c4:	305c      	adds	r0, #92	; 0x5c
 80094c6:	f000 f942 	bl	800974e <memset>
 80094ca:	4b0d      	ldr	r3, [pc, #52]	; (8009500 <std+0x58>)
 80094cc:	6263      	str	r3, [r4, #36]	; 0x24
 80094ce:	4b0d      	ldr	r3, [pc, #52]	; (8009504 <std+0x5c>)
 80094d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80094d2:	4b0d      	ldr	r3, [pc, #52]	; (8009508 <std+0x60>)
 80094d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094d6:	4b0d      	ldr	r3, [pc, #52]	; (800950c <std+0x64>)
 80094d8:	6323      	str	r3, [r4, #48]	; 0x30
 80094da:	4b0d      	ldr	r3, [pc, #52]	; (8009510 <std+0x68>)
 80094dc:	6224      	str	r4, [r4, #32]
 80094de:	429c      	cmp	r4, r3
 80094e0:	d006      	beq.n	80094f0 <std+0x48>
 80094e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80094e6:	4294      	cmp	r4, r2
 80094e8:	d002      	beq.n	80094f0 <std+0x48>
 80094ea:	33d0      	adds	r3, #208	; 0xd0
 80094ec:	429c      	cmp	r4, r3
 80094ee:	d105      	bne.n	80094fc <std+0x54>
 80094f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094f8:	f000 b9a6 	b.w	8009848 <__retarget_lock_init_recursive>
 80094fc:	bd10      	pop	{r4, pc}
 80094fe:	bf00      	nop
 8009500:	080096c5 	.word	0x080096c5
 8009504:	080096eb 	.word	0x080096eb
 8009508:	08009723 	.word	0x08009723
 800950c:	08009747 	.word	0x08009747
 8009510:	20000bf4 	.word	0x20000bf4

08009514 <stdio_exit_handler>:
 8009514:	4a02      	ldr	r2, [pc, #8]	; (8009520 <stdio_exit_handler+0xc>)
 8009516:	4903      	ldr	r1, [pc, #12]	; (8009524 <stdio_exit_handler+0x10>)
 8009518:	4803      	ldr	r0, [pc, #12]	; (8009528 <stdio_exit_handler+0x14>)
 800951a:	f000 b869 	b.w	80095f0 <_fwalk_sglue>
 800951e:	bf00      	nop
 8009520:	20000020 	.word	0x20000020
 8009524:	0800c7f1 	.word	0x0800c7f1
 8009528:	2000002c 	.word	0x2000002c

0800952c <cleanup_stdio>:
 800952c:	6841      	ldr	r1, [r0, #4]
 800952e:	4b0c      	ldr	r3, [pc, #48]	; (8009560 <cleanup_stdio+0x34>)
 8009530:	4299      	cmp	r1, r3
 8009532:	b510      	push	{r4, lr}
 8009534:	4604      	mov	r4, r0
 8009536:	d001      	beq.n	800953c <cleanup_stdio+0x10>
 8009538:	f003 f95a 	bl	800c7f0 <_fflush_r>
 800953c:	68a1      	ldr	r1, [r4, #8]
 800953e:	4b09      	ldr	r3, [pc, #36]	; (8009564 <cleanup_stdio+0x38>)
 8009540:	4299      	cmp	r1, r3
 8009542:	d002      	beq.n	800954a <cleanup_stdio+0x1e>
 8009544:	4620      	mov	r0, r4
 8009546:	f003 f953 	bl	800c7f0 <_fflush_r>
 800954a:	68e1      	ldr	r1, [r4, #12]
 800954c:	4b06      	ldr	r3, [pc, #24]	; (8009568 <cleanup_stdio+0x3c>)
 800954e:	4299      	cmp	r1, r3
 8009550:	d004      	beq.n	800955c <cleanup_stdio+0x30>
 8009552:	4620      	mov	r0, r4
 8009554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009558:	f003 b94a 	b.w	800c7f0 <_fflush_r>
 800955c:	bd10      	pop	{r4, pc}
 800955e:	bf00      	nop
 8009560:	20000bf4 	.word	0x20000bf4
 8009564:	20000c5c 	.word	0x20000c5c
 8009568:	20000cc4 	.word	0x20000cc4

0800956c <global_stdio_init.part.0>:
 800956c:	b510      	push	{r4, lr}
 800956e:	4b0b      	ldr	r3, [pc, #44]	; (800959c <global_stdio_init.part.0+0x30>)
 8009570:	4c0b      	ldr	r4, [pc, #44]	; (80095a0 <global_stdio_init.part.0+0x34>)
 8009572:	4a0c      	ldr	r2, [pc, #48]	; (80095a4 <global_stdio_init.part.0+0x38>)
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	4620      	mov	r0, r4
 8009578:	2200      	movs	r2, #0
 800957a:	2104      	movs	r1, #4
 800957c:	f7ff ff94 	bl	80094a8 <std>
 8009580:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009584:	2201      	movs	r2, #1
 8009586:	2109      	movs	r1, #9
 8009588:	f7ff ff8e 	bl	80094a8 <std>
 800958c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009590:	2202      	movs	r2, #2
 8009592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009596:	2112      	movs	r1, #18
 8009598:	f7ff bf86 	b.w	80094a8 <std>
 800959c:	20000d2c 	.word	0x20000d2c
 80095a0:	20000bf4 	.word	0x20000bf4
 80095a4:	08009515 	.word	0x08009515

080095a8 <__sfp_lock_acquire>:
 80095a8:	4801      	ldr	r0, [pc, #4]	; (80095b0 <__sfp_lock_acquire+0x8>)
 80095aa:	f000 b94e 	b.w	800984a <__retarget_lock_acquire_recursive>
 80095ae:	bf00      	nop
 80095b0:	20000d35 	.word	0x20000d35

080095b4 <__sfp_lock_release>:
 80095b4:	4801      	ldr	r0, [pc, #4]	; (80095bc <__sfp_lock_release+0x8>)
 80095b6:	f000 b949 	b.w	800984c <__retarget_lock_release_recursive>
 80095ba:	bf00      	nop
 80095bc:	20000d35 	.word	0x20000d35

080095c0 <__sinit>:
 80095c0:	b510      	push	{r4, lr}
 80095c2:	4604      	mov	r4, r0
 80095c4:	f7ff fff0 	bl	80095a8 <__sfp_lock_acquire>
 80095c8:	6a23      	ldr	r3, [r4, #32]
 80095ca:	b11b      	cbz	r3, 80095d4 <__sinit+0x14>
 80095cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095d0:	f7ff bff0 	b.w	80095b4 <__sfp_lock_release>
 80095d4:	4b04      	ldr	r3, [pc, #16]	; (80095e8 <__sinit+0x28>)
 80095d6:	6223      	str	r3, [r4, #32]
 80095d8:	4b04      	ldr	r3, [pc, #16]	; (80095ec <__sinit+0x2c>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1f5      	bne.n	80095cc <__sinit+0xc>
 80095e0:	f7ff ffc4 	bl	800956c <global_stdio_init.part.0>
 80095e4:	e7f2      	b.n	80095cc <__sinit+0xc>
 80095e6:	bf00      	nop
 80095e8:	0800952d 	.word	0x0800952d
 80095ec:	20000d2c 	.word	0x20000d2c

080095f0 <_fwalk_sglue>:
 80095f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095f4:	4607      	mov	r7, r0
 80095f6:	4688      	mov	r8, r1
 80095f8:	4614      	mov	r4, r2
 80095fa:	2600      	movs	r6, #0
 80095fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009600:	f1b9 0901 	subs.w	r9, r9, #1
 8009604:	d505      	bpl.n	8009612 <_fwalk_sglue+0x22>
 8009606:	6824      	ldr	r4, [r4, #0]
 8009608:	2c00      	cmp	r4, #0
 800960a:	d1f7      	bne.n	80095fc <_fwalk_sglue+0xc>
 800960c:	4630      	mov	r0, r6
 800960e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009612:	89ab      	ldrh	r3, [r5, #12]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d907      	bls.n	8009628 <_fwalk_sglue+0x38>
 8009618:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800961c:	3301      	adds	r3, #1
 800961e:	d003      	beq.n	8009628 <_fwalk_sglue+0x38>
 8009620:	4629      	mov	r1, r5
 8009622:	4638      	mov	r0, r7
 8009624:	47c0      	blx	r8
 8009626:	4306      	orrs	r6, r0
 8009628:	3568      	adds	r5, #104	; 0x68
 800962a:	e7e9      	b.n	8009600 <_fwalk_sglue+0x10>

0800962c <siprintf>:
 800962c:	b40e      	push	{r1, r2, r3}
 800962e:	b500      	push	{lr}
 8009630:	b09c      	sub	sp, #112	; 0x70
 8009632:	ab1d      	add	r3, sp, #116	; 0x74
 8009634:	9002      	str	r0, [sp, #8]
 8009636:	9006      	str	r0, [sp, #24]
 8009638:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800963c:	4809      	ldr	r0, [pc, #36]	; (8009664 <siprintf+0x38>)
 800963e:	9107      	str	r1, [sp, #28]
 8009640:	9104      	str	r1, [sp, #16]
 8009642:	4909      	ldr	r1, [pc, #36]	; (8009668 <siprintf+0x3c>)
 8009644:	f853 2b04 	ldr.w	r2, [r3], #4
 8009648:	9105      	str	r1, [sp, #20]
 800964a:	6800      	ldr	r0, [r0, #0]
 800964c:	9301      	str	r3, [sp, #4]
 800964e:	a902      	add	r1, sp, #8
 8009650:	f002 fc2a 	bl	800bea8 <_svfiprintf_r>
 8009654:	9b02      	ldr	r3, [sp, #8]
 8009656:	2200      	movs	r2, #0
 8009658:	701a      	strb	r2, [r3, #0]
 800965a:	b01c      	add	sp, #112	; 0x70
 800965c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009660:	b003      	add	sp, #12
 8009662:	4770      	bx	lr
 8009664:	20000078 	.word	0x20000078
 8009668:	ffff0208 	.word	0xffff0208

0800966c <siscanf>:
 800966c:	b40e      	push	{r1, r2, r3}
 800966e:	b510      	push	{r4, lr}
 8009670:	b09f      	sub	sp, #124	; 0x7c
 8009672:	ac21      	add	r4, sp, #132	; 0x84
 8009674:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009678:	f854 2b04 	ldr.w	r2, [r4], #4
 800967c:	9201      	str	r2, [sp, #4]
 800967e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009682:	9004      	str	r0, [sp, #16]
 8009684:	9008      	str	r0, [sp, #32]
 8009686:	f7f6 fe13 	bl	80002b0 <strlen>
 800968a:	4b0c      	ldr	r3, [pc, #48]	; (80096bc <siscanf+0x50>)
 800968c:	9005      	str	r0, [sp, #20]
 800968e:	9009      	str	r0, [sp, #36]	; 0x24
 8009690:	930d      	str	r3, [sp, #52]	; 0x34
 8009692:	480b      	ldr	r0, [pc, #44]	; (80096c0 <siscanf+0x54>)
 8009694:	9a01      	ldr	r2, [sp, #4]
 8009696:	6800      	ldr	r0, [r0, #0]
 8009698:	9403      	str	r4, [sp, #12]
 800969a:	2300      	movs	r3, #0
 800969c:	9311      	str	r3, [sp, #68]	; 0x44
 800969e:	9316      	str	r3, [sp, #88]	; 0x58
 80096a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80096a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80096a8:	a904      	add	r1, sp, #16
 80096aa:	4623      	mov	r3, r4
 80096ac:	f002 fd54 	bl	800c158 <__ssvfiscanf_r>
 80096b0:	b01f      	add	sp, #124	; 0x7c
 80096b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096b6:	b003      	add	sp, #12
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	080096e7 	.word	0x080096e7
 80096c0:	20000078 	.word	0x20000078

080096c4 <__sread>:
 80096c4:	b510      	push	{r4, lr}
 80096c6:	460c      	mov	r4, r1
 80096c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096cc:	f000 f86e 	bl	80097ac <_read_r>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	bfab      	itete	ge
 80096d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096d6:	89a3      	ldrhlt	r3, [r4, #12]
 80096d8:	181b      	addge	r3, r3, r0
 80096da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096de:	bfac      	ite	ge
 80096e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80096e2:	81a3      	strhlt	r3, [r4, #12]
 80096e4:	bd10      	pop	{r4, pc}

080096e6 <__seofread>:
 80096e6:	2000      	movs	r0, #0
 80096e8:	4770      	bx	lr

080096ea <__swrite>:
 80096ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ee:	461f      	mov	r7, r3
 80096f0:	898b      	ldrh	r3, [r1, #12]
 80096f2:	05db      	lsls	r3, r3, #23
 80096f4:	4605      	mov	r5, r0
 80096f6:	460c      	mov	r4, r1
 80096f8:	4616      	mov	r6, r2
 80096fa:	d505      	bpl.n	8009708 <__swrite+0x1e>
 80096fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009700:	2302      	movs	r3, #2
 8009702:	2200      	movs	r2, #0
 8009704:	f000 f840 	bl	8009788 <_lseek_r>
 8009708:	89a3      	ldrh	r3, [r4, #12]
 800970a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800970e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009712:	81a3      	strh	r3, [r4, #12]
 8009714:	4632      	mov	r2, r6
 8009716:	463b      	mov	r3, r7
 8009718:	4628      	mov	r0, r5
 800971a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800971e:	f000 b857 	b.w	80097d0 <_write_r>

08009722 <__sseek>:
 8009722:	b510      	push	{r4, lr}
 8009724:	460c      	mov	r4, r1
 8009726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800972a:	f000 f82d 	bl	8009788 <_lseek_r>
 800972e:	1c43      	adds	r3, r0, #1
 8009730:	89a3      	ldrh	r3, [r4, #12]
 8009732:	bf15      	itete	ne
 8009734:	6560      	strne	r0, [r4, #84]	; 0x54
 8009736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800973a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800973e:	81a3      	strheq	r3, [r4, #12]
 8009740:	bf18      	it	ne
 8009742:	81a3      	strhne	r3, [r4, #12]
 8009744:	bd10      	pop	{r4, pc}

08009746 <__sclose>:
 8009746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800974a:	f000 b80d 	b.w	8009768 <_close_r>

0800974e <memset>:
 800974e:	4402      	add	r2, r0
 8009750:	4603      	mov	r3, r0
 8009752:	4293      	cmp	r3, r2
 8009754:	d100      	bne.n	8009758 <memset+0xa>
 8009756:	4770      	bx	lr
 8009758:	f803 1b01 	strb.w	r1, [r3], #1
 800975c:	e7f9      	b.n	8009752 <memset+0x4>
	...

08009760 <_localeconv_r>:
 8009760:	4800      	ldr	r0, [pc, #0]	; (8009764 <_localeconv_r+0x4>)
 8009762:	4770      	bx	lr
 8009764:	2000016c 	.word	0x2000016c

08009768 <_close_r>:
 8009768:	b538      	push	{r3, r4, r5, lr}
 800976a:	4d06      	ldr	r5, [pc, #24]	; (8009784 <_close_r+0x1c>)
 800976c:	2300      	movs	r3, #0
 800976e:	4604      	mov	r4, r0
 8009770:	4608      	mov	r0, r1
 8009772:	602b      	str	r3, [r5, #0]
 8009774:	f7f9 fadb 	bl	8002d2e <_close>
 8009778:	1c43      	adds	r3, r0, #1
 800977a:	d102      	bne.n	8009782 <_close_r+0x1a>
 800977c:	682b      	ldr	r3, [r5, #0]
 800977e:	b103      	cbz	r3, 8009782 <_close_r+0x1a>
 8009780:	6023      	str	r3, [r4, #0]
 8009782:	bd38      	pop	{r3, r4, r5, pc}
 8009784:	20000d30 	.word	0x20000d30

08009788 <_lseek_r>:
 8009788:	b538      	push	{r3, r4, r5, lr}
 800978a:	4d07      	ldr	r5, [pc, #28]	; (80097a8 <_lseek_r+0x20>)
 800978c:	4604      	mov	r4, r0
 800978e:	4608      	mov	r0, r1
 8009790:	4611      	mov	r1, r2
 8009792:	2200      	movs	r2, #0
 8009794:	602a      	str	r2, [r5, #0]
 8009796:	461a      	mov	r2, r3
 8009798:	f7f9 faf0 	bl	8002d7c <_lseek>
 800979c:	1c43      	adds	r3, r0, #1
 800979e:	d102      	bne.n	80097a6 <_lseek_r+0x1e>
 80097a0:	682b      	ldr	r3, [r5, #0]
 80097a2:	b103      	cbz	r3, 80097a6 <_lseek_r+0x1e>
 80097a4:	6023      	str	r3, [r4, #0]
 80097a6:	bd38      	pop	{r3, r4, r5, pc}
 80097a8:	20000d30 	.word	0x20000d30

080097ac <_read_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	4d07      	ldr	r5, [pc, #28]	; (80097cc <_read_r+0x20>)
 80097b0:	4604      	mov	r4, r0
 80097b2:	4608      	mov	r0, r1
 80097b4:	4611      	mov	r1, r2
 80097b6:	2200      	movs	r2, #0
 80097b8:	602a      	str	r2, [r5, #0]
 80097ba:	461a      	mov	r2, r3
 80097bc:	f7f9 fa7e 	bl	8002cbc <_read>
 80097c0:	1c43      	adds	r3, r0, #1
 80097c2:	d102      	bne.n	80097ca <_read_r+0x1e>
 80097c4:	682b      	ldr	r3, [r5, #0]
 80097c6:	b103      	cbz	r3, 80097ca <_read_r+0x1e>
 80097c8:	6023      	str	r3, [r4, #0]
 80097ca:	bd38      	pop	{r3, r4, r5, pc}
 80097cc:	20000d30 	.word	0x20000d30

080097d0 <_write_r>:
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	4d07      	ldr	r5, [pc, #28]	; (80097f0 <_write_r+0x20>)
 80097d4:	4604      	mov	r4, r0
 80097d6:	4608      	mov	r0, r1
 80097d8:	4611      	mov	r1, r2
 80097da:	2200      	movs	r2, #0
 80097dc:	602a      	str	r2, [r5, #0]
 80097de:	461a      	mov	r2, r3
 80097e0:	f7f9 fa89 	bl	8002cf6 <_write>
 80097e4:	1c43      	adds	r3, r0, #1
 80097e6:	d102      	bne.n	80097ee <_write_r+0x1e>
 80097e8:	682b      	ldr	r3, [r5, #0]
 80097ea:	b103      	cbz	r3, 80097ee <_write_r+0x1e>
 80097ec:	6023      	str	r3, [r4, #0]
 80097ee:	bd38      	pop	{r3, r4, r5, pc}
 80097f0:	20000d30 	.word	0x20000d30

080097f4 <__errno>:
 80097f4:	4b01      	ldr	r3, [pc, #4]	; (80097fc <__errno+0x8>)
 80097f6:	6818      	ldr	r0, [r3, #0]
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	20000078 	.word	0x20000078

08009800 <__libc_init_array>:
 8009800:	b570      	push	{r4, r5, r6, lr}
 8009802:	4d0d      	ldr	r5, [pc, #52]	; (8009838 <__libc_init_array+0x38>)
 8009804:	4c0d      	ldr	r4, [pc, #52]	; (800983c <__libc_init_array+0x3c>)
 8009806:	1b64      	subs	r4, r4, r5
 8009808:	10a4      	asrs	r4, r4, #2
 800980a:	2600      	movs	r6, #0
 800980c:	42a6      	cmp	r6, r4
 800980e:	d109      	bne.n	8009824 <__libc_init_array+0x24>
 8009810:	4d0b      	ldr	r5, [pc, #44]	; (8009840 <__libc_init_array+0x40>)
 8009812:	4c0c      	ldr	r4, [pc, #48]	; (8009844 <__libc_init_array+0x44>)
 8009814:	f003 ffdc 	bl	800d7d0 <_init>
 8009818:	1b64      	subs	r4, r4, r5
 800981a:	10a4      	asrs	r4, r4, #2
 800981c:	2600      	movs	r6, #0
 800981e:	42a6      	cmp	r6, r4
 8009820:	d105      	bne.n	800982e <__libc_init_array+0x2e>
 8009822:	bd70      	pop	{r4, r5, r6, pc}
 8009824:	f855 3b04 	ldr.w	r3, [r5], #4
 8009828:	4798      	blx	r3
 800982a:	3601      	adds	r6, #1
 800982c:	e7ee      	b.n	800980c <__libc_init_array+0xc>
 800982e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009832:	4798      	blx	r3
 8009834:	3601      	adds	r6, #1
 8009836:	e7f2      	b.n	800981e <__libc_init_array+0x1e>
 8009838:	0800dd24 	.word	0x0800dd24
 800983c:	0800dd24 	.word	0x0800dd24
 8009840:	0800dd24 	.word	0x0800dd24
 8009844:	0800dd28 	.word	0x0800dd28

08009848 <__retarget_lock_init_recursive>:
 8009848:	4770      	bx	lr

0800984a <__retarget_lock_acquire_recursive>:
 800984a:	4770      	bx	lr

0800984c <__retarget_lock_release_recursive>:
 800984c:	4770      	bx	lr

0800984e <memcpy>:
 800984e:	440a      	add	r2, r1
 8009850:	4291      	cmp	r1, r2
 8009852:	f100 33ff 	add.w	r3, r0, #4294967295
 8009856:	d100      	bne.n	800985a <memcpy+0xc>
 8009858:	4770      	bx	lr
 800985a:	b510      	push	{r4, lr}
 800985c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009860:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009864:	4291      	cmp	r1, r2
 8009866:	d1f9      	bne.n	800985c <memcpy+0xe>
 8009868:	bd10      	pop	{r4, pc}
	...

0800986c <nanf>:
 800986c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009874 <nanf+0x8>
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	7fc00000 	.word	0x7fc00000

08009878 <quorem>:
 8009878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987c:	6903      	ldr	r3, [r0, #16]
 800987e:	690c      	ldr	r4, [r1, #16]
 8009880:	42a3      	cmp	r3, r4
 8009882:	4607      	mov	r7, r0
 8009884:	db7e      	blt.n	8009984 <quorem+0x10c>
 8009886:	3c01      	subs	r4, #1
 8009888:	f101 0814 	add.w	r8, r1, #20
 800988c:	f100 0514 	add.w	r5, r0, #20
 8009890:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009894:	9301      	str	r3, [sp, #4]
 8009896:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800989a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800989e:	3301      	adds	r3, #1
 80098a0:	429a      	cmp	r2, r3
 80098a2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80098a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80098ae:	d331      	bcc.n	8009914 <quorem+0x9c>
 80098b0:	f04f 0e00 	mov.w	lr, #0
 80098b4:	4640      	mov	r0, r8
 80098b6:	46ac      	mov	ip, r5
 80098b8:	46f2      	mov	sl, lr
 80098ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80098be:	b293      	uxth	r3, r2
 80098c0:	fb06 e303 	mla	r3, r6, r3, lr
 80098c4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098c8:	0c1a      	lsrs	r2, r3, #16
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	ebaa 0303 	sub.w	r3, sl, r3
 80098d0:	f8dc a000 	ldr.w	sl, [ip]
 80098d4:	fa13 f38a 	uxtah	r3, r3, sl
 80098d8:	fb06 220e 	mla	r2, r6, lr, r2
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	9b00      	ldr	r3, [sp, #0]
 80098e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098e4:	b292      	uxth	r2, r2
 80098e6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80098ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098ee:	f8bd 3000 	ldrh.w	r3, [sp]
 80098f2:	4581      	cmp	r9, r0
 80098f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098f8:	f84c 3b04 	str.w	r3, [ip], #4
 80098fc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009900:	d2db      	bcs.n	80098ba <quorem+0x42>
 8009902:	f855 300b 	ldr.w	r3, [r5, fp]
 8009906:	b92b      	cbnz	r3, 8009914 <quorem+0x9c>
 8009908:	9b01      	ldr	r3, [sp, #4]
 800990a:	3b04      	subs	r3, #4
 800990c:	429d      	cmp	r5, r3
 800990e:	461a      	mov	r2, r3
 8009910:	d32c      	bcc.n	800996c <quorem+0xf4>
 8009912:	613c      	str	r4, [r7, #16]
 8009914:	4638      	mov	r0, r7
 8009916:	f001 f9ef 	bl	800acf8 <__mcmp>
 800991a:	2800      	cmp	r0, #0
 800991c:	db22      	blt.n	8009964 <quorem+0xec>
 800991e:	3601      	adds	r6, #1
 8009920:	4629      	mov	r1, r5
 8009922:	2000      	movs	r0, #0
 8009924:	f858 2b04 	ldr.w	r2, [r8], #4
 8009928:	f8d1 c000 	ldr.w	ip, [r1]
 800992c:	b293      	uxth	r3, r2
 800992e:	1ac3      	subs	r3, r0, r3
 8009930:	0c12      	lsrs	r2, r2, #16
 8009932:	fa13 f38c 	uxtah	r3, r3, ip
 8009936:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800993a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800993e:	b29b      	uxth	r3, r3
 8009940:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009944:	45c1      	cmp	r9, r8
 8009946:	f841 3b04 	str.w	r3, [r1], #4
 800994a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800994e:	d2e9      	bcs.n	8009924 <quorem+0xac>
 8009950:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009954:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009958:	b922      	cbnz	r2, 8009964 <quorem+0xec>
 800995a:	3b04      	subs	r3, #4
 800995c:	429d      	cmp	r5, r3
 800995e:	461a      	mov	r2, r3
 8009960:	d30a      	bcc.n	8009978 <quorem+0x100>
 8009962:	613c      	str	r4, [r7, #16]
 8009964:	4630      	mov	r0, r6
 8009966:	b003      	add	sp, #12
 8009968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800996c:	6812      	ldr	r2, [r2, #0]
 800996e:	3b04      	subs	r3, #4
 8009970:	2a00      	cmp	r2, #0
 8009972:	d1ce      	bne.n	8009912 <quorem+0x9a>
 8009974:	3c01      	subs	r4, #1
 8009976:	e7c9      	b.n	800990c <quorem+0x94>
 8009978:	6812      	ldr	r2, [r2, #0]
 800997a:	3b04      	subs	r3, #4
 800997c:	2a00      	cmp	r2, #0
 800997e:	d1f0      	bne.n	8009962 <quorem+0xea>
 8009980:	3c01      	subs	r4, #1
 8009982:	e7eb      	b.n	800995c <quorem+0xe4>
 8009984:	2000      	movs	r0, #0
 8009986:	e7ee      	b.n	8009966 <quorem+0xee>

08009988 <_dtoa_r>:
 8009988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800998c:	ed2d 8b04 	vpush	{d8-d9}
 8009990:	69c5      	ldr	r5, [r0, #28]
 8009992:	b093      	sub	sp, #76	; 0x4c
 8009994:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009998:	ec57 6b10 	vmov	r6, r7, d0
 800999c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80099a0:	9107      	str	r1, [sp, #28]
 80099a2:	4604      	mov	r4, r0
 80099a4:	920a      	str	r2, [sp, #40]	; 0x28
 80099a6:	930d      	str	r3, [sp, #52]	; 0x34
 80099a8:	b975      	cbnz	r5, 80099c8 <_dtoa_r+0x40>
 80099aa:	2010      	movs	r0, #16
 80099ac:	f000 fe2a 	bl	800a604 <malloc>
 80099b0:	4602      	mov	r2, r0
 80099b2:	61e0      	str	r0, [r4, #28]
 80099b4:	b920      	cbnz	r0, 80099c0 <_dtoa_r+0x38>
 80099b6:	4bae      	ldr	r3, [pc, #696]	; (8009c70 <_dtoa_r+0x2e8>)
 80099b8:	21ef      	movs	r1, #239	; 0xef
 80099ba:	48ae      	ldr	r0, [pc, #696]	; (8009c74 <_dtoa_r+0x2ec>)
 80099bc:	f002 fff8 	bl	800c9b0 <__assert_func>
 80099c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80099c4:	6005      	str	r5, [r0, #0]
 80099c6:	60c5      	str	r5, [r0, #12]
 80099c8:	69e3      	ldr	r3, [r4, #28]
 80099ca:	6819      	ldr	r1, [r3, #0]
 80099cc:	b151      	cbz	r1, 80099e4 <_dtoa_r+0x5c>
 80099ce:	685a      	ldr	r2, [r3, #4]
 80099d0:	604a      	str	r2, [r1, #4]
 80099d2:	2301      	movs	r3, #1
 80099d4:	4093      	lsls	r3, r2
 80099d6:	608b      	str	r3, [r1, #8]
 80099d8:	4620      	mov	r0, r4
 80099da:	f000 ff07 	bl	800a7ec <_Bfree>
 80099de:	69e3      	ldr	r3, [r4, #28]
 80099e0:	2200      	movs	r2, #0
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	1e3b      	subs	r3, r7, #0
 80099e6:	bfbb      	ittet	lt
 80099e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80099ec:	9303      	strlt	r3, [sp, #12]
 80099ee:	2300      	movge	r3, #0
 80099f0:	2201      	movlt	r2, #1
 80099f2:	bfac      	ite	ge
 80099f4:	f8c8 3000 	strge.w	r3, [r8]
 80099f8:	f8c8 2000 	strlt.w	r2, [r8]
 80099fc:	4b9e      	ldr	r3, [pc, #632]	; (8009c78 <_dtoa_r+0x2f0>)
 80099fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009a02:	ea33 0308 	bics.w	r3, r3, r8
 8009a06:	d11b      	bne.n	8009a40 <_dtoa_r+0xb8>
 8009a08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a0e:	6013      	str	r3, [r2, #0]
 8009a10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009a14:	4333      	orrs	r3, r6
 8009a16:	f000 8593 	beq.w	800a540 <_dtoa_r+0xbb8>
 8009a1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a1c:	b963      	cbnz	r3, 8009a38 <_dtoa_r+0xb0>
 8009a1e:	4b97      	ldr	r3, [pc, #604]	; (8009c7c <_dtoa_r+0x2f4>)
 8009a20:	e027      	b.n	8009a72 <_dtoa_r+0xea>
 8009a22:	4b97      	ldr	r3, [pc, #604]	; (8009c80 <_dtoa_r+0x2f8>)
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	3308      	adds	r3, #8
 8009a28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a2a:	6013      	str	r3, [r2, #0]
 8009a2c:	9800      	ldr	r0, [sp, #0]
 8009a2e:	b013      	add	sp, #76	; 0x4c
 8009a30:	ecbd 8b04 	vpop	{d8-d9}
 8009a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a38:	4b90      	ldr	r3, [pc, #576]	; (8009c7c <_dtoa_r+0x2f4>)
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	3303      	adds	r3, #3
 8009a3e:	e7f3      	b.n	8009a28 <_dtoa_r+0xa0>
 8009a40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a44:	2200      	movs	r2, #0
 8009a46:	ec51 0b17 	vmov	r0, r1, d7
 8009a4a:	eeb0 8a47 	vmov.f32	s16, s14
 8009a4e:	eef0 8a67 	vmov.f32	s17, s15
 8009a52:	2300      	movs	r3, #0
 8009a54:	f7f7 f858 	bl	8000b08 <__aeabi_dcmpeq>
 8009a58:	4681      	mov	r9, r0
 8009a5a:	b160      	cbz	r0, 8009a76 <_dtoa_r+0xee>
 8009a5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a5e:	2301      	movs	r3, #1
 8009a60:	6013      	str	r3, [r2, #0]
 8009a62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 8568 	beq.w	800a53a <_dtoa_r+0xbb2>
 8009a6a:	4b86      	ldr	r3, [pc, #536]	; (8009c84 <_dtoa_r+0x2fc>)
 8009a6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a6e:	6013      	str	r3, [r2, #0]
 8009a70:	3b01      	subs	r3, #1
 8009a72:	9300      	str	r3, [sp, #0]
 8009a74:	e7da      	b.n	8009a2c <_dtoa_r+0xa4>
 8009a76:	aa10      	add	r2, sp, #64	; 0x40
 8009a78:	a911      	add	r1, sp, #68	; 0x44
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	eeb0 0a48 	vmov.f32	s0, s16
 8009a80:	eef0 0a68 	vmov.f32	s1, s17
 8009a84:	f001 fa4e 	bl	800af24 <__d2b>
 8009a88:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009a8c:	4682      	mov	sl, r0
 8009a8e:	2d00      	cmp	r5, #0
 8009a90:	d07f      	beq.n	8009b92 <_dtoa_r+0x20a>
 8009a92:	ee18 3a90 	vmov	r3, s17
 8009a96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a9a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009a9e:	ec51 0b18 	vmov	r0, r1, d8
 8009aa2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009aa6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009aaa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009aae:	4619      	mov	r1, r3
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	4b75      	ldr	r3, [pc, #468]	; (8009c88 <_dtoa_r+0x300>)
 8009ab4:	f7f6 fc08 	bl	80002c8 <__aeabi_dsub>
 8009ab8:	a367      	add	r3, pc, #412	; (adr r3, 8009c58 <_dtoa_r+0x2d0>)
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	f7f6 fdbb 	bl	8000638 <__aeabi_dmul>
 8009ac2:	a367      	add	r3, pc, #412	; (adr r3, 8009c60 <_dtoa_r+0x2d8>)
 8009ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac8:	f7f6 fc00 	bl	80002cc <__adddf3>
 8009acc:	4606      	mov	r6, r0
 8009ace:	4628      	mov	r0, r5
 8009ad0:	460f      	mov	r7, r1
 8009ad2:	f7f6 fd47 	bl	8000564 <__aeabi_i2d>
 8009ad6:	a364      	add	r3, pc, #400	; (adr r3, 8009c68 <_dtoa_r+0x2e0>)
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	f7f6 fdac 	bl	8000638 <__aeabi_dmul>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	4639      	mov	r1, r7
 8009ae8:	f7f6 fbf0 	bl	80002cc <__adddf3>
 8009aec:	4606      	mov	r6, r0
 8009aee:	460f      	mov	r7, r1
 8009af0:	f7f7 f852 	bl	8000b98 <__aeabi_d2iz>
 8009af4:	2200      	movs	r2, #0
 8009af6:	4683      	mov	fp, r0
 8009af8:	2300      	movs	r3, #0
 8009afa:	4630      	mov	r0, r6
 8009afc:	4639      	mov	r1, r7
 8009afe:	f7f7 f80d 	bl	8000b1c <__aeabi_dcmplt>
 8009b02:	b148      	cbz	r0, 8009b18 <_dtoa_r+0x190>
 8009b04:	4658      	mov	r0, fp
 8009b06:	f7f6 fd2d 	bl	8000564 <__aeabi_i2d>
 8009b0a:	4632      	mov	r2, r6
 8009b0c:	463b      	mov	r3, r7
 8009b0e:	f7f6 fffb 	bl	8000b08 <__aeabi_dcmpeq>
 8009b12:	b908      	cbnz	r0, 8009b18 <_dtoa_r+0x190>
 8009b14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b18:	f1bb 0f16 	cmp.w	fp, #22
 8009b1c:	d857      	bhi.n	8009bce <_dtoa_r+0x246>
 8009b1e:	4b5b      	ldr	r3, [pc, #364]	; (8009c8c <_dtoa_r+0x304>)
 8009b20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b28:	ec51 0b18 	vmov	r0, r1, d8
 8009b2c:	f7f6 fff6 	bl	8000b1c <__aeabi_dcmplt>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	d04e      	beq.n	8009bd2 <_dtoa_r+0x24a>
 8009b34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b38:	2300      	movs	r3, #0
 8009b3a:	930c      	str	r3, [sp, #48]	; 0x30
 8009b3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b3e:	1b5b      	subs	r3, r3, r5
 8009b40:	1e5a      	subs	r2, r3, #1
 8009b42:	bf45      	ittet	mi
 8009b44:	f1c3 0301 	rsbmi	r3, r3, #1
 8009b48:	9305      	strmi	r3, [sp, #20]
 8009b4a:	2300      	movpl	r3, #0
 8009b4c:	2300      	movmi	r3, #0
 8009b4e:	9206      	str	r2, [sp, #24]
 8009b50:	bf54      	ite	pl
 8009b52:	9305      	strpl	r3, [sp, #20]
 8009b54:	9306      	strmi	r3, [sp, #24]
 8009b56:	f1bb 0f00 	cmp.w	fp, #0
 8009b5a:	db3c      	blt.n	8009bd6 <_dtoa_r+0x24e>
 8009b5c:	9b06      	ldr	r3, [sp, #24]
 8009b5e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009b62:	445b      	add	r3, fp
 8009b64:	9306      	str	r3, [sp, #24]
 8009b66:	2300      	movs	r3, #0
 8009b68:	9308      	str	r3, [sp, #32]
 8009b6a:	9b07      	ldr	r3, [sp, #28]
 8009b6c:	2b09      	cmp	r3, #9
 8009b6e:	d868      	bhi.n	8009c42 <_dtoa_r+0x2ba>
 8009b70:	2b05      	cmp	r3, #5
 8009b72:	bfc4      	itt	gt
 8009b74:	3b04      	subgt	r3, #4
 8009b76:	9307      	strgt	r3, [sp, #28]
 8009b78:	9b07      	ldr	r3, [sp, #28]
 8009b7a:	f1a3 0302 	sub.w	r3, r3, #2
 8009b7e:	bfcc      	ite	gt
 8009b80:	2500      	movgt	r5, #0
 8009b82:	2501      	movle	r5, #1
 8009b84:	2b03      	cmp	r3, #3
 8009b86:	f200 8085 	bhi.w	8009c94 <_dtoa_r+0x30c>
 8009b8a:	e8df f003 	tbb	[pc, r3]
 8009b8e:	3b2e      	.short	0x3b2e
 8009b90:	5839      	.short	0x5839
 8009b92:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009b96:	441d      	add	r5, r3
 8009b98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009b9c:	2b20      	cmp	r3, #32
 8009b9e:	bfc1      	itttt	gt
 8009ba0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009ba4:	fa08 f803 	lslgt.w	r8, r8, r3
 8009ba8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009bac:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009bb0:	bfd6      	itet	le
 8009bb2:	f1c3 0320 	rsble	r3, r3, #32
 8009bb6:	ea48 0003 	orrgt.w	r0, r8, r3
 8009bba:	fa06 f003 	lslle.w	r0, r6, r3
 8009bbe:	f7f6 fcc1 	bl	8000544 <__aeabi_ui2d>
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009bc8:	3d01      	subs	r5, #1
 8009bca:	920e      	str	r2, [sp, #56]	; 0x38
 8009bcc:	e76f      	b.n	8009aae <_dtoa_r+0x126>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e7b3      	b.n	8009b3a <_dtoa_r+0x1b2>
 8009bd2:	900c      	str	r0, [sp, #48]	; 0x30
 8009bd4:	e7b2      	b.n	8009b3c <_dtoa_r+0x1b4>
 8009bd6:	9b05      	ldr	r3, [sp, #20]
 8009bd8:	eba3 030b 	sub.w	r3, r3, fp
 8009bdc:	9305      	str	r3, [sp, #20]
 8009bde:	f1cb 0300 	rsb	r3, fp, #0
 8009be2:	9308      	str	r3, [sp, #32]
 8009be4:	2300      	movs	r3, #0
 8009be6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009be8:	e7bf      	b.n	8009b6a <_dtoa_r+0x1e2>
 8009bea:	2300      	movs	r3, #0
 8009bec:	9309      	str	r3, [sp, #36]	; 0x24
 8009bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	dc52      	bgt.n	8009c9a <_dtoa_r+0x312>
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	9301      	str	r3, [sp, #4]
 8009bf8:	9304      	str	r3, [sp, #16]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	920a      	str	r2, [sp, #40]	; 0x28
 8009bfe:	e00b      	b.n	8009c18 <_dtoa_r+0x290>
 8009c00:	2301      	movs	r3, #1
 8009c02:	e7f3      	b.n	8009bec <_dtoa_r+0x264>
 8009c04:	2300      	movs	r3, #0
 8009c06:	9309      	str	r3, [sp, #36]	; 0x24
 8009c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c0a:	445b      	add	r3, fp
 8009c0c:	9301      	str	r3, [sp, #4]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	9304      	str	r3, [sp, #16]
 8009c14:	bfb8      	it	lt
 8009c16:	2301      	movlt	r3, #1
 8009c18:	69e0      	ldr	r0, [r4, #28]
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	2204      	movs	r2, #4
 8009c1e:	f102 0614 	add.w	r6, r2, #20
 8009c22:	429e      	cmp	r6, r3
 8009c24:	d93d      	bls.n	8009ca2 <_dtoa_r+0x31a>
 8009c26:	6041      	str	r1, [r0, #4]
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f000 fd9f 	bl	800a76c <_Balloc>
 8009c2e:	9000      	str	r0, [sp, #0]
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d139      	bne.n	8009ca8 <_dtoa_r+0x320>
 8009c34:	4b16      	ldr	r3, [pc, #88]	; (8009c90 <_dtoa_r+0x308>)
 8009c36:	4602      	mov	r2, r0
 8009c38:	f240 11af 	movw	r1, #431	; 0x1af
 8009c3c:	e6bd      	b.n	80099ba <_dtoa_r+0x32>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e7e1      	b.n	8009c06 <_dtoa_r+0x27e>
 8009c42:	2501      	movs	r5, #1
 8009c44:	2300      	movs	r3, #0
 8009c46:	9307      	str	r3, [sp, #28]
 8009c48:	9509      	str	r5, [sp, #36]	; 0x24
 8009c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c4e:	9301      	str	r3, [sp, #4]
 8009c50:	9304      	str	r3, [sp, #16]
 8009c52:	2200      	movs	r2, #0
 8009c54:	2312      	movs	r3, #18
 8009c56:	e7d1      	b.n	8009bfc <_dtoa_r+0x274>
 8009c58:	636f4361 	.word	0x636f4361
 8009c5c:	3fd287a7 	.word	0x3fd287a7
 8009c60:	8b60c8b3 	.word	0x8b60c8b3
 8009c64:	3fc68a28 	.word	0x3fc68a28
 8009c68:	509f79fb 	.word	0x509f79fb
 8009c6c:	3fd34413 	.word	0x3fd34413
 8009c70:	0800d91c 	.word	0x0800d91c
 8009c74:	0800d933 	.word	0x0800d933
 8009c78:	7ff00000 	.word	0x7ff00000
 8009c7c:	0800d918 	.word	0x0800d918
 8009c80:	0800d90f 	.word	0x0800d90f
 8009c84:	0800dc71 	.word	0x0800dc71
 8009c88:	3ff80000 	.word	0x3ff80000
 8009c8c:	0800da20 	.word	0x0800da20
 8009c90:	0800d98b 	.word	0x0800d98b
 8009c94:	2301      	movs	r3, #1
 8009c96:	9309      	str	r3, [sp, #36]	; 0x24
 8009c98:	e7d7      	b.n	8009c4a <_dtoa_r+0x2c2>
 8009c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c9c:	9301      	str	r3, [sp, #4]
 8009c9e:	9304      	str	r3, [sp, #16]
 8009ca0:	e7ba      	b.n	8009c18 <_dtoa_r+0x290>
 8009ca2:	3101      	adds	r1, #1
 8009ca4:	0052      	lsls	r2, r2, #1
 8009ca6:	e7ba      	b.n	8009c1e <_dtoa_r+0x296>
 8009ca8:	69e3      	ldr	r3, [r4, #28]
 8009caa:	9a00      	ldr	r2, [sp, #0]
 8009cac:	601a      	str	r2, [r3, #0]
 8009cae:	9b04      	ldr	r3, [sp, #16]
 8009cb0:	2b0e      	cmp	r3, #14
 8009cb2:	f200 80a8 	bhi.w	8009e06 <_dtoa_r+0x47e>
 8009cb6:	2d00      	cmp	r5, #0
 8009cb8:	f000 80a5 	beq.w	8009e06 <_dtoa_r+0x47e>
 8009cbc:	f1bb 0f00 	cmp.w	fp, #0
 8009cc0:	dd38      	ble.n	8009d34 <_dtoa_r+0x3ac>
 8009cc2:	4bc0      	ldr	r3, [pc, #768]	; (8009fc4 <_dtoa_r+0x63c>)
 8009cc4:	f00b 020f 	and.w	r2, fp, #15
 8009cc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ccc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009cd0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009cd4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009cd8:	d019      	beq.n	8009d0e <_dtoa_r+0x386>
 8009cda:	4bbb      	ldr	r3, [pc, #748]	; (8009fc8 <_dtoa_r+0x640>)
 8009cdc:	ec51 0b18 	vmov	r0, r1, d8
 8009ce0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ce4:	f7f6 fdd2 	bl	800088c <__aeabi_ddiv>
 8009ce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cec:	f008 080f 	and.w	r8, r8, #15
 8009cf0:	2503      	movs	r5, #3
 8009cf2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009fc8 <_dtoa_r+0x640>
 8009cf6:	f1b8 0f00 	cmp.w	r8, #0
 8009cfa:	d10a      	bne.n	8009d12 <_dtoa_r+0x38a>
 8009cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d00:	4632      	mov	r2, r6
 8009d02:	463b      	mov	r3, r7
 8009d04:	f7f6 fdc2 	bl	800088c <__aeabi_ddiv>
 8009d08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d0c:	e02b      	b.n	8009d66 <_dtoa_r+0x3de>
 8009d0e:	2502      	movs	r5, #2
 8009d10:	e7ef      	b.n	8009cf2 <_dtoa_r+0x36a>
 8009d12:	f018 0f01 	tst.w	r8, #1
 8009d16:	d008      	beq.n	8009d2a <_dtoa_r+0x3a2>
 8009d18:	4630      	mov	r0, r6
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009d20:	f7f6 fc8a 	bl	8000638 <__aeabi_dmul>
 8009d24:	3501      	adds	r5, #1
 8009d26:	4606      	mov	r6, r0
 8009d28:	460f      	mov	r7, r1
 8009d2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009d2e:	f109 0908 	add.w	r9, r9, #8
 8009d32:	e7e0      	b.n	8009cf6 <_dtoa_r+0x36e>
 8009d34:	f000 809f 	beq.w	8009e76 <_dtoa_r+0x4ee>
 8009d38:	f1cb 0600 	rsb	r6, fp, #0
 8009d3c:	4ba1      	ldr	r3, [pc, #644]	; (8009fc4 <_dtoa_r+0x63c>)
 8009d3e:	4fa2      	ldr	r7, [pc, #648]	; (8009fc8 <_dtoa_r+0x640>)
 8009d40:	f006 020f 	and.w	r2, r6, #15
 8009d44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4c:	ec51 0b18 	vmov	r0, r1, d8
 8009d50:	f7f6 fc72 	bl	8000638 <__aeabi_dmul>
 8009d54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d58:	1136      	asrs	r6, r6, #4
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	2502      	movs	r5, #2
 8009d5e:	2e00      	cmp	r6, #0
 8009d60:	d17e      	bne.n	8009e60 <_dtoa_r+0x4d8>
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1d0      	bne.n	8009d08 <_dtoa_r+0x380>
 8009d66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f000 8084 	beq.w	8009e7a <_dtoa_r+0x4f2>
 8009d72:	4b96      	ldr	r3, [pc, #600]	; (8009fcc <_dtoa_r+0x644>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	4640      	mov	r0, r8
 8009d78:	4649      	mov	r1, r9
 8009d7a:	f7f6 fecf 	bl	8000b1c <__aeabi_dcmplt>
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	d07b      	beq.n	8009e7a <_dtoa_r+0x4f2>
 8009d82:	9b04      	ldr	r3, [sp, #16]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d078      	beq.n	8009e7a <_dtoa_r+0x4f2>
 8009d88:	9b01      	ldr	r3, [sp, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	dd39      	ble.n	8009e02 <_dtoa_r+0x47a>
 8009d8e:	4b90      	ldr	r3, [pc, #576]	; (8009fd0 <_dtoa_r+0x648>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	4640      	mov	r0, r8
 8009d94:	4649      	mov	r1, r9
 8009d96:	f7f6 fc4f 	bl	8000638 <__aeabi_dmul>
 8009d9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d9e:	9e01      	ldr	r6, [sp, #4]
 8009da0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009da4:	3501      	adds	r5, #1
 8009da6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009daa:	4628      	mov	r0, r5
 8009dac:	f7f6 fbda 	bl	8000564 <__aeabi_i2d>
 8009db0:	4642      	mov	r2, r8
 8009db2:	464b      	mov	r3, r9
 8009db4:	f7f6 fc40 	bl	8000638 <__aeabi_dmul>
 8009db8:	4b86      	ldr	r3, [pc, #536]	; (8009fd4 <_dtoa_r+0x64c>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f7f6 fa86 	bl	80002cc <__adddf3>
 8009dc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dc8:	9303      	str	r3, [sp, #12]
 8009dca:	2e00      	cmp	r6, #0
 8009dcc:	d158      	bne.n	8009e80 <_dtoa_r+0x4f8>
 8009dce:	4b82      	ldr	r3, [pc, #520]	; (8009fd8 <_dtoa_r+0x650>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	4640      	mov	r0, r8
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	f7f6 fa77 	bl	80002c8 <__aeabi_dsub>
 8009dda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dde:	4680      	mov	r8, r0
 8009de0:	4689      	mov	r9, r1
 8009de2:	f7f6 feb9 	bl	8000b58 <__aeabi_dcmpgt>
 8009de6:	2800      	cmp	r0, #0
 8009de8:	f040 8296 	bne.w	800a318 <_dtoa_r+0x990>
 8009dec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009df0:	4640      	mov	r0, r8
 8009df2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009df6:	4649      	mov	r1, r9
 8009df8:	f7f6 fe90 	bl	8000b1c <__aeabi_dcmplt>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	f040 8289 	bne.w	800a314 <_dtoa_r+0x98c>
 8009e02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009e06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f2c0 814e 	blt.w	800a0aa <_dtoa_r+0x722>
 8009e0e:	f1bb 0f0e 	cmp.w	fp, #14
 8009e12:	f300 814a 	bgt.w	800a0aa <_dtoa_r+0x722>
 8009e16:	4b6b      	ldr	r3, [pc, #428]	; (8009fc4 <_dtoa_r+0x63c>)
 8009e18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009e1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f280 80dc 	bge.w	8009fe0 <_dtoa_r+0x658>
 8009e28:	9b04      	ldr	r3, [sp, #16]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f300 80d8 	bgt.w	8009fe0 <_dtoa_r+0x658>
 8009e30:	f040 826f 	bne.w	800a312 <_dtoa_r+0x98a>
 8009e34:	4b68      	ldr	r3, [pc, #416]	; (8009fd8 <_dtoa_r+0x650>)
 8009e36:	2200      	movs	r2, #0
 8009e38:	4640      	mov	r0, r8
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	f7f6 fbfc 	bl	8000638 <__aeabi_dmul>
 8009e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e44:	f7f6 fe7e 	bl	8000b44 <__aeabi_dcmpge>
 8009e48:	9e04      	ldr	r6, [sp, #16]
 8009e4a:	4637      	mov	r7, r6
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	f040 8245 	bne.w	800a2dc <_dtoa_r+0x954>
 8009e52:	9d00      	ldr	r5, [sp, #0]
 8009e54:	2331      	movs	r3, #49	; 0x31
 8009e56:	f805 3b01 	strb.w	r3, [r5], #1
 8009e5a:	f10b 0b01 	add.w	fp, fp, #1
 8009e5e:	e241      	b.n	800a2e4 <_dtoa_r+0x95c>
 8009e60:	07f2      	lsls	r2, r6, #31
 8009e62:	d505      	bpl.n	8009e70 <_dtoa_r+0x4e8>
 8009e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e68:	f7f6 fbe6 	bl	8000638 <__aeabi_dmul>
 8009e6c:	3501      	adds	r5, #1
 8009e6e:	2301      	movs	r3, #1
 8009e70:	1076      	asrs	r6, r6, #1
 8009e72:	3708      	adds	r7, #8
 8009e74:	e773      	b.n	8009d5e <_dtoa_r+0x3d6>
 8009e76:	2502      	movs	r5, #2
 8009e78:	e775      	b.n	8009d66 <_dtoa_r+0x3de>
 8009e7a:	9e04      	ldr	r6, [sp, #16]
 8009e7c:	465f      	mov	r7, fp
 8009e7e:	e792      	b.n	8009da6 <_dtoa_r+0x41e>
 8009e80:	9900      	ldr	r1, [sp, #0]
 8009e82:	4b50      	ldr	r3, [pc, #320]	; (8009fc4 <_dtoa_r+0x63c>)
 8009e84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e88:	4431      	add	r1, r6
 8009e8a:	9102      	str	r1, [sp, #8]
 8009e8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e8e:	eeb0 9a47 	vmov.f32	s18, s14
 8009e92:	eef0 9a67 	vmov.f32	s19, s15
 8009e96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009e9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e9e:	2900      	cmp	r1, #0
 8009ea0:	d044      	beq.n	8009f2c <_dtoa_r+0x5a4>
 8009ea2:	494e      	ldr	r1, [pc, #312]	; (8009fdc <_dtoa_r+0x654>)
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	f7f6 fcf1 	bl	800088c <__aeabi_ddiv>
 8009eaa:	ec53 2b19 	vmov	r2, r3, d9
 8009eae:	f7f6 fa0b 	bl	80002c8 <__aeabi_dsub>
 8009eb2:	9d00      	ldr	r5, [sp, #0]
 8009eb4:	ec41 0b19 	vmov	d9, r0, r1
 8009eb8:	4649      	mov	r1, r9
 8009eba:	4640      	mov	r0, r8
 8009ebc:	f7f6 fe6c 	bl	8000b98 <__aeabi_d2iz>
 8009ec0:	4606      	mov	r6, r0
 8009ec2:	f7f6 fb4f 	bl	8000564 <__aeabi_i2d>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4640      	mov	r0, r8
 8009ecc:	4649      	mov	r1, r9
 8009ece:	f7f6 f9fb 	bl	80002c8 <__aeabi_dsub>
 8009ed2:	3630      	adds	r6, #48	; 0x30
 8009ed4:	f805 6b01 	strb.w	r6, [r5], #1
 8009ed8:	ec53 2b19 	vmov	r2, r3, d9
 8009edc:	4680      	mov	r8, r0
 8009ede:	4689      	mov	r9, r1
 8009ee0:	f7f6 fe1c 	bl	8000b1c <__aeabi_dcmplt>
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d164      	bne.n	8009fb2 <_dtoa_r+0x62a>
 8009ee8:	4642      	mov	r2, r8
 8009eea:	464b      	mov	r3, r9
 8009eec:	4937      	ldr	r1, [pc, #220]	; (8009fcc <_dtoa_r+0x644>)
 8009eee:	2000      	movs	r0, #0
 8009ef0:	f7f6 f9ea 	bl	80002c8 <__aeabi_dsub>
 8009ef4:	ec53 2b19 	vmov	r2, r3, d9
 8009ef8:	f7f6 fe10 	bl	8000b1c <__aeabi_dcmplt>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	f040 80b6 	bne.w	800a06e <_dtoa_r+0x6e6>
 8009f02:	9b02      	ldr	r3, [sp, #8]
 8009f04:	429d      	cmp	r5, r3
 8009f06:	f43f af7c 	beq.w	8009e02 <_dtoa_r+0x47a>
 8009f0a:	4b31      	ldr	r3, [pc, #196]	; (8009fd0 <_dtoa_r+0x648>)
 8009f0c:	ec51 0b19 	vmov	r0, r1, d9
 8009f10:	2200      	movs	r2, #0
 8009f12:	f7f6 fb91 	bl	8000638 <__aeabi_dmul>
 8009f16:	4b2e      	ldr	r3, [pc, #184]	; (8009fd0 <_dtoa_r+0x648>)
 8009f18:	ec41 0b19 	vmov	d9, r0, r1
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	4640      	mov	r0, r8
 8009f20:	4649      	mov	r1, r9
 8009f22:	f7f6 fb89 	bl	8000638 <__aeabi_dmul>
 8009f26:	4680      	mov	r8, r0
 8009f28:	4689      	mov	r9, r1
 8009f2a:	e7c5      	b.n	8009eb8 <_dtoa_r+0x530>
 8009f2c:	ec51 0b17 	vmov	r0, r1, d7
 8009f30:	f7f6 fb82 	bl	8000638 <__aeabi_dmul>
 8009f34:	9b02      	ldr	r3, [sp, #8]
 8009f36:	9d00      	ldr	r5, [sp, #0]
 8009f38:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f3a:	ec41 0b19 	vmov	d9, r0, r1
 8009f3e:	4649      	mov	r1, r9
 8009f40:	4640      	mov	r0, r8
 8009f42:	f7f6 fe29 	bl	8000b98 <__aeabi_d2iz>
 8009f46:	4606      	mov	r6, r0
 8009f48:	f7f6 fb0c 	bl	8000564 <__aeabi_i2d>
 8009f4c:	3630      	adds	r6, #48	; 0x30
 8009f4e:	4602      	mov	r2, r0
 8009f50:	460b      	mov	r3, r1
 8009f52:	4640      	mov	r0, r8
 8009f54:	4649      	mov	r1, r9
 8009f56:	f7f6 f9b7 	bl	80002c8 <__aeabi_dsub>
 8009f5a:	f805 6b01 	strb.w	r6, [r5], #1
 8009f5e:	9b02      	ldr	r3, [sp, #8]
 8009f60:	429d      	cmp	r5, r3
 8009f62:	4680      	mov	r8, r0
 8009f64:	4689      	mov	r9, r1
 8009f66:	f04f 0200 	mov.w	r2, #0
 8009f6a:	d124      	bne.n	8009fb6 <_dtoa_r+0x62e>
 8009f6c:	4b1b      	ldr	r3, [pc, #108]	; (8009fdc <_dtoa_r+0x654>)
 8009f6e:	ec51 0b19 	vmov	r0, r1, d9
 8009f72:	f7f6 f9ab 	bl	80002cc <__adddf3>
 8009f76:	4602      	mov	r2, r0
 8009f78:	460b      	mov	r3, r1
 8009f7a:	4640      	mov	r0, r8
 8009f7c:	4649      	mov	r1, r9
 8009f7e:	f7f6 fdeb 	bl	8000b58 <__aeabi_dcmpgt>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	d173      	bne.n	800a06e <_dtoa_r+0x6e6>
 8009f86:	ec53 2b19 	vmov	r2, r3, d9
 8009f8a:	4914      	ldr	r1, [pc, #80]	; (8009fdc <_dtoa_r+0x654>)
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	f7f6 f99b 	bl	80002c8 <__aeabi_dsub>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4640      	mov	r0, r8
 8009f98:	4649      	mov	r1, r9
 8009f9a:	f7f6 fdbf 	bl	8000b1c <__aeabi_dcmplt>
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	f43f af2f 	beq.w	8009e02 <_dtoa_r+0x47a>
 8009fa4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009fa6:	1e6b      	subs	r3, r5, #1
 8009fa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009faa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009fae:	2b30      	cmp	r3, #48	; 0x30
 8009fb0:	d0f8      	beq.n	8009fa4 <_dtoa_r+0x61c>
 8009fb2:	46bb      	mov	fp, r7
 8009fb4:	e04a      	b.n	800a04c <_dtoa_r+0x6c4>
 8009fb6:	4b06      	ldr	r3, [pc, #24]	; (8009fd0 <_dtoa_r+0x648>)
 8009fb8:	f7f6 fb3e 	bl	8000638 <__aeabi_dmul>
 8009fbc:	4680      	mov	r8, r0
 8009fbe:	4689      	mov	r9, r1
 8009fc0:	e7bd      	b.n	8009f3e <_dtoa_r+0x5b6>
 8009fc2:	bf00      	nop
 8009fc4:	0800da20 	.word	0x0800da20
 8009fc8:	0800d9f8 	.word	0x0800d9f8
 8009fcc:	3ff00000 	.word	0x3ff00000
 8009fd0:	40240000 	.word	0x40240000
 8009fd4:	401c0000 	.word	0x401c0000
 8009fd8:	40140000 	.word	0x40140000
 8009fdc:	3fe00000 	.word	0x3fe00000
 8009fe0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009fe4:	9d00      	ldr	r5, [sp, #0]
 8009fe6:	4642      	mov	r2, r8
 8009fe8:	464b      	mov	r3, r9
 8009fea:	4630      	mov	r0, r6
 8009fec:	4639      	mov	r1, r7
 8009fee:	f7f6 fc4d 	bl	800088c <__aeabi_ddiv>
 8009ff2:	f7f6 fdd1 	bl	8000b98 <__aeabi_d2iz>
 8009ff6:	9001      	str	r0, [sp, #4]
 8009ff8:	f7f6 fab4 	bl	8000564 <__aeabi_i2d>
 8009ffc:	4642      	mov	r2, r8
 8009ffe:	464b      	mov	r3, r9
 800a000:	f7f6 fb1a 	bl	8000638 <__aeabi_dmul>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	4630      	mov	r0, r6
 800a00a:	4639      	mov	r1, r7
 800a00c:	f7f6 f95c 	bl	80002c8 <__aeabi_dsub>
 800a010:	9e01      	ldr	r6, [sp, #4]
 800a012:	9f04      	ldr	r7, [sp, #16]
 800a014:	3630      	adds	r6, #48	; 0x30
 800a016:	f805 6b01 	strb.w	r6, [r5], #1
 800a01a:	9e00      	ldr	r6, [sp, #0]
 800a01c:	1bae      	subs	r6, r5, r6
 800a01e:	42b7      	cmp	r7, r6
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	d134      	bne.n	800a090 <_dtoa_r+0x708>
 800a026:	f7f6 f951 	bl	80002cc <__adddf3>
 800a02a:	4642      	mov	r2, r8
 800a02c:	464b      	mov	r3, r9
 800a02e:	4606      	mov	r6, r0
 800a030:	460f      	mov	r7, r1
 800a032:	f7f6 fd91 	bl	8000b58 <__aeabi_dcmpgt>
 800a036:	b9c8      	cbnz	r0, 800a06c <_dtoa_r+0x6e4>
 800a038:	4642      	mov	r2, r8
 800a03a:	464b      	mov	r3, r9
 800a03c:	4630      	mov	r0, r6
 800a03e:	4639      	mov	r1, r7
 800a040:	f7f6 fd62 	bl	8000b08 <__aeabi_dcmpeq>
 800a044:	b110      	cbz	r0, 800a04c <_dtoa_r+0x6c4>
 800a046:	9b01      	ldr	r3, [sp, #4]
 800a048:	07db      	lsls	r3, r3, #31
 800a04a:	d40f      	bmi.n	800a06c <_dtoa_r+0x6e4>
 800a04c:	4651      	mov	r1, sl
 800a04e:	4620      	mov	r0, r4
 800a050:	f000 fbcc 	bl	800a7ec <_Bfree>
 800a054:	2300      	movs	r3, #0
 800a056:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a058:	702b      	strb	r3, [r5, #0]
 800a05a:	f10b 0301 	add.w	r3, fp, #1
 800a05e:	6013      	str	r3, [r2, #0]
 800a060:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a062:	2b00      	cmp	r3, #0
 800a064:	f43f ace2 	beq.w	8009a2c <_dtoa_r+0xa4>
 800a068:	601d      	str	r5, [r3, #0]
 800a06a:	e4df      	b.n	8009a2c <_dtoa_r+0xa4>
 800a06c:	465f      	mov	r7, fp
 800a06e:	462b      	mov	r3, r5
 800a070:	461d      	mov	r5, r3
 800a072:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a076:	2a39      	cmp	r2, #57	; 0x39
 800a078:	d106      	bne.n	800a088 <_dtoa_r+0x700>
 800a07a:	9a00      	ldr	r2, [sp, #0]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d1f7      	bne.n	800a070 <_dtoa_r+0x6e8>
 800a080:	9900      	ldr	r1, [sp, #0]
 800a082:	2230      	movs	r2, #48	; 0x30
 800a084:	3701      	adds	r7, #1
 800a086:	700a      	strb	r2, [r1, #0]
 800a088:	781a      	ldrb	r2, [r3, #0]
 800a08a:	3201      	adds	r2, #1
 800a08c:	701a      	strb	r2, [r3, #0]
 800a08e:	e790      	b.n	8009fb2 <_dtoa_r+0x62a>
 800a090:	4ba3      	ldr	r3, [pc, #652]	; (800a320 <_dtoa_r+0x998>)
 800a092:	2200      	movs	r2, #0
 800a094:	f7f6 fad0 	bl	8000638 <__aeabi_dmul>
 800a098:	2200      	movs	r2, #0
 800a09a:	2300      	movs	r3, #0
 800a09c:	4606      	mov	r6, r0
 800a09e:	460f      	mov	r7, r1
 800a0a0:	f7f6 fd32 	bl	8000b08 <__aeabi_dcmpeq>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d09e      	beq.n	8009fe6 <_dtoa_r+0x65e>
 800a0a8:	e7d0      	b.n	800a04c <_dtoa_r+0x6c4>
 800a0aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0ac:	2a00      	cmp	r2, #0
 800a0ae:	f000 80ca 	beq.w	800a246 <_dtoa_r+0x8be>
 800a0b2:	9a07      	ldr	r2, [sp, #28]
 800a0b4:	2a01      	cmp	r2, #1
 800a0b6:	f300 80ad 	bgt.w	800a214 <_dtoa_r+0x88c>
 800a0ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0bc:	2a00      	cmp	r2, #0
 800a0be:	f000 80a5 	beq.w	800a20c <_dtoa_r+0x884>
 800a0c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a0c6:	9e08      	ldr	r6, [sp, #32]
 800a0c8:	9d05      	ldr	r5, [sp, #20]
 800a0ca:	9a05      	ldr	r2, [sp, #20]
 800a0cc:	441a      	add	r2, r3
 800a0ce:	9205      	str	r2, [sp, #20]
 800a0d0:	9a06      	ldr	r2, [sp, #24]
 800a0d2:	2101      	movs	r1, #1
 800a0d4:	441a      	add	r2, r3
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	9206      	str	r2, [sp, #24]
 800a0da:	f000 fc87 	bl	800a9ec <__i2b>
 800a0de:	4607      	mov	r7, r0
 800a0e0:	b165      	cbz	r5, 800a0fc <_dtoa_r+0x774>
 800a0e2:	9b06      	ldr	r3, [sp, #24]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	dd09      	ble.n	800a0fc <_dtoa_r+0x774>
 800a0e8:	42ab      	cmp	r3, r5
 800a0ea:	9a05      	ldr	r2, [sp, #20]
 800a0ec:	bfa8      	it	ge
 800a0ee:	462b      	movge	r3, r5
 800a0f0:	1ad2      	subs	r2, r2, r3
 800a0f2:	9205      	str	r2, [sp, #20]
 800a0f4:	9a06      	ldr	r2, [sp, #24]
 800a0f6:	1aed      	subs	r5, r5, r3
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	9306      	str	r3, [sp, #24]
 800a0fc:	9b08      	ldr	r3, [sp, #32]
 800a0fe:	b1f3      	cbz	r3, 800a13e <_dtoa_r+0x7b6>
 800a100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a102:	2b00      	cmp	r3, #0
 800a104:	f000 80a3 	beq.w	800a24e <_dtoa_r+0x8c6>
 800a108:	2e00      	cmp	r6, #0
 800a10a:	dd10      	ble.n	800a12e <_dtoa_r+0x7a6>
 800a10c:	4639      	mov	r1, r7
 800a10e:	4632      	mov	r2, r6
 800a110:	4620      	mov	r0, r4
 800a112:	f000 fd2b 	bl	800ab6c <__pow5mult>
 800a116:	4652      	mov	r2, sl
 800a118:	4601      	mov	r1, r0
 800a11a:	4607      	mov	r7, r0
 800a11c:	4620      	mov	r0, r4
 800a11e:	f000 fc7b 	bl	800aa18 <__multiply>
 800a122:	4651      	mov	r1, sl
 800a124:	4680      	mov	r8, r0
 800a126:	4620      	mov	r0, r4
 800a128:	f000 fb60 	bl	800a7ec <_Bfree>
 800a12c:	46c2      	mov	sl, r8
 800a12e:	9b08      	ldr	r3, [sp, #32]
 800a130:	1b9a      	subs	r2, r3, r6
 800a132:	d004      	beq.n	800a13e <_dtoa_r+0x7b6>
 800a134:	4651      	mov	r1, sl
 800a136:	4620      	mov	r0, r4
 800a138:	f000 fd18 	bl	800ab6c <__pow5mult>
 800a13c:	4682      	mov	sl, r0
 800a13e:	2101      	movs	r1, #1
 800a140:	4620      	mov	r0, r4
 800a142:	f000 fc53 	bl	800a9ec <__i2b>
 800a146:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a148:	2b00      	cmp	r3, #0
 800a14a:	4606      	mov	r6, r0
 800a14c:	f340 8081 	ble.w	800a252 <_dtoa_r+0x8ca>
 800a150:	461a      	mov	r2, r3
 800a152:	4601      	mov	r1, r0
 800a154:	4620      	mov	r0, r4
 800a156:	f000 fd09 	bl	800ab6c <__pow5mult>
 800a15a:	9b07      	ldr	r3, [sp, #28]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	4606      	mov	r6, r0
 800a160:	dd7a      	ble.n	800a258 <_dtoa_r+0x8d0>
 800a162:	f04f 0800 	mov.w	r8, #0
 800a166:	6933      	ldr	r3, [r6, #16]
 800a168:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a16c:	6918      	ldr	r0, [r3, #16]
 800a16e:	f000 fbef 	bl	800a950 <__hi0bits>
 800a172:	f1c0 0020 	rsb	r0, r0, #32
 800a176:	9b06      	ldr	r3, [sp, #24]
 800a178:	4418      	add	r0, r3
 800a17a:	f010 001f 	ands.w	r0, r0, #31
 800a17e:	f000 8094 	beq.w	800a2aa <_dtoa_r+0x922>
 800a182:	f1c0 0320 	rsb	r3, r0, #32
 800a186:	2b04      	cmp	r3, #4
 800a188:	f340 8085 	ble.w	800a296 <_dtoa_r+0x90e>
 800a18c:	9b05      	ldr	r3, [sp, #20]
 800a18e:	f1c0 001c 	rsb	r0, r0, #28
 800a192:	4403      	add	r3, r0
 800a194:	9305      	str	r3, [sp, #20]
 800a196:	9b06      	ldr	r3, [sp, #24]
 800a198:	4403      	add	r3, r0
 800a19a:	4405      	add	r5, r0
 800a19c:	9306      	str	r3, [sp, #24]
 800a19e:	9b05      	ldr	r3, [sp, #20]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	dd05      	ble.n	800a1b0 <_dtoa_r+0x828>
 800a1a4:	4651      	mov	r1, sl
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	f000 fd39 	bl	800ac20 <__lshift>
 800a1ae:	4682      	mov	sl, r0
 800a1b0:	9b06      	ldr	r3, [sp, #24]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	dd05      	ble.n	800a1c2 <_dtoa_r+0x83a>
 800a1b6:	4631      	mov	r1, r6
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f000 fd30 	bl	800ac20 <__lshift>
 800a1c0:	4606      	mov	r6, r0
 800a1c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d072      	beq.n	800a2ae <_dtoa_r+0x926>
 800a1c8:	4631      	mov	r1, r6
 800a1ca:	4650      	mov	r0, sl
 800a1cc:	f000 fd94 	bl	800acf8 <__mcmp>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	da6c      	bge.n	800a2ae <_dtoa_r+0x926>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	4651      	mov	r1, sl
 800a1d8:	220a      	movs	r2, #10
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f000 fb28 	bl	800a830 <__multadd>
 800a1e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1e6:	4682      	mov	sl, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f000 81b0 	beq.w	800a54e <_dtoa_r+0xbc6>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	220a      	movs	r2, #10
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f000 fb1b 	bl	800a830 <__multadd>
 800a1fa:	9b01      	ldr	r3, [sp, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	4607      	mov	r7, r0
 800a200:	f300 8096 	bgt.w	800a330 <_dtoa_r+0x9a8>
 800a204:	9b07      	ldr	r3, [sp, #28]
 800a206:	2b02      	cmp	r3, #2
 800a208:	dc59      	bgt.n	800a2be <_dtoa_r+0x936>
 800a20a:	e091      	b.n	800a330 <_dtoa_r+0x9a8>
 800a20c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a20e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a212:	e758      	b.n	800a0c6 <_dtoa_r+0x73e>
 800a214:	9b04      	ldr	r3, [sp, #16]
 800a216:	1e5e      	subs	r6, r3, #1
 800a218:	9b08      	ldr	r3, [sp, #32]
 800a21a:	42b3      	cmp	r3, r6
 800a21c:	bfbf      	itttt	lt
 800a21e:	9b08      	ldrlt	r3, [sp, #32]
 800a220:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a222:	9608      	strlt	r6, [sp, #32]
 800a224:	1af3      	sublt	r3, r6, r3
 800a226:	bfb4      	ite	lt
 800a228:	18d2      	addlt	r2, r2, r3
 800a22a:	1b9e      	subge	r6, r3, r6
 800a22c:	9b04      	ldr	r3, [sp, #16]
 800a22e:	bfbc      	itt	lt
 800a230:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a232:	2600      	movlt	r6, #0
 800a234:	2b00      	cmp	r3, #0
 800a236:	bfb7      	itett	lt
 800a238:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a23c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a240:	1a9d      	sublt	r5, r3, r2
 800a242:	2300      	movlt	r3, #0
 800a244:	e741      	b.n	800a0ca <_dtoa_r+0x742>
 800a246:	9e08      	ldr	r6, [sp, #32]
 800a248:	9d05      	ldr	r5, [sp, #20]
 800a24a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a24c:	e748      	b.n	800a0e0 <_dtoa_r+0x758>
 800a24e:	9a08      	ldr	r2, [sp, #32]
 800a250:	e770      	b.n	800a134 <_dtoa_r+0x7ac>
 800a252:	9b07      	ldr	r3, [sp, #28]
 800a254:	2b01      	cmp	r3, #1
 800a256:	dc19      	bgt.n	800a28c <_dtoa_r+0x904>
 800a258:	9b02      	ldr	r3, [sp, #8]
 800a25a:	b9bb      	cbnz	r3, 800a28c <_dtoa_r+0x904>
 800a25c:	9b03      	ldr	r3, [sp, #12]
 800a25e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a262:	b99b      	cbnz	r3, 800a28c <_dtoa_r+0x904>
 800a264:	9b03      	ldr	r3, [sp, #12]
 800a266:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a26a:	0d1b      	lsrs	r3, r3, #20
 800a26c:	051b      	lsls	r3, r3, #20
 800a26e:	b183      	cbz	r3, 800a292 <_dtoa_r+0x90a>
 800a270:	9b05      	ldr	r3, [sp, #20]
 800a272:	3301      	adds	r3, #1
 800a274:	9305      	str	r3, [sp, #20]
 800a276:	9b06      	ldr	r3, [sp, #24]
 800a278:	3301      	adds	r3, #1
 800a27a:	9306      	str	r3, [sp, #24]
 800a27c:	f04f 0801 	mov.w	r8, #1
 800a280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a282:	2b00      	cmp	r3, #0
 800a284:	f47f af6f 	bne.w	800a166 <_dtoa_r+0x7de>
 800a288:	2001      	movs	r0, #1
 800a28a:	e774      	b.n	800a176 <_dtoa_r+0x7ee>
 800a28c:	f04f 0800 	mov.w	r8, #0
 800a290:	e7f6      	b.n	800a280 <_dtoa_r+0x8f8>
 800a292:	4698      	mov	r8, r3
 800a294:	e7f4      	b.n	800a280 <_dtoa_r+0x8f8>
 800a296:	d082      	beq.n	800a19e <_dtoa_r+0x816>
 800a298:	9a05      	ldr	r2, [sp, #20]
 800a29a:	331c      	adds	r3, #28
 800a29c:	441a      	add	r2, r3
 800a29e:	9205      	str	r2, [sp, #20]
 800a2a0:	9a06      	ldr	r2, [sp, #24]
 800a2a2:	441a      	add	r2, r3
 800a2a4:	441d      	add	r5, r3
 800a2a6:	9206      	str	r2, [sp, #24]
 800a2a8:	e779      	b.n	800a19e <_dtoa_r+0x816>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	e7f4      	b.n	800a298 <_dtoa_r+0x910>
 800a2ae:	9b04      	ldr	r3, [sp, #16]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	dc37      	bgt.n	800a324 <_dtoa_r+0x99c>
 800a2b4:	9b07      	ldr	r3, [sp, #28]
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	dd34      	ble.n	800a324 <_dtoa_r+0x99c>
 800a2ba:	9b04      	ldr	r3, [sp, #16]
 800a2bc:	9301      	str	r3, [sp, #4]
 800a2be:	9b01      	ldr	r3, [sp, #4]
 800a2c0:	b963      	cbnz	r3, 800a2dc <_dtoa_r+0x954>
 800a2c2:	4631      	mov	r1, r6
 800a2c4:	2205      	movs	r2, #5
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f000 fab2 	bl	800a830 <__multadd>
 800a2cc:	4601      	mov	r1, r0
 800a2ce:	4606      	mov	r6, r0
 800a2d0:	4650      	mov	r0, sl
 800a2d2:	f000 fd11 	bl	800acf8 <__mcmp>
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	f73f adbb 	bgt.w	8009e52 <_dtoa_r+0x4ca>
 800a2dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2de:	9d00      	ldr	r5, [sp, #0]
 800a2e0:	ea6f 0b03 	mvn.w	fp, r3
 800a2e4:	f04f 0800 	mov.w	r8, #0
 800a2e8:	4631      	mov	r1, r6
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	f000 fa7e 	bl	800a7ec <_Bfree>
 800a2f0:	2f00      	cmp	r7, #0
 800a2f2:	f43f aeab 	beq.w	800a04c <_dtoa_r+0x6c4>
 800a2f6:	f1b8 0f00 	cmp.w	r8, #0
 800a2fa:	d005      	beq.n	800a308 <_dtoa_r+0x980>
 800a2fc:	45b8      	cmp	r8, r7
 800a2fe:	d003      	beq.n	800a308 <_dtoa_r+0x980>
 800a300:	4641      	mov	r1, r8
 800a302:	4620      	mov	r0, r4
 800a304:	f000 fa72 	bl	800a7ec <_Bfree>
 800a308:	4639      	mov	r1, r7
 800a30a:	4620      	mov	r0, r4
 800a30c:	f000 fa6e 	bl	800a7ec <_Bfree>
 800a310:	e69c      	b.n	800a04c <_dtoa_r+0x6c4>
 800a312:	2600      	movs	r6, #0
 800a314:	4637      	mov	r7, r6
 800a316:	e7e1      	b.n	800a2dc <_dtoa_r+0x954>
 800a318:	46bb      	mov	fp, r7
 800a31a:	4637      	mov	r7, r6
 800a31c:	e599      	b.n	8009e52 <_dtoa_r+0x4ca>
 800a31e:	bf00      	nop
 800a320:	40240000 	.word	0x40240000
 800a324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a326:	2b00      	cmp	r3, #0
 800a328:	f000 80c8 	beq.w	800a4bc <_dtoa_r+0xb34>
 800a32c:	9b04      	ldr	r3, [sp, #16]
 800a32e:	9301      	str	r3, [sp, #4]
 800a330:	2d00      	cmp	r5, #0
 800a332:	dd05      	ble.n	800a340 <_dtoa_r+0x9b8>
 800a334:	4639      	mov	r1, r7
 800a336:	462a      	mov	r2, r5
 800a338:	4620      	mov	r0, r4
 800a33a:	f000 fc71 	bl	800ac20 <__lshift>
 800a33e:	4607      	mov	r7, r0
 800a340:	f1b8 0f00 	cmp.w	r8, #0
 800a344:	d05b      	beq.n	800a3fe <_dtoa_r+0xa76>
 800a346:	6879      	ldr	r1, [r7, #4]
 800a348:	4620      	mov	r0, r4
 800a34a:	f000 fa0f 	bl	800a76c <_Balloc>
 800a34e:	4605      	mov	r5, r0
 800a350:	b928      	cbnz	r0, 800a35e <_dtoa_r+0x9d6>
 800a352:	4b83      	ldr	r3, [pc, #524]	; (800a560 <_dtoa_r+0xbd8>)
 800a354:	4602      	mov	r2, r0
 800a356:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a35a:	f7ff bb2e 	b.w	80099ba <_dtoa_r+0x32>
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	3202      	adds	r2, #2
 800a362:	0092      	lsls	r2, r2, #2
 800a364:	f107 010c 	add.w	r1, r7, #12
 800a368:	300c      	adds	r0, #12
 800a36a:	f7ff fa70 	bl	800984e <memcpy>
 800a36e:	2201      	movs	r2, #1
 800a370:	4629      	mov	r1, r5
 800a372:	4620      	mov	r0, r4
 800a374:	f000 fc54 	bl	800ac20 <__lshift>
 800a378:	9b00      	ldr	r3, [sp, #0]
 800a37a:	3301      	adds	r3, #1
 800a37c:	9304      	str	r3, [sp, #16]
 800a37e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a382:	4413      	add	r3, r2
 800a384:	9308      	str	r3, [sp, #32]
 800a386:	9b02      	ldr	r3, [sp, #8]
 800a388:	f003 0301 	and.w	r3, r3, #1
 800a38c:	46b8      	mov	r8, r7
 800a38e:	9306      	str	r3, [sp, #24]
 800a390:	4607      	mov	r7, r0
 800a392:	9b04      	ldr	r3, [sp, #16]
 800a394:	4631      	mov	r1, r6
 800a396:	3b01      	subs	r3, #1
 800a398:	4650      	mov	r0, sl
 800a39a:	9301      	str	r3, [sp, #4]
 800a39c:	f7ff fa6c 	bl	8009878 <quorem>
 800a3a0:	4641      	mov	r1, r8
 800a3a2:	9002      	str	r0, [sp, #8]
 800a3a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a3a8:	4650      	mov	r0, sl
 800a3aa:	f000 fca5 	bl	800acf8 <__mcmp>
 800a3ae:	463a      	mov	r2, r7
 800a3b0:	9005      	str	r0, [sp, #20]
 800a3b2:	4631      	mov	r1, r6
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f000 fcbb 	bl	800ad30 <__mdiff>
 800a3ba:	68c2      	ldr	r2, [r0, #12]
 800a3bc:	4605      	mov	r5, r0
 800a3be:	bb02      	cbnz	r2, 800a402 <_dtoa_r+0xa7a>
 800a3c0:	4601      	mov	r1, r0
 800a3c2:	4650      	mov	r0, sl
 800a3c4:	f000 fc98 	bl	800acf8 <__mcmp>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	9209      	str	r2, [sp, #36]	; 0x24
 800a3d0:	f000 fa0c 	bl	800a7ec <_Bfree>
 800a3d4:	9b07      	ldr	r3, [sp, #28]
 800a3d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3d8:	9d04      	ldr	r5, [sp, #16]
 800a3da:	ea43 0102 	orr.w	r1, r3, r2
 800a3de:	9b06      	ldr	r3, [sp, #24]
 800a3e0:	4319      	orrs	r1, r3
 800a3e2:	d110      	bne.n	800a406 <_dtoa_r+0xa7e>
 800a3e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a3e8:	d029      	beq.n	800a43e <_dtoa_r+0xab6>
 800a3ea:	9b05      	ldr	r3, [sp, #20]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	dd02      	ble.n	800a3f6 <_dtoa_r+0xa6e>
 800a3f0:	9b02      	ldr	r3, [sp, #8]
 800a3f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a3f6:	9b01      	ldr	r3, [sp, #4]
 800a3f8:	f883 9000 	strb.w	r9, [r3]
 800a3fc:	e774      	b.n	800a2e8 <_dtoa_r+0x960>
 800a3fe:	4638      	mov	r0, r7
 800a400:	e7ba      	b.n	800a378 <_dtoa_r+0x9f0>
 800a402:	2201      	movs	r2, #1
 800a404:	e7e1      	b.n	800a3ca <_dtoa_r+0xa42>
 800a406:	9b05      	ldr	r3, [sp, #20]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	db04      	blt.n	800a416 <_dtoa_r+0xa8e>
 800a40c:	9907      	ldr	r1, [sp, #28]
 800a40e:	430b      	orrs	r3, r1
 800a410:	9906      	ldr	r1, [sp, #24]
 800a412:	430b      	orrs	r3, r1
 800a414:	d120      	bne.n	800a458 <_dtoa_r+0xad0>
 800a416:	2a00      	cmp	r2, #0
 800a418:	dded      	ble.n	800a3f6 <_dtoa_r+0xa6e>
 800a41a:	4651      	mov	r1, sl
 800a41c:	2201      	movs	r2, #1
 800a41e:	4620      	mov	r0, r4
 800a420:	f000 fbfe 	bl	800ac20 <__lshift>
 800a424:	4631      	mov	r1, r6
 800a426:	4682      	mov	sl, r0
 800a428:	f000 fc66 	bl	800acf8 <__mcmp>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	dc03      	bgt.n	800a438 <_dtoa_r+0xab0>
 800a430:	d1e1      	bne.n	800a3f6 <_dtoa_r+0xa6e>
 800a432:	f019 0f01 	tst.w	r9, #1
 800a436:	d0de      	beq.n	800a3f6 <_dtoa_r+0xa6e>
 800a438:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a43c:	d1d8      	bne.n	800a3f0 <_dtoa_r+0xa68>
 800a43e:	9a01      	ldr	r2, [sp, #4]
 800a440:	2339      	movs	r3, #57	; 0x39
 800a442:	7013      	strb	r3, [r2, #0]
 800a444:	462b      	mov	r3, r5
 800a446:	461d      	mov	r5, r3
 800a448:	3b01      	subs	r3, #1
 800a44a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a44e:	2a39      	cmp	r2, #57	; 0x39
 800a450:	d06c      	beq.n	800a52c <_dtoa_r+0xba4>
 800a452:	3201      	adds	r2, #1
 800a454:	701a      	strb	r2, [r3, #0]
 800a456:	e747      	b.n	800a2e8 <_dtoa_r+0x960>
 800a458:	2a00      	cmp	r2, #0
 800a45a:	dd07      	ble.n	800a46c <_dtoa_r+0xae4>
 800a45c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a460:	d0ed      	beq.n	800a43e <_dtoa_r+0xab6>
 800a462:	9a01      	ldr	r2, [sp, #4]
 800a464:	f109 0301 	add.w	r3, r9, #1
 800a468:	7013      	strb	r3, [r2, #0]
 800a46a:	e73d      	b.n	800a2e8 <_dtoa_r+0x960>
 800a46c:	9b04      	ldr	r3, [sp, #16]
 800a46e:	9a08      	ldr	r2, [sp, #32]
 800a470:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a474:	4293      	cmp	r3, r2
 800a476:	d043      	beq.n	800a500 <_dtoa_r+0xb78>
 800a478:	4651      	mov	r1, sl
 800a47a:	2300      	movs	r3, #0
 800a47c:	220a      	movs	r2, #10
 800a47e:	4620      	mov	r0, r4
 800a480:	f000 f9d6 	bl	800a830 <__multadd>
 800a484:	45b8      	cmp	r8, r7
 800a486:	4682      	mov	sl, r0
 800a488:	f04f 0300 	mov.w	r3, #0
 800a48c:	f04f 020a 	mov.w	r2, #10
 800a490:	4641      	mov	r1, r8
 800a492:	4620      	mov	r0, r4
 800a494:	d107      	bne.n	800a4a6 <_dtoa_r+0xb1e>
 800a496:	f000 f9cb 	bl	800a830 <__multadd>
 800a49a:	4680      	mov	r8, r0
 800a49c:	4607      	mov	r7, r0
 800a49e:	9b04      	ldr	r3, [sp, #16]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	9304      	str	r3, [sp, #16]
 800a4a4:	e775      	b.n	800a392 <_dtoa_r+0xa0a>
 800a4a6:	f000 f9c3 	bl	800a830 <__multadd>
 800a4aa:	4639      	mov	r1, r7
 800a4ac:	4680      	mov	r8, r0
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	220a      	movs	r2, #10
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f000 f9bc 	bl	800a830 <__multadd>
 800a4b8:	4607      	mov	r7, r0
 800a4ba:	e7f0      	b.n	800a49e <_dtoa_r+0xb16>
 800a4bc:	9b04      	ldr	r3, [sp, #16]
 800a4be:	9301      	str	r3, [sp, #4]
 800a4c0:	9d00      	ldr	r5, [sp, #0]
 800a4c2:	4631      	mov	r1, r6
 800a4c4:	4650      	mov	r0, sl
 800a4c6:	f7ff f9d7 	bl	8009878 <quorem>
 800a4ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a4ce:	9b00      	ldr	r3, [sp, #0]
 800a4d0:	f805 9b01 	strb.w	r9, [r5], #1
 800a4d4:	1aea      	subs	r2, r5, r3
 800a4d6:	9b01      	ldr	r3, [sp, #4]
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	dd07      	ble.n	800a4ec <_dtoa_r+0xb64>
 800a4dc:	4651      	mov	r1, sl
 800a4de:	2300      	movs	r3, #0
 800a4e0:	220a      	movs	r2, #10
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f000 f9a4 	bl	800a830 <__multadd>
 800a4e8:	4682      	mov	sl, r0
 800a4ea:	e7ea      	b.n	800a4c2 <_dtoa_r+0xb3a>
 800a4ec:	9b01      	ldr	r3, [sp, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	bfc8      	it	gt
 800a4f2:	461d      	movgt	r5, r3
 800a4f4:	9b00      	ldr	r3, [sp, #0]
 800a4f6:	bfd8      	it	le
 800a4f8:	2501      	movle	r5, #1
 800a4fa:	441d      	add	r5, r3
 800a4fc:	f04f 0800 	mov.w	r8, #0
 800a500:	4651      	mov	r1, sl
 800a502:	2201      	movs	r2, #1
 800a504:	4620      	mov	r0, r4
 800a506:	f000 fb8b 	bl	800ac20 <__lshift>
 800a50a:	4631      	mov	r1, r6
 800a50c:	4682      	mov	sl, r0
 800a50e:	f000 fbf3 	bl	800acf8 <__mcmp>
 800a512:	2800      	cmp	r0, #0
 800a514:	dc96      	bgt.n	800a444 <_dtoa_r+0xabc>
 800a516:	d102      	bne.n	800a51e <_dtoa_r+0xb96>
 800a518:	f019 0f01 	tst.w	r9, #1
 800a51c:	d192      	bne.n	800a444 <_dtoa_r+0xabc>
 800a51e:	462b      	mov	r3, r5
 800a520:	461d      	mov	r5, r3
 800a522:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a526:	2a30      	cmp	r2, #48	; 0x30
 800a528:	d0fa      	beq.n	800a520 <_dtoa_r+0xb98>
 800a52a:	e6dd      	b.n	800a2e8 <_dtoa_r+0x960>
 800a52c:	9a00      	ldr	r2, [sp, #0]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d189      	bne.n	800a446 <_dtoa_r+0xabe>
 800a532:	f10b 0b01 	add.w	fp, fp, #1
 800a536:	2331      	movs	r3, #49	; 0x31
 800a538:	e796      	b.n	800a468 <_dtoa_r+0xae0>
 800a53a:	4b0a      	ldr	r3, [pc, #40]	; (800a564 <_dtoa_r+0xbdc>)
 800a53c:	f7ff ba99 	b.w	8009a72 <_dtoa_r+0xea>
 800a540:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a542:	2b00      	cmp	r3, #0
 800a544:	f47f aa6d 	bne.w	8009a22 <_dtoa_r+0x9a>
 800a548:	4b07      	ldr	r3, [pc, #28]	; (800a568 <_dtoa_r+0xbe0>)
 800a54a:	f7ff ba92 	b.w	8009a72 <_dtoa_r+0xea>
 800a54e:	9b01      	ldr	r3, [sp, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	dcb5      	bgt.n	800a4c0 <_dtoa_r+0xb38>
 800a554:	9b07      	ldr	r3, [sp, #28]
 800a556:	2b02      	cmp	r3, #2
 800a558:	f73f aeb1 	bgt.w	800a2be <_dtoa_r+0x936>
 800a55c:	e7b0      	b.n	800a4c0 <_dtoa_r+0xb38>
 800a55e:	bf00      	nop
 800a560:	0800d98b 	.word	0x0800d98b
 800a564:	0800dc70 	.word	0x0800dc70
 800a568:	0800d90f 	.word	0x0800d90f

0800a56c <_free_r>:
 800a56c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a56e:	2900      	cmp	r1, #0
 800a570:	d044      	beq.n	800a5fc <_free_r+0x90>
 800a572:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a576:	9001      	str	r0, [sp, #4]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f1a1 0404 	sub.w	r4, r1, #4
 800a57e:	bfb8      	it	lt
 800a580:	18e4      	addlt	r4, r4, r3
 800a582:	f000 f8e7 	bl	800a754 <__malloc_lock>
 800a586:	4a1e      	ldr	r2, [pc, #120]	; (800a600 <_free_r+0x94>)
 800a588:	9801      	ldr	r0, [sp, #4]
 800a58a:	6813      	ldr	r3, [r2, #0]
 800a58c:	b933      	cbnz	r3, 800a59c <_free_r+0x30>
 800a58e:	6063      	str	r3, [r4, #4]
 800a590:	6014      	str	r4, [r2, #0]
 800a592:	b003      	add	sp, #12
 800a594:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a598:	f000 b8e2 	b.w	800a760 <__malloc_unlock>
 800a59c:	42a3      	cmp	r3, r4
 800a59e:	d908      	bls.n	800a5b2 <_free_r+0x46>
 800a5a0:	6825      	ldr	r5, [r4, #0]
 800a5a2:	1961      	adds	r1, r4, r5
 800a5a4:	428b      	cmp	r3, r1
 800a5a6:	bf01      	itttt	eq
 800a5a8:	6819      	ldreq	r1, [r3, #0]
 800a5aa:	685b      	ldreq	r3, [r3, #4]
 800a5ac:	1949      	addeq	r1, r1, r5
 800a5ae:	6021      	streq	r1, [r4, #0]
 800a5b0:	e7ed      	b.n	800a58e <_free_r+0x22>
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	b10b      	cbz	r3, 800a5bc <_free_r+0x50>
 800a5b8:	42a3      	cmp	r3, r4
 800a5ba:	d9fa      	bls.n	800a5b2 <_free_r+0x46>
 800a5bc:	6811      	ldr	r1, [r2, #0]
 800a5be:	1855      	adds	r5, r2, r1
 800a5c0:	42a5      	cmp	r5, r4
 800a5c2:	d10b      	bne.n	800a5dc <_free_r+0x70>
 800a5c4:	6824      	ldr	r4, [r4, #0]
 800a5c6:	4421      	add	r1, r4
 800a5c8:	1854      	adds	r4, r2, r1
 800a5ca:	42a3      	cmp	r3, r4
 800a5cc:	6011      	str	r1, [r2, #0]
 800a5ce:	d1e0      	bne.n	800a592 <_free_r+0x26>
 800a5d0:	681c      	ldr	r4, [r3, #0]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	6053      	str	r3, [r2, #4]
 800a5d6:	440c      	add	r4, r1
 800a5d8:	6014      	str	r4, [r2, #0]
 800a5da:	e7da      	b.n	800a592 <_free_r+0x26>
 800a5dc:	d902      	bls.n	800a5e4 <_free_r+0x78>
 800a5de:	230c      	movs	r3, #12
 800a5e0:	6003      	str	r3, [r0, #0]
 800a5e2:	e7d6      	b.n	800a592 <_free_r+0x26>
 800a5e4:	6825      	ldr	r5, [r4, #0]
 800a5e6:	1961      	adds	r1, r4, r5
 800a5e8:	428b      	cmp	r3, r1
 800a5ea:	bf04      	itt	eq
 800a5ec:	6819      	ldreq	r1, [r3, #0]
 800a5ee:	685b      	ldreq	r3, [r3, #4]
 800a5f0:	6063      	str	r3, [r4, #4]
 800a5f2:	bf04      	itt	eq
 800a5f4:	1949      	addeq	r1, r1, r5
 800a5f6:	6021      	streq	r1, [r4, #0]
 800a5f8:	6054      	str	r4, [r2, #4]
 800a5fa:	e7ca      	b.n	800a592 <_free_r+0x26>
 800a5fc:	b003      	add	sp, #12
 800a5fe:	bd30      	pop	{r4, r5, pc}
 800a600:	20000d38 	.word	0x20000d38

0800a604 <malloc>:
 800a604:	4b02      	ldr	r3, [pc, #8]	; (800a610 <malloc+0xc>)
 800a606:	4601      	mov	r1, r0
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	f000 b823 	b.w	800a654 <_malloc_r>
 800a60e:	bf00      	nop
 800a610:	20000078 	.word	0x20000078

0800a614 <sbrk_aligned>:
 800a614:	b570      	push	{r4, r5, r6, lr}
 800a616:	4e0e      	ldr	r6, [pc, #56]	; (800a650 <sbrk_aligned+0x3c>)
 800a618:	460c      	mov	r4, r1
 800a61a:	6831      	ldr	r1, [r6, #0]
 800a61c:	4605      	mov	r5, r0
 800a61e:	b911      	cbnz	r1, 800a626 <sbrk_aligned+0x12>
 800a620:	f002 f9ae 	bl	800c980 <_sbrk_r>
 800a624:	6030      	str	r0, [r6, #0]
 800a626:	4621      	mov	r1, r4
 800a628:	4628      	mov	r0, r5
 800a62a:	f002 f9a9 	bl	800c980 <_sbrk_r>
 800a62e:	1c43      	adds	r3, r0, #1
 800a630:	d00a      	beq.n	800a648 <sbrk_aligned+0x34>
 800a632:	1cc4      	adds	r4, r0, #3
 800a634:	f024 0403 	bic.w	r4, r4, #3
 800a638:	42a0      	cmp	r0, r4
 800a63a:	d007      	beq.n	800a64c <sbrk_aligned+0x38>
 800a63c:	1a21      	subs	r1, r4, r0
 800a63e:	4628      	mov	r0, r5
 800a640:	f002 f99e 	bl	800c980 <_sbrk_r>
 800a644:	3001      	adds	r0, #1
 800a646:	d101      	bne.n	800a64c <sbrk_aligned+0x38>
 800a648:	f04f 34ff 	mov.w	r4, #4294967295
 800a64c:	4620      	mov	r0, r4
 800a64e:	bd70      	pop	{r4, r5, r6, pc}
 800a650:	20000d3c 	.word	0x20000d3c

0800a654 <_malloc_r>:
 800a654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a658:	1ccd      	adds	r5, r1, #3
 800a65a:	f025 0503 	bic.w	r5, r5, #3
 800a65e:	3508      	adds	r5, #8
 800a660:	2d0c      	cmp	r5, #12
 800a662:	bf38      	it	cc
 800a664:	250c      	movcc	r5, #12
 800a666:	2d00      	cmp	r5, #0
 800a668:	4607      	mov	r7, r0
 800a66a:	db01      	blt.n	800a670 <_malloc_r+0x1c>
 800a66c:	42a9      	cmp	r1, r5
 800a66e:	d905      	bls.n	800a67c <_malloc_r+0x28>
 800a670:	230c      	movs	r3, #12
 800a672:	603b      	str	r3, [r7, #0]
 800a674:	2600      	movs	r6, #0
 800a676:	4630      	mov	r0, r6
 800a678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a67c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a750 <_malloc_r+0xfc>
 800a680:	f000 f868 	bl	800a754 <__malloc_lock>
 800a684:	f8d8 3000 	ldr.w	r3, [r8]
 800a688:	461c      	mov	r4, r3
 800a68a:	bb5c      	cbnz	r4, 800a6e4 <_malloc_r+0x90>
 800a68c:	4629      	mov	r1, r5
 800a68e:	4638      	mov	r0, r7
 800a690:	f7ff ffc0 	bl	800a614 <sbrk_aligned>
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	4604      	mov	r4, r0
 800a698:	d155      	bne.n	800a746 <_malloc_r+0xf2>
 800a69a:	f8d8 4000 	ldr.w	r4, [r8]
 800a69e:	4626      	mov	r6, r4
 800a6a0:	2e00      	cmp	r6, #0
 800a6a2:	d145      	bne.n	800a730 <_malloc_r+0xdc>
 800a6a4:	2c00      	cmp	r4, #0
 800a6a6:	d048      	beq.n	800a73a <_malloc_r+0xe6>
 800a6a8:	6823      	ldr	r3, [r4, #0]
 800a6aa:	4631      	mov	r1, r6
 800a6ac:	4638      	mov	r0, r7
 800a6ae:	eb04 0903 	add.w	r9, r4, r3
 800a6b2:	f002 f965 	bl	800c980 <_sbrk_r>
 800a6b6:	4581      	cmp	r9, r0
 800a6b8:	d13f      	bne.n	800a73a <_malloc_r+0xe6>
 800a6ba:	6821      	ldr	r1, [r4, #0]
 800a6bc:	1a6d      	subs	r5, r5, r1
 800a6be:	4629      	mov	r1, r5
 800a6c0:	4638      	mov	r0, r7
 800a6c2:	f7ff ffa7 	bl	800a614 <sbrk_aligned>
 800a6c6:	3001      	adds	r0, #1
 800a6c8:	d037      	beq.n	800a73a <_malloc_r+0xe6>
 800a6ca:	6823      	ldr	r3, [r4, #0]
 800a6cc:	442b      	add	r3, r5
 800a6ce:	6023      	str	r3, [r4, #0]
 800a6d0:	f8d8 3000 	ldr.w	r3, [r8]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d038      	beq.n	800a74a <_malloc_r+0xf6>
 800a6d8:	685a      	ldr	r2, [r3, #4]
 800a6da:	42a2      	cmp	r2, r4
 800a6dc:	d12b      	bne.n	800a736 <_malloc_r+0xe2>
 800a6de:	2200      	movs	r2, #0
 800a6e0:	605a      	str	r2, [r3, #4]
 800a6e2:	e00f      	b.n	800a704 <_malloc_r+0xb0>
 800a6e4:	6822      	ldr	r2, [r4, #0]
 800a6e6:	1b52      	subs	r2, r2, r5
 800a6e8:	d41f      	bmi.n	800a72a <_malloc_r+0xd6>
 800a6ea:	2a0b      	cmp	r2, #11
 800a6ec:	d917      	bls.n	800a71e <_malloc_r+0xca>
 800a6ee:	1961      	adds	r1, r4, r5
 800a6f0:	42a3      	cmp	r3, r4
 800a6f2:	6025      	str	r5, [r4, #0]
 800a6f4:	bf18      	it	ne
 800a6f6:	6059      	strne	r1, [r3, #4]
 800a6f8:	6863      	ldr	r3, [r4, #4]
 800a6fa:	bf08      	it	eq
 800a6fc:	f8c8 1000 	streq.w	r1, [r8]
 800a700:	5162      	str	r2, [r4, r5]
 800a702:	604b      	str	r3, [r1, #4]
 800a704:	4638      	mov	r0, r7
 800a706:	f104 060b 	add.w	r6, r4, #11
 800a70a:	f000 f829 	bl	800a760 <__malloc_unlock>
 800a70e:	f026 0607 	bic.w	r6, r6, #7
 800a712:	1d23      	adds	r3, r4, #4
 800a714:	1af2      	subs	r2, r6, r3
 800a716:	d0ae      	beq.n	800a676 <_malloc_r+0x22>
 800a718:	1b9b      	subs	r3, r3, r6
 800a71a:	50a3      	str	r3, [r4, r2]
 800a71c:	e7ab      	b.n	800a676 <_malloc_r+0x22>
 800a71e:	42a3      	cmp	r3, r4
 800a720:	6862      	ldr	r2, [r4, #4]
 800a722:	d1dd      	bne.n	800a6e0 <_malloc_r+0x8c>
 800a724:	f8c8 2000 	str.w	r2, [r8]
 800a728:	e7ec      	b.n	800a704 <_malloc_r+0xb0>
 800a72a:	4623      	mov	r3, r4
 800a72c:	6864      	ldr	r4, [r4, #4]
 800a72e:	e7ac      	b.n	800a68a <_malloc_r+0x36>
 800a730:	4634      	mov	r4, r6
 800a732:	6876      	ldr	r6, [r6, #4]
 800a734:	e7b4      	b.n	800a6a0 <_malloc_r+0x4c>
 800a736:	4613      	mov	r3, r2
 800a738:	e7cc      	b.n	800a6d4 <_malloc_r+0x80>
 800a73a:	230c      	movs	r3, #12
 800a73c:	603b      	str	r3, [r7, #0]
 800a73e:	4638      	mov	r0, r7
 800a740:	f000 f80e 	bl	800a760 <__malloc_unlock>
 800a744:	e797      	b.n	800a676 <_malloc_r+0x22>
 800a746:	6025      	str	r5, [r4, #0]
 800a748:	e7dc      	b.n	800a704 <_malloc_r+0xb0>
 800a74a:	605b      	str	r3, [r3, #4]
 800a74c:	deff      	udf	#255	; 0xff
 800a74e:	bf00      	nop
 800a750:	20000d38 	.word	0x20000d38

0800a754 <__malloc_lock>:
 800a754:	4801      	ldr	r0, [pc, #4]	; (800a75c <__malloc_lock+0x8>)
 800a756:	f7ff b878 	b.w	800984a <__retarget_lock_acquire_recursive>
 800a75a:	bf00      	nop
 800a75c:	20000d34 	.word	0x20000d34

0800a760 <__malloc_unlock>:
 800a760:	4801      	ldr	r0, [pc, #4]	; (800a768 <__malloc_unlock+0x8>)
 800a762:	f7ff b873 	b.w	800984c <__retarget_lock_release_recursive>
 800a766:	bf00      	nop
 800a768:	20000d34 	.word	0x20000d34

0800a76c <_Balloc>:
 800a76c:	b570      	push	{r4, r5, r6, lr}
 800a76e:	69c6      	ldr	r6, [r0, #28]
 800a770:	4604      	mov	r4, r0
 800a772:	460d      	mov	r5, r1
 800a774:	b976      	cbnz	r6, 800a794 <_Balloc+0x28>
 800a776:	2010      	movs	r0, #16
 800a778:	f7ff ff44 	bl	800a604 <malloc>
 800a77c:	4602      	mov	r2, r0
 800a77e:	61e0      	str	r0, [r4, #28]
 800a780:	b920      	cbnz	r0, 800a78c <_Balloc+0x20>
 800a782:	4b18      	ldr	r3, [pc, #96]	; (800a7e4 <_Balloc+0x78>)
 800a784:	4818      	ldr	r0, [pc, #96]	; (800a7e8 <_Balloc+0x7c>)
 800a786:	216b      	movs	r1, #107	; 0x6b
 800a788:	f002 f912 	bl	800c9b0 <__assert_func>
 800a78c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a790:	6006      	str	r6, [r0, #0]
 800a792:	60c6      	str	r6, [r0, #12]
 800a794:	69e6      	ldr	r6, [r4, #28]
 800a796:	68f3      	ldr	r3, [r6, #12]
 800a798:	b183      	cbz	r3, 800a7bc <_Balloc+0x50>
 800a79a:	69e3      	ldr	r3, [r4, #28]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7a2:	b9b8      	cbnz	r0, 800a7d4 <_Balloc+0x68>
 800a7a4:	2101      	movs	r1, #1
 800a7a6:	fa01 f605 	lsl.w	r6, r1, r5
 800a7aa:	1d72      	adds	r2, r6, #5
 800a7ac:	0092      	lsls	r2, r2, #2
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f002 f91c 	bl	800c9ec <_calloc_r>
 800a7b4:	b160      	cbz	r0, 800a7d0 <_Balloc+0x64>
 800a7b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7ba:	e00e      	b.n	800a7da <_Balloc+0x6e>
 800a7bc:	2221      	movs	r2, #33	; 0x21
 800a7be:	2104      	movs	r1, #4
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f002 f913 	bl	800c9ec <_calloc_r>
 800a7c6:	69e3      	ldr	r3, [r4, #28]
 800a7c8:	60f0      	str	r0, [r6, #12]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1e4      	bne.n	800a79a <_Balloc+0x2e>
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	bd70      	pop	{r4, r5, r6, pc}
 800a7d4:	6802      	ldr	r2, [r0, #0]
 800a7d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7da:	2300      	movs	r3, #0
 800a7dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7e0:	e7f7      	b.n	800a7d2 <_Balloc+0x66>
 800a7e2:	bf00      	nop
 800a7e4:	0800d91c 	.word	0x0800d91c
 800a7e8:	0800d99c 	.word	0x0800d99c

0800a7ec <_Bfree>:
 800a7ec:	b570      	push	{r4, r5, r6, lr}
 800a7ee:	69c6      	ldr	r6, [r0, #28]
 800a7f0:	4605      	mov	r5, r0
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	b976      	cbnz	r6, 800a814 <_Bfree+0x28>
 800a7f6:	2010      	movs	r0, #16
 800a7f8:	f7ff ff04 	bl	800a604 <malloc>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	61e8      	str	r0, [r5, #28]
 800a800:	b920      	cbnz	r0, 800a80c <_Bfree+0x20>
 800a802:	4b09      	ldr	r3, [pc, #36]	; (800a828 <_Bfree+0x3c>)
 800a804:	4809      	ldr	r0, [pc, #36]	; (800a82c <_Bfree+0x40>)
 800a806:	218f      	movs	r1, #143	; 0x8f
 800a808:	f002 f8d2 	bl	800c9b0 <__assert_func>
 800a80c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a810:	6006      	str	r6, [r0, #0]
 800a812:	60c6      	str	r6, [r0, #12]
 800a814:	b13c      	cbz	r4, 800a826 <_Bfree+0x3a>
 800a816:	69eb      	ldr	r3, [r5, #28]
 800a818:	6862      	ldr	r2, [r4, #4]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a820:	6021      	str	r1, [r4, #0]
 800a822:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a826:	bd70      	pop	{r4, r5, r6, pc}
 800a828:	0800d91c 	.word	0x0800d91c
 800a82c:	0800d99c 	.word	0x0800d99c

0800a830 <__multadd>:
 800a830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a834:	690d      	ldr	r5, [r1, #16]
 800a836:	4607      	mov	r7, r0
 800a838:	460c      	mov	r4, r1
 800a83a:	461e      	mov	r6, r3
 800a83c:	f101 0c14 	add.w	ip, r1, #20
 800a840:	2000      	movs	r0, #0
 800a842:	f8dc 3000 	ldr.w	r3, [ip]
 800a846:	b299      	uxth	r1, r3
 800a848:	fb02 6101 	mla	r1, r2, r1, r6
 800a84c:	0c1e      	lsrs	r6, r3, #16
 800a84e:	0c0b      	lsrs	r3, r1, #16
 800a850:	fb02 3306 	mla	r3, r2, r6, r3
 800a854:	b289      	uxth	r1, r1
 800a856:	3001      	adds	r0, #1
 800a858:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a85c:	4285      	cmp	r5, r0
 800a85e:	f84c 1b04 	str.w	r1, [ip], #4
 800a862:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a866:	dcec      	bgt.n	800a842 <__multadd+0x12>
 800a868:	b30e      	cbz	r6, 800a8ae <__multadd+0x7e>
 800a86a:	68a3      	ldr	r3, [r4, #8]
 800a86c:	42ab      	cmp	r3, r5
 800a86e:	dc19      	bgt.n	800a8a4 <__multadd+0x74>
 800a870:	6861      	ldr	r1, [r4, #4]
 800a872:	4638      	mov	r0, r7
 800a874:	3101      	adds	r1, #1
 800a876:	f7ff ff79 	bl	800a76c <_Balloc>
 800a87a:	4680      	mov	r8, r0
 800a87c:	b928      	cbnz	r0, 800a88a <__multadd+0x5a>
 800a87e:	4602      	mov	r2, r0
 800a880:	4b0c      	ldr	r3, [pc, #48]	; (800a8b4 <__multadd+0x84>)
 800a882:	480d      	ldr	r0, [pc, #52]	; (800a8b8 <__multadd+0x88>)
 800a884:	21ba      	movs	r1, #186	; 0xba
 800a886:	f002 f893 	bl	800c9b0 <__assert_func>
 800a88a:	6922      	ldr	r2, [r4, #16]
 800a88c:	3202      	adds	r2, #2
 800a88e:	f104 010c 	add.w	r1, r4, #12
 800a892:	0092      	lsls	r2, r2, #2
 800a894:	300c      	adds	r0, #12
 800a896:	f7fe ffda 	bl	800984e <memcpy>
 800a89a:	4621      	mov	r1, r4
 800a89c:	4638      	mov	r0, r7
 800a89e:	f7ff ffa5 	bl	800a7ec <_Bfree>
 800a8a2:	4644      	mov	r4, r8
 800a8a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8a8:	3501      	adds	r5, #1
 800a8aa:	615e      	str	r6, [r3, #20]
 800a8ac:	6125      	str	r5, [r4, #16]
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b4:	0800d98b 	.word	0x0800d98b
 800a8b8:	0800d99c 	.word	0x0800d99c

0800a8bc <__s2b>:
 800a8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8c0:	460c      	mov	r4, r1
 800a8c2:	4615      	mov	r5, r2
 800a8c4:	461f      	mov	r7, r3
 800a8c6:	2209      	movs	r2, #9
 800a8c8:	3308      	adds	r3, #8
 800a8ca:	4606      	mov	r6, r0
 800a8cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	db09      	blt.n	800a8ec <__s2b+0x30>
 800a8d8:	4630      	mov	r0, r6
 800a8da:	f7ff ff47 	bl	800a76c <_Balloc>
 800a8de:	b940      	cbnz	r0, 800a8f2 <__s2b+0x36>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	4b19      	ldr	r3, [pc, #100]	; (800a948 <__s2b+0x8c>)
 800a8e4:	4819      	ldr	r0, [pc, #100]	; (800a94c <__s2b+0x90>)
 800a8e6:	21d3      	movs	r1, #211	; 0xd3
 800a8e8:	f002 f862 	bl	800c9b0 <__assert_func>
 800a8ec:	0052      	lsls	r2, r2, #1
 800a8ee:	3101      	adds	r1, #1
 800a8f0:	e7f0      	b.n	800a8d4 <__s2b+0x18>
 800a8f2:	9b08      	ldr	r3, [sp, #32]
 800a8f4:	6143      	str	r3, [r0, #20]
 800a8f6:	2d09      	cmp	r5, #9
 800a8f8:	f04f 0301 	mov.w	r3, #1
 800a8fc:	6103      	str	r3, [r0, #16]
 800a8fe:	dd16      	ble.n	800a92e <__s2b+0x72>
 800a900:	f104 0909 	add.w	r9, r4, #9
 800a904:	46c8      	mov	r8, r9
 800a906:	442c      	add	r4, r5
 800a908:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a90c:	4601      	mov	r1, r0
 800a90e:	3b30      	subs	r3, #48	; 0x30
 800a910:	220a      	movs	r2, #10
 800a912:	4630      	mov	r0, r6
 800a914:	f7ff ff8c 	bl	800a830 <__multadd>
 800a918:	45a0      	cmp	r8, r4
 800a91a:	d1f5      	bne.n	800a908 <__s2b+0x4c>
 800a91c:	f1a5 0408 	sub.w	r4, r5, #8
 800a920:	444c      	add	r4, r9
 800a922:	1b2d      	subs	r5, r5, r4
 800a924:	1963      	adds	r3, r4, r5
 800a926:	42bb      	cmp	r3, r7
 800a928:	db04      	blt.n	800a934 <__s2b+0x78>
 800a92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a92e:	340a      	adds	r4, #10
 800a930:	2509      	movs	r5, #9
 800a932:	e7f6      	b.n	800a922 <__s2b+0x66>
 800a934:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a938:	4601      	mov	r1, r0
 800a93a:	3b30      	subs	r3, #48	; 0x30
 800a93c:	220a      	movs	r2, #10
 800a93e:	4630      	mov	r0, r6
 800a940:	f7ff ff76 	bl	800a830 <__multadd>
 800a944:	e7ee      	b.n	800a924 <__s2b+0x68>
 800a946:	bf00      	nop
 800a948:	0800d98b 	.word	0x0800d98b
 800a94c:	0800d99c 	.word	0x0800d99c

0800a950 <__hi0bits>:
 800a950:	0c03      	lsrs	r3, r0, #16
 800a952:	041b      	lsls	r3, r3, #16
 800a954:	b9d3      	cbnz	r3, 800a98c <__hi0bits+0x3c>
 800a956:	0400      	lsls	r0, r0, #16
 800a958:	2310      	movs	r3, #16
 800a95a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a95e:	bf04      	itt	eq
 800a960:	0200      	lsleq	r0, r0, #8
 800a962:	3308      	addeq	r3, #8
 800a964:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a968:	bf04      	itt	eq
 800a96a:	0100      	lsleq	r0, r0, #4
 800a96c:	3304      	addeq	r3, #4
 800a96e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a972:	bf04      	itt	eq
 800a974:	0080      	lsleq	r0, r0, #2
 800a976:	3302      	addeq	r3, #2
 800a978:	2800      	cmp	r0, #0
 800a97a:	db05      	blt.n	800a988 <__hi0bits+0x38>
 800a97c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a980:	f103 0301 	add.w	r3, r3, #1
 800a984:	bf08      	it	eq
 800a986:	2320      	moveq	r3, #32
 800a988:	4618      	mov	r0, r3
 800a98a:	4770      	bx	lr
 800a98c:	2300      	movs	r3, #0
 800a98e:	e7e4      	b.n	800a95a <__hi0bits+0xa>

0800a990 <__lo0bits>:
 800a990:	6803      	ldr	r3, [r0, #0]
 800a992:	f013 0207 	ands.w	r2, r3, #7
 800a996:	d00c      	beq.n	800a9b2 <__lo0bits+0x22>
 800a998:	07d9      	lsls	r1, r3, #31
 800a99a:	d422      	bmi.n	800a9e2 <__lo0bits+0x52>
 800a99c:	079a      	lsls	r2, r3, #30
 800a99e:	bf49      	itett	mi
 800a9a0:	085b      	lsrmi	r3, r3, #1
 800a9a2:	089b      	lsrpl	r3, r3, #2
 800a9a4:	6003      	strmi	r3, [r0, #0]
 800a9a6:	2201      	movmi	r2, #1
 800a9a8:	bf5c      	itt	pl
 800a9aa:	6003      	strpl	r3, [r0, #0]
 800a9ac:	2202      	movpl	r2, #2
 800a9ae:	4610      	mov	r0, r2
 800a9b0:	4770      	bx	lr
 800a9b2:	b299      	uxth	r1, r3
 800a9b4:	b909      	cbnz	r1, 800a9ba <__lo0bits+0x2a>
 800a9b6:	0c1b      	lsrs	r3, r3, #16
 800a9b8:	2210      	movs	r2, #16
 800a9ba:	b2d9      	uxtb	r1, r3
 800a9bc:	b909      	cbnz	r1, 800a9c2 <__lo0bits+0x32>
 800a9be:	3208      	adds	r2, #8
 800a9c0:	0a1b      	lsrs	r3, r3, #8
 800a9c2:	0719      	lsls	r1, r3, #28
 800a9c4:	bf04      	itt	eq
 800a9c6:	091b      	lsreq	r3, r3, #4
 800a9c8:	3204      	addeq	r2, #4
 800a9ca:	0799      	lsls	r1, r3, #30
 800a9cc:	bf04      	itt	eq
 800a9ce:	089b      	lsreq	r3, r3, #2
 800a9d0:	3202      	addeq	r2, #2
 800a9d2:	07d9      	lsls	r1, r3, #31
 800a9d4:	d403      	bmi.n	800a9de <__lo0bits+0x4e>
 800a9d6:	085b      	lsrs	r3, r3, #1
 800a9d8:	f102 0201 	add.w	r2, r2, #1
 800a9dc:	d003      	beq.n	800a9e6 <__lo0bits+0x56>
 800a9de:	6003      	str	r3, [r0, #0]
 800a9e0:	e7e5      	b.n	800a9ae <__lo0bits+0x1e>
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	e7e3      	b.n	800a9ae <__lo0bits+0x1e>
 800a9e6:	2220      	movs	r2, #32
 800a9e8:	e7e1      	b.n	800a9ae <__lo0bits+0x1e>
	...

0800a9ec <__i2b>:
 800a9ec:	b510      	push	{r4, lr}
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	2101      	movs	r1, #1
 800a9f2:	f7ff febb 	bl	800a76c <_Balloc>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	b928      	cbnz	r0, 800aa06 <__i2b+0x1a>
 800a9fa:	4b05      	ldr	r3, [pc, #20]	; (800aa10 <__i2b+0x24>)
 800a9fc:	4805      	ldr	r0, [pc, #20]	; (800aa14 <__i2b+0x28>)
 800a9fe:	f240 1145 	movw	r1, #325	; 0x145
 800aa02:	f001 ffd5 	bl	800c9b0 <__assert_func>
 800aa06:	2301      	movs	r3, #1
 800aa08:	6144      	str	r4, [r0, #20]
 800aa0a:	6103      	str	r3, [r0, #16]
 800aa0c:	bd10      	pop	{r4, pc}
 800aa0e:	bf00      	nop
 800aa10:	0800d98b 	.word	0x0800d98b
 800aa14:	0800d99c 	.word	0x0800d99c

0800aa18 <__multiply>:
 800aa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1c:	4691      	mov	r9, r2
 800aa1e:	690a      	ldr	r2, [r1, #16]
 800aa20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	bfb8      	it	lt
 800aa28:	460b      	movlt	r3, r1
 800aa2a:	460c      	mov	r4, r1
 800aa2c:	bfbc      	itt	lt
 800aa2e:	464c      	movlt	r4, r9
 800aa30:	4699      	movlt	r9, r3
 800aa32:	6927      	ldr	r7, [r4, #16]
 800aa34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa38:	68a3      	ldr	r3, [r4, #8]
 800aa3a:	6861      	ldr	r1, [r4, #4]
 800aa3c:	eb07 060a 	add.w	r6, r7, sl
 800aa40:	42b3      	cmp	r3, r6
 800aa42:	b085      	sub	sp, #20
 800aa44:	bfb8      	it	lt
 800aa46:	3101      	addlt	r1, #1
 800aa48:	f7ff fe90 	bl	800a76c <_Balloc>
 800aa4c:	b930      	cbnz	r0, 800aa5c <__multiply+0x44>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	4b44      	ldr	r3, [pc, #272]	; (800ab64 <__multiply+0x14c>)
 800aa52:	4845      	ldr	r0, [pc, #276]	; (800ab68 <__multiply+0x150>)
 800aa54:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aa58:	f001 ffaa 	bl	800c9b0 <__assert_func>
 800aa5c:	f100 0514 	add.w	r5, r0, #20
 800aa60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa64:	462b      	mov	r3, r5
 800aa66:	2200      	movs	r2, #0
 800aa68:	4543      	cmp	r3, r8
 800aa6a:	d321      	bcc.n	800aab0 <__multiply+0x98>
 800aa6c:	f104 0314 	add.w	r3, r4, #20
 800aa70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aa74:	f109 0314 	add.w	r3, r9, #20
 800aa78:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aa7c:	9202      	str	r2, [sp, #8]
 800aa7e:	1b3a      	subs	r2, r7, r4
 800aa80:	3a15      	subs	r2, #21
 800aa82:	f022 0203 	bic.w	r2, r2, #3
 800aa86:	3204      	adds	r2, #4
 800aa88:	f104 0115 	add.w	r1, r4, #21
 800aa8c:	428f      	cmp	r7, r1
 800aa8e:	bf38      	it	cc
 800aa90:	2204      	movcc	r2, #4
 800aa92:	9201      	str	r2, [sp, #4]
 800aa94:	9a02      	ldr	r2, [sp, #8]
 800aa96:	9303      	str	r3, [sp, #12]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d80c      	bhi.n	800aab6 <__multiply+0x9e>
 800aa9c:	2e00      	cmp	r6, #0
 800aa9e:	dd03      	ble.n	800aaa8 <__multiply+0x90>
 800aaa0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d05b      	beq.n	800ab60 <__multiply+0x148>
 800aaa8:	6106      	str	r6, [r0, #16]
 800aaaa:	b005      	add	sp, #20
 800aaac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aab0:	f843 2b04 	str.w	r2, [r3], #4
 800aab4:	e7d8      	b.n	800aa68 <__multiply+0x50>
 800aab6:	f8b3 a000 	ldrh.w	sl, [r3]
 800aaba:	f1ba 0f00 	cmp.w	sl, #0
 800aabe:	d024      	beq.n	800ab0a <__multiply+0xf2>
 800aac0:	f104 0e14 	add.w	lr, r4, #20
 800aac4:	46a9      	mov	r9, r5
 800aac6:	f04f 0c00 	mov.w	ip, #0
 800aaca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aace:	f8d9 1000 	ldr.w	r1, [r9]
 800aad2:	fa1f fb82 	uxth.w	fp, r2
 800aad6:	b289      	uxth	r1, r1
 800aad8:	fb0a 110b 	mla	r1, sl, fp, r1
 800aadc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aae0:	f8d9 2000 	ldr.w	r2, [r9]
 800aae4:	4461      	add	r1, ip
 800aae6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aaea:	fb0a c20b 	mla	r2, sl, fp, ip
 800aaee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aaf2:	b289      	uxth	r1, r1
 800aaf4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aaf8:	4577      	cmp	r7, lr
 800aafa:	f849 1b04 	str.w	r1, [r9], #4
 800aafe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab02:	d8e2      	bhi.n	800aaca <__multiply+0xb2>
 800ab04:	9a01      	ldr	r2, [sp, #4]
 800ab06:	f845 c002 	str.w	ip, [r5, r2]
 800ab0a:	9a03      	ldr	r2, [sp, #12]
 800ab0c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab10:	3304      	adds	r3, #4
 800ab12:	f1b9 0f00 	cmp.w	r9, #0
 800ab16:	d021      	beq.n	800ab5c <__multiply+0x144>
 800ab18:	6829      	ldr	r1, [r5, #0]
 800ab1a:	f104 0c14 	add.w	ip, r4, #20
 800ab1e:	46ae      	mov	lr, r5
 800ab20:	f04f 0a00 	mov.w	sl, #0
 800ab24:	f8bc b000 	ldrh.w	fp, [ip]
 800ab28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab2c:	fb09 220b 	mla	r2, r9, fp, r2
 800ab30:	4452      	add	r2, sl
 800ab32:	b289      	uxth	r1, r1
 800ab34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab38:	f84e 1b04 	str.w	r1, [lr], #4
 800ab3c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ab40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab44:	f8be 1000 	ldrh.w	r1, [lr]
 800ab48:	fb09 110a 	mla	r1, r9, sl, r1
 800ab4c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ab50:	4567      	cmp	r7, ip
 800ab52:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab56:	d8e5      	bhi.n	800ab24 <__multiply+0x10c>
 800ab58:	9a01      	ldr	r2, [sp, #4]
 800ab5a:	50a9      	str	r1, [r5, r2]
 800ab5c:	3504      	adds	r5, #4
 800ab5e:	e799      	b.n	800aa94 <__multiply+0x7c>
 800ab60:	3e01      	subs	r6, #1
 800ab62:	e79b      	b.n	800aa9c <__multiply+0x84>
 800ab64:	0800d98b 	.word	0x0800d98b
 800ab68:	0800d99c 	.word	0x0800d99c

0800ab6c <__pow5mult>:
 800ab6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab70:	4615      	mov	r5, r2
 800ab72:	f012 0203 	ands.w	r2, r2, #3
 800ab76:	4606      	mov	r6, r0
 800ab78:	460f      	mov	r7, r1
 800ab7a:	d007      	beq.n	800ab8c <__pow5mult+0x20>
 800ab7c:	4c25      	ldr	r4, [pc, #148]	; (800ac14 <__pow5mult+0xa8>)
 800ab7e:	3a01      	subs	r2, #1
 800ab80:	2300      	movs	r3, #0
 800ab82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab86:	f7ff fe53 	bl	800a830 <__multadd>
 800ab8a:	4607      	mov	r7, r0
 800ab8c:	10ad      	asrs	r5, r5, #2
 800ab8e:	d03d      	beq.n	800ac0c <__pow5mult+0xa0>
 800ab90:	69f4      	ldr	r4, [r6, #28]
 800ab92:	b97c      	cbnz	r4, 800abb4 <__pow5mult+0x48>
 800ab94:	2010      	movs	r0, #16
 800ab96:	f7ff fd35 	bl	800a604 <malloc>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	61f0      	str	r0, [r6, #28]
 800ab9e:	b928      	cbnz	r0, 800abac <__pow5mult+0x40>
 800aba0:	4b1d      	ldr	r3, [pc, #116]	; (800ac18 <__pow5mult+0xac>)
 800aba2:	481e      	ldr	r0, [pc, #120]	; (800ac1c <__pow5mult+0xb0>)
 800aba4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800aba8:	f001 ff02 	bl	800c9b0 <__assert_func>
 800abac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800abb0:	6004      	str	r4, [r0, #0]
 800abb2:	60c4      	str	r4, [r0, #12]
 800abb4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800abb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800abbc:	b94c      	cbnz	r4, 800abd2 <__pow5mult+0x66>
 800abbe:	f240 2171 	movw	r1, #625	; 0x271
 800abc2:	4630      	mov	r0, r6
 800abc4:	f7ff ff12 	bl	800a9ec <__i2b>
 800abc8:	2300      	movs	r3, #0
 800abca:	f8c8 0008 	str.w	r0, [r8, #8]
 800abce:	4604      	mov	r4, r0
 800abd0:	6003      	str	r3, [r0, #0]
 800abd2:	f04f 0900 	mov.w	r9, #0
 800abd6:	07eb      	lsls	r3, r5, #31
 800abd8:	d50a      	bpl.n	800abf0 <__pow5mult+0x84>
 800abda:	4639      	mov	r1, r7
 800abdc:	4622      	mov	r2, r4
 800abde:	4630      	mov	r0, r6
 800abe0:	f7ff ff1a 	bl	800aa18 <__multiply>
 800abe4:	4639      	mov	r1, r7
 800abe6:	4680      	mov	r8, r0
 800abe8:	4630      	mov	r0, r6
 800abea:	f7ff fdff 	bl	800a7ec <_Bfree>
 800abee:	4647      	mov	r7, r8
 800abf0:	106d      	asrs	r5, r5, #1
 800abf2:	d00b      	beq.n	800ac0c <__pow5mult+0xa0>
 800abf4:	6820      	ldr	r0, [r4, #0]
 800abf6:	b938      	cbnz	r0, 800ac08 <__pow5mult+0x9c>
 800abf8:	4622      	mov	r2, r4
 800abfa:	4621      	mov	r1, r4
 800abfc:	4630      	mov	r0, r6
 800abfe:	f7ff ff0b 	bl	800aa18 <__multiply>
 800ac02:	6020      	str	r0, [r4, #0]
 800ac04:	f8c0 9000 	str.w	r9, [r0]
 800ac08:	4604      	mov	r4, r0
 800ac0a:	e7e4      	b.n	800abd6 <__pow5mult+0x6a>
 800ac0c:	4638      	mov	r0, r7
 800ac0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac12:	bf00      	nop
 800ac14:	0800dae8 	.word	0x0800dae8
 800ac18:	0800d91c 	.word	0x0800d91c
 800ac1c:	0800d99c 	.word	0x0800d99c

0800ac20 <__lshift>:
 800ac20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac24:	460c      	mov	r4, r1
 800ac26:	6849      	ldr	r1, [r1, #4]
 800ac28:	6923      	ldr	r3, [r4, #16]
 800ac2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac2e:	68a3      	ldr	r3, [r4, #8]
 800ac30:	4607      	mov	r7, r0
 800ac32:	4691      	mov	r9, r2
 800ac34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac38:	f108 0601 	add.w	r6, r8, #1
 800ac3c:	42b3      	cmp	r3, r6
 800ac3e:	db0b      	blt.n	800ac58 <__lshift+0x38>
 800ac40:	4638      	mov	r0, r7
 800ac42:	f7ff fd93 	bl	800a76c <_Balloc>
 800ac46:	4605      	mov	r5, r0
 800ac48:	b948      	cbnz	r0, 800ac5e <__lshift+0x3e>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	4b28      	ldr	r3, [pc, #160]	; (800acf0 <__lshift+0xd0>)
 800ac4e:	4829      	ldr	r0, [pc, #164]	; (800acf4 <__lshift+0xd4>)
 800ac50:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ac54:	f001 feac 	bl	800c9b0 <__assert_func>
 800ac58:	3101      	adds	r1, #1
 800ac5a:	005b      	lsls	r3, r3, #1
 800ac5c:	e7ee      	b.n	800ac3c <__lshift+0x1c>
 800ac5e:	2300      	movs	r3, #0
 800ac60:	f100 0114 	add.w	r1, r0, #20
 800ac64:	f100 0210 	add.w	r2, r0, #16
 800ac68:	4618      	mov	r0, r3
 800ac6a:	4553      	cmp	r3, sl
 800ac6c:	db33      	blt.n	800acd6 <__lshift+0xb6>
 800ac6e:	6920      	ldr	r0, [r4, #16]
 800ac70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac74:	f104 0314 	add.w	r3, r4, #20
 800ac78:	f019 091f 	ands.w	r9, r9, #31
 800ac7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac84:	d02b      	beq.n	800acde <__lshift+0xbe>
 800ac86:	f1c9 0e20 	rsb	lr, r9, #32
 800ac8a:	468a      	mov	sl, r1
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	6818      	ldr	r0, [r3, #0]
 800ac90:	fa00 f009 	lsl.w	r0, r0, r9
 800ac94:	4310      	orrs	r0, r2
 800ac96:	f84a 0b04 	str.w	r0, [sl], #4
 800ac9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac9e:	459c      	cmp	ip, r3
 800aca0:	fa22 f20e 	lsr.w	r2, r2, lr
 800aca4:	d8f3      	bhi.n	800ac8e <__lshift+0x6e>
 800aca6:	ebac 0304 	sub.w	r3, ip, r4
 800acaa:	3b15      	subs	r3, #21
 800acac:	f023 0303 	bic.w	r3, r3, #3
 800acb0:	3304      	adds	r3, #4
 800acb2:	f104 0015 	add.w	r0, r4, #21
 800acb6:	4584      	cmp	ip, r0
 800acb8:	bf38      	it	cc
 800acba:	2304      	movcc	r3, #4
 800acbc:	50ca      	str	r2, [r1, r3]
 800acbe:	b10a      	cbz	r2, 800acc4 <__lshift+0xa4>
 800acc0:	f108 0602 	add.w	r6, r8, #2
 800acc4:	3e01      	subs	r6, #1
 800acc6:	4638      	mov	r0, r7
 800acc8:	612e      	str	r6, [r5, #16]
 800acca:	4621      	mov	r1, r4
 800accc:	f7ff fd8e 	bl	800a7ec <_Bfree>
 800acd0:	4628      	mov	r0, r5
 800acd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acd6:	f842 0f04 	str.w	r0, [r2, #4]!
 800acda:	3301      	adds	r3, #1
 800acdc:	e7c5      	b.n	800ac6a <__lshift+0x4a>
 800acde:	3904      	subs	r1, #4
 800ace0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ace4:	f841 2f04 	str.w	r2, [r1, #4]!
 800ace8:	459c      	cmp	ip, r3
 800acea:	d8f9      	bhi.n	800ace0 <__lshift+0xc0>
 800acec:	e7ea      	b.n	800acc4 <__lshift+0xa4>
 800acee:	bf00      	nop
 800acf0:	0800d98b 	.word	0x0800d98b
 800acf4:	0800d99c 	.word	0x0800d99c

0800acf8 <__mcmp>:
 800acf8:	b530      	push	{r4, r5, lr}
 800acfa:	6902      	ldr	r2, [r0, #16]
 800acfc:	690c      	ldr	r4, [r1, #16]
 800acfe:	1b12      	subs	r2, r2, r4
 800ad00:	d10e      	bne.n	800ad20 <__mcmp+0x28>
 800ad02:	f100 0314 	add.w	r3, r0, #20
 800ad06:	3114      	adds	r1, #20
 800ad08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad18:	42a5      	cmp	r5, r4
 800ad1a:	d003      	beq.n	800ad24 <__mcmp+0x2c>
 800ad1c:	d305      	bcc.n	800ad2a <__mcmp+0x32>
 800ad1e:	2201      	movs	r2, #1
 800ad20:	4610      	mov	r0, r2
 800ad22:	bd30      	pop	{r4, r5, pc}
 800ad24:	4283      	cmp	r3, r0
 800ad26:	d3f3      	bcc.n	800ad10 <__mcmp+0x18>
 800ad28:	e7fa      	b.n	800ad20 <__mcmp+0x28>
 800ad2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad2e:	e7f7      	b.n	800ad20 <__mcmp+0x28>

0800ad30 <__mdiff>:
 800ad30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad34:	460c      	mov	r4, r1
 800ad36:	4606      	mov	r6, r0
 800ad38:	4611      	mov	r1, r2
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	4690      	mov	r8, r2
 800ad3e:	f7ff ffdb 	bl	800acf8 <__mcmp>
 800ad42:	1e05      	subs	r5, r0, #0
 800ad44:	d110      	bne.n	800ad68 <__mdiff+0x38>
 800ad46:	4629      	mov	r1, r5
 800ad48:	4630      	mov	r0, r6
 800ad4a:	f7ff fd0f 	bl	800a76c <_Balloc>
 800ad4e:	b930      	cbnz	r0, 800ad5e <__mdiff+0x2e>
 800ad50:	4b3a      	ldr	r3, [pc, #232]	; (800ae3c <__mdiff+0x10c>)
 800ad52:	4602      	mov	r2, r0
 800ad54:	f240 2137 	movw	r1, #567	; 0x237
 800ad58:	4839      	ldr	r0, [pc, #228]	; (800ae40 <__mdiff+0x110>)
 800ad5a:	f001 fe29 	bl	800c9b0 <__assert_func>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad68:	bfa4      	itt	ge
 800ad6a:	4643      	movge	r3, r8
 800ad6c:	46a0      	movge	r8, r4
 800ad6e:	4630      	mov	r0, r6
 800ad70:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad74:	bfa6      	itte	ge
 800ad76:	461c      	movge	r4, r3
 800ad78:	2500      	movge	r5, #0
 800ad7a:	2501      	movlt	r5, #1
 800ad7c:	f7ff fcf6 	bl	800a76c <_Balloc>
 800ad80:	b920      	cbnz	r0, 800ad8c <__mdiff+0x5c>
 800ad82:	4b2e      	ldr	r3, [pc, #184]	; (800ae3c <__mdiff+0x10c>)
 800ad84:	4602      	mov	r2, r0
 800ad86:	f240 2145 	movw	r1, #581	; 0x245
 800ad8a:	e7e5      	b.n	800ad58 <__mdiff+0x28>
 800ad8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad90:	6926      	ldr	r6, [r4, #16]
 800ad92:	60c5      	str	r5, [r0, #12]
 800ad94:	f104 0914 	add.w	r9, r4, #20
 800ad98:	f108 0514 	add.w	r5, r8, #20
 800ad9c:	f100 0e14 	add.w	lr, r0, #20
 800ada0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ada4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ada8:	f108 0210 	add.w	r2, r8, #16
 800adac:	46f2      	mov	sl, lr
 800adae:	2100      	movs	r1, #0
 800adb0:	f859 3b04 	ldr.w	r3, [r9], #4
 800adb4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800adb8:	fa11 f88b 	uxtah	r8, r1, fp
 800adbc:	b299      	uxth	r1, r3
 800adbe:	0c1b      	lsrs	r3, r3, #16
 800adc0:	eba8 0801 	sub.w	r8, r8, r1
 800adc4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800adc8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800adcc:	fa1f f888 	uxth.w	r8, r8
 800add0:	1419      	asrs	r1, r3, #16
 800add2:	454e      	cmp	r6, r9
 800add4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800add8:	f84a 3b04 	str.w	r3, [sl], #4
 800addc:	d8e8      	bhi.n	800adb0 <__mdiff+0x80>
 800adde:	1b33      	subs	r3, r6, r4
 800ade0:	3b15      	subs	r3, #21
 800ade2:	f023 0303 	bic.w	r3, r3, #3
 800ade6:	3304      	adds	r3, #4
 800ade8:	3415      	adds	r4, #21
 800adea:	42a6      	cmp	r6, r4
 800adec:	bf38      	it	cc
 800adee:	2304      	movcc	r3, #4
 800adf0:	441d      	add	r5, r3
 800adf2:	4473      	add	r3, lr
 800adf4:	469e      	mov	lr, r3
 800adf6:	462e      	mov	r6, r5
 800adf8:	4566      	cmp	r6, ip
 800adfa:	d30e      	bcc.n	800ae1a <__mdiff+0xea>
 800adfc:	f10c 0203 	add.w	r2, ip, #3
 800ae00:	1b52      	subs	r2, r2, r5
 800ae02:	f022 0203 	bic.w	r2, r2, #3
 800ae06:	3d03      	subs	r5, #3
 800ae08:	45ac      	cmp	ip, r5
 800ae0a:	bf38      	it	cc
 800ae0c:	2200      	movcc	r2, #0
 800ae0e:	4413      	add	r3, r2
 800ae10:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ae14:	b17a      	cbz	r2, 800ae36 <__mdiff+0x106>
 800ae16:	6107      	str	r7, [r0, #16]
 800ae18:	e7a4      	b.n	800ad64 <__mdiff+0x34>
 800ae1a:	f856 8b04 	ldr.w	r8, [r6], #4
 800ae1e:	fa11 f288 	uxtah	r2, r1, r8
 800ae22:	1414      	asrs	r4, r2, #16
 800ae24:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae28:	b292      	uxth	r2, r2
 800ae2a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae2e:	f84e 2b04 	str.w	r2, [lr], #4
 800ae32:	1421      	asrs	r1, r4, #16
 800ae34:	e7e0      	b.n	800adf8 <__mdiff+0xc8>
 800ae36:	3f01      	subs	r7, #1
 800ae38:	e7ea      	b.n	800ae10 <__mdiff+0xe0>
 800ae3a:	bf00      	nop
 800ae3c:	0800d98b 	.word	0x0800d98b
 800ae40:	0800d99c 	.word	0x0800d99c

0800ae44 <__ulp>:
 800ae44:	b082      	sub	sp, #8
 800ae46:	ed8d 0b00 	vstr	d0, [sp]
 800ae4a:	9a01      	ldr	r2, [sp, #4]
 800ae4c:	4b0f      	ldr	r3, [pc, #60]	; (800ae8c <__ulp+0x48>)
 800ae4e:	4013      	ands	r3, r2
 800ae50:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	dc08      	bgt.n	800ae6a <__ulp+0x26>
 800ae58:	425b      	negs	r3, r3
 800ae5a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ae5e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ae62:	da04      	bge.n	800ae6e <__ulp+0x2a>
 800ae64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ae68:	4113      	asrs	r3, r2
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	e008      	b.n	800ae80 <__ulp+0x3c>
 800ae6e:	f1a2 0314 	sub.w	r3, r2, #20
 800ae72:	2b1e      	cmp	r3, #30
 800ae74:	bfda      	itte	le
 800ae76:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ae7a:	40da      	lsrle	r2, r3
 800ae7c:	2201      	movgt	r2, #1
 800ae7e:	2300      	movs	r3, #0
 800ae80:	4619      	mov	r1, r3
 800ae82:	4610      	mov	r0, r2
 800ae84:	ec41 0b10 	vmov	d0, r0, r1
 800ae88:	b002      	add	sp, #8
 800ae8a:	4770      	bx	lr
 800ae8c:	7ff00000 	.word	0x7ff00000

0800ae90 <__b2d>:
 800ae90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae94:	6906      	ldr	r6, [r0, #16]
 800ae96:	f100 0814 	add.w	r8, r0, #20
 800ae9a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ae9e:	1f37      	subs	r7, r6, #4
 800aea0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aea4:	4610      	mov	r0, r2
 800aea6:	f7ff fd53 	bl	800a950 <__hi0bits>
 800aeaa:	f1c0 0320 	rsb	r3, r0, #32
 800aeae:	280a      	cmp	r0, #10
 800aeb0:	600b      	str	r3, [r1, #0]
 800aeb2:	491b      	ldr	r1, [pc, #108]	; (800af20 <__b2d+0x90>)
 800aeb4:	dc15      	bgt.n	800aee2 <__b2d+0x52>
 800aeb6:	f1c0 0c0b 	rsb	ip, r0, #11
 800aeba:	fa22 f30c 	lsr.w	r3, r2, ip
 800aebe:	45b8      	cmp	r8, r7
 800aec0:	ea43 0501 	orr.w	r5, r3, r1
 800aec4:	bf34      	ite	cc
 800aec6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aeca:	2300      	movcs	r3, #0
 800aecc:	3015      	adds	r0, #21
 800aece:	fa02 f000 	lsl.w	r0, r2, r0
 800aed2:	fa23 f30c 	lsr.w	r3, r3, ip
 800aed6:	4303      	orrs	r3, r0
 800aed8:	461c      	mov	r4, r3
 800aeda:	ec45 4b10 	vmov	d0, r4, r5
 800aede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aee2:	45b8      	cmp	r8, r7
 800aee4:	bf3a      	itte	cc
 800aee6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aeea:	f1a6 0708 	subcc.w	r7, r6, #8
 800aeee:	2300      	movcs	r3, #0
 800aef0:	380b      	subs	r0, #11
 800aef2:	d012      	beq.n	800af1a <__b2d+0x8a>
 800aef4:	f1c0 0120 	rsb	r1, r0, #32
 800aef8:	fa23 f401 	lsr.w	r4, r3, r1
 800aefc:	4082      	lsls	r2, r0
 800aefe:	4322      	orrs	r2, r4
 800af00:	4547      	cmp	r7, r8
 800af02:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800af06:	bf8c      	ite	hi
 800af08:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800af0c:	2200      	movls	r2, #0
 800af0e:	4083      	lsls	r3, r0
 800af10:	40ca      	lsrs	r2, r1
 800af12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800af16:	4313      	orrs	r3, r2
 800af18:	e7de      	b.n	800aed8 <__b2d+0x48>
 800af1a:	ea42 0501 	orr.w	r5, r2, r1
 800af1e:	e7db      	b.n	800aed8 <__b2d+0x48>
 800af20:	3ff00000 	.word	0x3ff00000

0800af24 <__d2b>:
 800af24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af28:	460f      	mov	r7, r1
 800af2a:	2101      	movs	r1, #1
 800af2c:	ec59 8b10 	vmov	r8, r9, d0
 800af30:	4616      	mov	r6, r2
 800af32:	f7ff fc1b 	bl	800a76c <_Balloc>
 800af36:	4604      	mov	r4, r0
 800af38:	b930      	cbnz	r0, 800af48 <__d2b+0x24>
 800af3a:	4602      	mov	r2, r0
 800af3c:	4b24      	ldr	r3, [pc, #144]	; (800afd0 <__d2b+0xac>)
 800af3e:	4825      	ldr	r0, [pc, #148]	; (800afd4 <__d2b+0xb0>)
 800af40:	f240 310f 	movw	r1, #783	; 0x30f
 800af44:	f001 fd34 	bl	800c9b0 <__assert_func>
 800af48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800af4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af50:	bb2d      	cbnz	r5, 800af9e <__d2b+0x7a>
 800af52:	9301      	str	r3, [sp, #4]
 800af54:	f1b8 0300 	subs.w	r3, r8, #0
 800af58:	d026      	beq.n	800afa8 <__d2b+0x84>
 800af5a:	4668      	mov	r0, sp
 800af5c:	9300      	str	r3, [sp, #0]
 800af5e:	f7ff fd17 	bl	800a990 <__lo0bits>
 800af62:	e9dd 1200 	ldrd	r1, r2, [sp]
 800af66:	b1e8      	cbz	r0, 800afa4 <__d2b+0x80>
 800af68:	f1c0 0320 	rsb	r3, r0, #32
 800af6c:	fa02 f303 	lsl.w	r3, r2, r3
 800af70:	430b      	orrs	r3, r1
 800af72:	40c2      	lsrs	r2, r0
 800af74:	6163      	str	r3, [r4, #20]
 800af76:	9201      	str	r2, [sp, #4]
 800af78:	9b01      	ldr	r3, [sp, #4]
 800af7a:	61a3      	str	r3, [r4, #24]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	bf14      	ite	ne
 800af80:	2202      	movne	r2, #2
 800af82:	2201      	moveq	r2, #1
 800af84:	6122      	str	r2, [r4, #16]
 800af86:	b1bd      	cbz	r5, 800afb8 <__d2b+0x94>
 800af88:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800af8c:	4405      	add	r5, r0
 800af8e:	603d      	str	r5, [r7, #0]
 800af90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af94:	6030      	str	r0, [r6, #0]
 800af96:	4620      	mov	r0, r4
 800af98:	b003      	add	sp, #12
 800af9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800afa2:	e7d6      	b.n	800af52 <__d2b+0x2e>
 800afa4:	6161      	str	r1, [r4, #20]
 800afa6:	e7e7      	b.n	800af78 <__d2b+0x54>
 800afa8:	a801      	add	r0, sp, #4
 800afaa:	f7ff fcf1 	bl	800a990 <__lo0bits>
 800afae:	9b01      	ldr	r3, [sp, #4]
 800afb0:	6163      	str	r3, [r4, #20]
 800afb2:	3020      	adds	r0, #32
 800afb4:	2201      	movs	r2, #1
 800afb6:	e7e5      	b.n	800af84 <__d2b+0x60>
 800afb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800afbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800afc0:	6038      	str	r0, [r7, #0]
 800afc2:	6918      	ldr	r0, [r3, #16]
 800afc4:	f7ff fcc4 	bl	800a950 <__hi0bits>
 800afc8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800afcc:	e7e2      	b.n	800af94 <__d2b+0x70>
 800afce:	bf00      	nop
 800afd0:	0800d98b 	.word	0x0800d98b
 800afd4:	0800d99c 	.word	0x0800d99c

0800afd8 <__ratio>:
 800afd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afdc:	4688      	mov	r8, r1
 800afde:	4669      	mov	r1, sp
 800afe0:	4681      	mov	r9, r0
 800afe2:	f7ff ff55 	bl	800ae90 <__b2d>
 800afe6:	a901      	add	r1, sp, #4
 800afe8:	4640      	mov	r0, r8
 800afea:	ec55 4b10 	vmov	r4, r5, d0
 800afee:	f7ff ff4f 	bl	800ae90 <__b2d>
 800aff2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aff6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800affa:	eba3 0c02 	sub.w	ip, r3, r2
 800affe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b002:	1a9b      	subs	r3, r3, r2
 800b004:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b008:	ec51 0b10 	vmov	r0, r1, d0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	bfd6      	itet	le
 800b010:	460a      	movle	r2, r1
 800b012:	462a      	movgt	r2, r5
 800b014:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b018:	468b      	mov	fp, r1
 800b01a:	462f      	mov	r7, r5
 800b01c:	bfd4      	ite	le
 800b01e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b022:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b026:	4620      	mov	r0, r4
 800b028:	ee10 2a10 	vmov	r2, s0
 800b02c:	465b      	mov	r3, fp
 800b02e:	4639      	mov	r1, r7
 800b030:	f7f5 fc2c 	bl	800088c <__aeabi_ddiv>
 800b034:	ec41 0b10 	vmov	d0, r0, r1
 800b038:	b003      	add	sp, #12
 800b03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b03e <__copybits>:
 800b03e:	3901      	subs	r1, #1
 800b040:	b570      	push	{r4, r5, r6, lr}
 800b042:	1149      	asrs	r1, r1, #5
 800b044:	6914      	ldr	r4, [r2, #16]
 800b046:	3101      	adds	r1, #1
 800b048:	f102 0314 	add.w	r3, r2, #20
 800b04c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b050:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b054:	1f05      	subs	r5, r0, #4
 800b056:	42a3      	cmp	r3, r4
 800b058:	d30c      	bcc.n	800b074 <__copybits+0x36>
 800b05a:	1aa3      	subs	r3, r4, r2
 800b05c:	3b11      	subs	r3, #17
 800b05e:	f023 0303 	bic.w	r3, r3, #3
 800b062:	3211      	adds	r2, #17
 800b064:	42a2      	cmp	r2, r4
 800b066:	bf88      	it	hi
 800b068:	2300      	movhi	r3, #0
 800b06a:	4418      	add	r0, r3
 800b06c:	2300      	movs	r3, #0
 800b06e:	4288      	cmp	r0, r1
 800b070:	d305      	bcc.n	800b07e <__copybits+0x40>
 800b072:	bd70      	pop	{r4, r5, r6, pc}
 800b074:	f853 6b04 	ldr.w	r6, [r3], #4
 800b078:	f845 6f04 	str.w	r6, [r5, #4]!
 800b07c:	e7eb      	b.n	800b056 <__copybits+0x18>
 800b07e:	f840 3b04 	str.w	r3, [r0], #4
 800b082:	e7f4      	b.n	800b06e <__copybits+0x30>

0800b084 <__any_on>:
 800b084:	f100 0214 	add.w	r2, r0, #20
 800b088:	6900      	ldr	r0, [r0, #16]
 800b08a:	114b      	asrs	r3, r1, #5
 800b08c:	4298      	cmp	r0, r3
 800b08e:	b510      	push	{r4, lr}
 800b090:	db11      	blt.n	800b0b6 <__any_on+0x32>
 800b092:	dd0a      	ble.n	800b0aa <__any_on+0x26>
 800b094:	f011 011f 	ands.w	r1, r1, #31
 800b098:	d007      	beq.n	800b0aa <__any_on+0x26>
 800b09a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b09e:	fa24 f001 	lsr.w	r0, r4, r1
 800b0a2:	fa00 f101 	lsl.w	r1, r0, r1
 800b0a6:	428c      	cmp	r4, r1
 800b0a8:	d10b      	bne.n	800b0c2 <__any_on+0x3e>
 800b0aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d803      	bhi.n	800b0ba <__any_on+0x36>
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	bd10      	pop	{r4, pc}
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	e7f7      	b.n	800b0aa <__any_on+0x26>
 800b0ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b0be:	2900      	cmp	r1, #0
 800b0c0:	d0f5      	beq.n	800b0ae <__any_on+0x2a>
 800b0c2:	2001      	movs	r0, #1
 800b0c4:	e7f6      	b.n	800b0b4 <__any_on+0x30>

0800b0c6 <sulp>:
 800b0c6:	b570      	push	{r4, r5, r6, lr}
 800b0c8:	4604      	mov	r4, r0
 800b0ca:	460d      	mov	r5, r1
 800b0cc:	ec45 4b10 	vmov	d0, r4, r5
 800b0d0:	4616      	mov	r6, r2
 800b0d2:	f7ff feb7 	bl	800ae44 <__ulp>
 800b0d6:	ec51 0b10 	vmov	r0, r1, d0
 800b0da:	b17e      	cbz	r6, 800b0fc <sulp+0x36>
 800b0dc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b0e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	dd09      	ble.n	800b0fc <sulp+0x36>
 800b0e8:	051b      	lsls	r3, r3, #20
 800b0ea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b0ee:	2400      	movs	r4, #0
 800b0f0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b0f4:	4622      	mov	r2, r4
 800b0f6:	462b      	mov	r3, r5
 800b0f8:	f7f5 fa9e 	bl	8000638 <__aeabi_dmul>
 800b0fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b100 <_strtod_l>:
 800b100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b104:	ed2d 8b02 	vpush	{d8}
 800b108:	b09b      	sub	sp, #108	; 0x6c
 800b10a:	4604      	mov	r4, r0
 800b10c:	9213      	str	r2, [sp, #76]	; 0x4c
 800b10e:	2200      	movs	r2, #0
 800b110:	9216      	str	r2, [sp, #88]	; 0x58
 800b112:	460d      	mov	r5, r1
 800b114:	f04f 0800 	mov.w	r8, #0
 800b118:	f04f 0900 	mov.w	r9, #0
 800b11c:	460a      	mov	r2, r1
 800b11e:	9215      	str	r2, [sp, #84]	; 0x54
 800b120:	7811      	ldrb	r1, [r2, #0]
 800b122:	292b      	cmp	r1, #43	; 0x2b
 800b124:	d04c      	beq.n	800b1c0 <_strtod_l+0xc0>
 800b126:	d83a      	bhi.n	800b19e <_strtod_l+0x9e>
 800b128:	290d      	cmp	r1, #13
 800b12a:	d834      	bhi.n	800b196 <_strtod_l+0x96>
 800b12c:	2908      	cmp	r1, #8
 800b12e:	d834      	bhi.n	800b19a <_strtod_l+0x9a>
 800b130:	2900      	cmp	r1, #0
 800b132:	d03d      	beq.n	800b1b0 <_strtod_l+0xb0>
 800b134:	2200      	movs	r2, #0
 800b136:	920a      	str	r2, [sp, #40]	; 0x28
 800b138:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b13a:	7832      	ldrb	r2, [r6, #0]
 800b13c:	2a30      	cmp	r2, #48	; 0x30
 800b13e:	f040 80b4 	bne.w	800b2aa <_strtod_l+0x1aa>
 800b142:	7872      	ldrb	r2, [r6, #1]
 800b144:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b148:	2a58      	cmp	r2, #88	; 0x58
 800b14a:	d170      	bne.n	800b22e <_strtod_l+0x12e>
 800b14c:	9302      	str	r3, [sp, #8]
 800b14e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b150:	9301      	str	r3, [sp, #4]
 800b152:	ab16      	add	r3, sp, #88	; 0x58
 800b154:	9300      	str	r3, [sp, #0]
 800b156:	4a8e      	ldr	r2, [pc, #568]	; (800b390 <_strtod_l+0x290>)
 800b158:	ab17      	add	r3, sp, #92	; 0x5c
 800b15a:	a915      	add	r1, sp, #84	; 0x54
 800b15c:	4620      	mov	r0, r4
 800b15e:	f001 fcc3 	bl	800cae8 <__gethex>
 800b162:	f010 070f 	ands.w	r7, r0, #15
 800b166:	4605      	mov	r5, r0
 800b168:	d005      	beq.n	800b176 <_strtod_l+0x76>
 800b16a:	2f06      	cmp	r7, #6
 800b16c:	d12a      	bne.n	800b1c4 <_strtod_l+0xc4>
 800b16e:	3601      	adds	r6, #1
 800b170:	2300      	movs	r3, #0
 800b172:	9615      	str	r6, [sp, #84]	; 0x54
 800b174:	930a      	str	r3, [sp, #40]	; 0x28
 800b176:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b178:	2b00      	cmp	r3, #0
 800b17a:	f040 857f 	bne.w	800bc7c <_strtod_l+0xb7c>
 800b17e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b180:	b1db      	cbz	r3, 800b1ba <_strtod_l+0xba>
 800b182:	4642      	mov	r2, r8
 800b184:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b188:	ec43 2b10 	vmov	d0, r2, r3
 800b18c:	b01b      	add	sp, #108	; 0x6c
 800b18e:	ecbd 8b02 	vpop	{d8}
 800b192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b196:	2920      	cmp	r1, #32
 800b198:	d1cc      	bne.n	800b134 <_strtod_l+0x34>
 800b19a:	3201      	adds	r2, #1
 800b19c:	e7bf      	b.n	800b11e <_strtod_l+0x1e>
 800b19e:	292d      	cmp	r1, #45	; 0x2d
 800b1a0:	d1c8      	bne.n	800b134 <_strtod_l+0x34>
 800b1a2:	2101      	movs	r1, #1
 800b1a4:	910a      	str	r1, [sp, #40]	; 0x28
 800b1a6:	1c51      	adds	r1, r2, #1
 800b1a8:	9115      	str	r1, [sp, #84]	; 0x54
 800b1aa:	7852      	ldrb	r2, [r2, #1]
 800b1ac:	2a00      	cmp	r2, #0
 800b1ae:	d1c3      	bne.n	800b138 <_strtod_l+0x38>
 800b1b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b1b2:	9515      	str	r5, [sp, #84]	; 0x54
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f040 855f 	bne.w	800bc78 <_strtod_l+0xb78>
 800b1ba:	4642      	mov	r2, r8
 800b1bc:	464b      	mov	r3, r9
 800b1be:	e7e3      	b.n	800b188 <_strtod_l+0x88>
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	e7ef      	b.n	800b1a4 <_strtod_l+0xa4>
 800b1c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b1c6:	b13a      	cbz	r2, 800b1d8 <_strtod_l+0xd8>
 800b1c8:	2135      	movs	r1, #53	; 0x35
 800b1ca:	a818      	add	r0, sp, #96	; 0x60
 800b1cc:	f7ff ff37 	bl	800b03e <__copybits>
 800b1d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f7ff fb0a 	bl	800a7ec <_Bfree>
 800b1d8:	3f01      	subs	r7, #1
 800b1da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b1dc:	2f04      	cmp	r7, #4
 800b1de:	d806      	bhi.n	800b1ee <_strtod_l+0xee>
 800b1e0:	e8df f007 	tbb	[pc, r7]
 800b1e4:	201d0314 	.word	0x201d0314
 800b1e8:	14          	.byte	0x14
 800b1e9:	00          	.byte	0x00
 800b1ea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b1ee:	05e9      	lsls	r1, r5, #23
 800b1f0:	bf48      	it	mi
 800b1f2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b1f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b1fa:	0d1b      	lsrs	r3, r3, #20
 800b1fc:	051b      	lsls	r3, r3, #20
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d1b9      	bne.n	800b176 <_strtod_l+0x76>
 800b202:	f7fe faf7 	bl	80097f4 <__errno>
 800b206:	2322      	movs	r3, #34	; 0x22
 800b208:	6003      	str	r3, [r0, #0]
 800b20a:	e7b4      	b.n	800b176 <_strtod_l+0x76>
 800b20c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b210:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b214:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b218:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b21c:	e7e7      	b.n	800b1ee <_strtod_l+0xee>
 800b21e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b398 <_strtod_l+0x298>
 800b222:	e7e4      	b.n	800b1ee <_strtod_l+0xee>
 800b224:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b228:	f04f 38ff 	mov.w	r8, #4294967295
 800b22c:	e7df      	b.n	800b1ee <_strtod_l+0xee>
 800b22e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b230:	1c5a      	adds	r2, r3, #1
 800b232:	9215      	str	r2, [sp, #84]	; 0x54
 800b234:	785b      	ldrb	r3, [r3, #1]
 800b236:	2b30      	cmp	r3, #48	; 0x30
 800b238:	d0f9      	beq.n	800b22e <_strtod_l+0x12e>
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d09b      	beq.n	800b176 <_strtod_l+0x76>
 800b23e:	2301      	movs	r3, #1
 800b240:	f04f 0a00 	mov.w	sl, #0
 800b244:	9304      	str	r3, [sp, #16]
 800b246:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b248:	930b      	str	r3, [sp, #44]	; 0x2c
 800b24a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b24e:	46d3      	mov	fp, sl
 800b250:	220a      	movs	r2, #10
 800b252:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b254:	7806      	ldrb	r6, [r0, #0]
 800b256:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b25a:	b2d9      	uxtb	r1, r3
 800b25c:	2909      	cmp	r1, #9
 800b25e:	d926      	bls.n	800b2ae <_strtod_l+0x1ae>
 800b260:	494c      	ldr	r1, [pc, #304]	; (800b394 <_strtod_l+0x294>)
 800b262:	2201      	movs	r2, #1
 800b264:	f001 fb79 	bl	800c95a <strncmp>
 800b268:	2800      	cmp	r0, #0
 800b26a:	d030      	beq.n	800b2ce <_strtod_l+0x1ce>
 800b26c:	2000      	movs	r0, #0
 800b26e:	4632      	mov	r2, r6
 800b270:	9005      	str	r0, [sp, #20]
 800b272:	465e      	mov	r6, fp
 800b274:	4603      	mov	r3, r0
 800b276:	2a65      	cmp	r2, #101	; 0x65
 800b278:	d001      	beq.n	800b27e <_strtod_l+0x17e>
 800b27a:	2a45      	cmp	r2, #69	; 0x45
 800b27c:	d113      	bne.n	800b2a6 <_strtod_l+0x1a6>
 800b27e:	b91e      	cbnz	r6, 800b288 <_strtod_l+0x188>
 800b280:	9a04      	ldr	r2, [sp, #16]
 800b282:	4302      	orrs	r2, r0
 800b284:	d094      	beq.n	800b1b0 <_strtod_l+0xb0>
 800b286:	2600      	movs	r6, #0
 800b288:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b28a:	1c6a      	adds	r2, r5, #1
 800b28c:	9215      	str	r2, [sp, #84]	; 0x54
 800b28e:	786a      	ldrb	r2, [r5, #1]
 800b290:	2a2b      	cmp	r2, #43	; 0x2b
 800b292:	d074      	beq.n	800b37e <_strtod_l+0x27e>
 800b294:	2a2d      	cmp	r2, #45	; 0x2d
 800b296:	d078      	beq.n	800b38a <_strtod_l+0x28a>
 800b298:	f04f 0c00 	mov.w	ip, #0
 800b29c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b2a0:	2909      	cmp	r1, #9
 800b2a2:	d97f      	bls.n	800b3a4 <_strtod_l+0x2a4>
 800b2a4:	9515      	str	r5, [sp, #84]	; 0x54
 800b2a6:	2700      	movs	r7, #0
 800b2a8:	e09e      	b.n	800b3e8 <_strtod_l+0x2e8>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	e7c8      	b.n	800b240 <_strtod_l+0x140>
 800b2ae:	f1bb 0f08 	cmp.w	fp, #8
 800b2b2:	bfd8      	it	le
 800b2b4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b2b6:	f100 0001 	add.w	r0, r0, #1
 800b2ba:	bfda      	itte	le
 800b2bc:	fb02 3301 	mlale	r3, r2, r1, r3
 800b2c0:	9309      	strle	r3, [sp, #36]	; 0x24
 800b2c2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b2c6:	f10b 0b01 	add.w	fp, fp, #1
 800b2ca:	9015      	str	r0, [sp, #84]	; 0x54
 800b2cc:	e7c1      	b.n	800b252 <_strtod_l+0x152>
 800b2ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2d0:	1c5a      	adds	r2, r3, #1
 800b2d2:	9215      	str	r2, [sp, #84]	; 0x54
 800b2d4:	785a      	ldrb	r2, [r3, #1]
 800b2d6:	f1bb 0f00 	cmp.w	fp, #0
 800b2da:	d037      	beq.n	800b34c <_strtod_l+0x24c>
 800b2dc:	9005      	str	r0, [sp, #20]
 800b2de:	465e      	mov	r6, fp
 800b2e0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b2e4:	2b09      	cmp	r3, #9
 800b2e6:	d912      	bls.n	800b30e <_strtod_l+0x20e>
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e7c4      	b.n	800b276 <_strtod_l+0x176>
 800b2ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2ee:	1c5a      	adds	r2, r3, #1
 800b2f0:	9215      	str	r2, [sp, #84]	; 0x54
 800b2f2:	785a      	ldrb	r2, [r3, #1]
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	2a30      	cmp	r2, #48	; 0x30
 800b2f8:	d0f8      	beq.n	800b2ec <_strtod_l+0x1ec>
 800b2fa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b2fe:	2b08      	cmp	r3, #8
 800b300:	f200 84c1 	bhi.w	800bc86 <_strtod_l+0xb86>
 800b304:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b306:	9005      	str	r0, [sp, #20]
 800b308:	2000      	movs	r0, #0
 800b30a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b30c:	4606      	mov	r6, r0
 800b30e:	3a30      	subs	r2, #48	; 0x30
 800b310:	f100 0301 	add.w	r3, r0, #1
 800b314:	d014      	beq.n	800b340 <_strtod_l+0x240>
 800b316:	9905      	ldr	r1, [sp, #20]
 800b318:	4419      	add	r1, r3
 800b31a:	9105      	str	r1, [sp, #20]
 800b31c:	4633      	mov	r3, r6
 800b31e:	eb00 0c06 	add.w	ip, r0, r6
 800b322:	210a      	movs	r1, #10
 800b324:	4563      	cmp	r3, ip
 800b326:	d113      	bne.n	800b350 <_strtod_l+0x250>
 800b328:	1833      	adds	r3, r6, r0
 800b32a:	2b08      	cmp	r3, #8
 800b32c:	f106 0601 	add.w	r6, r6, #1
 800b330:	4406      	add	r6, r0
 800b332:	dc1a      	bgt.n	800b36a <_strtod_l+0x26a>
 800b334:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b336:	230a      	movs	r3, #10
 800b338:	fb03 2301 	mla	r3, r3, r1, r2
 800b33c:	9309      	str	r3, [sp, #36]	; 0x24
 800b33e:	2300      	movs	r3, #0
 800b340:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b342:	1c51      	adds	r1, r2, #1
 800b344:	9115      	str	r1, [sp, #84]	; 0x54
 800b346:	7852      	ldrb	r2, [r2, #1]
 800b348:	4618      	mov	r0, r3
 800b34a:	e7c9      	b.n	800b2e0 <_strtod_l+0x1e0>
 800b34c:	4658      	mov	r0, fp
 800b34e:	e7d2      	b.n	800b2f6 <_strtod_l+0x1f6>
 800b350:	2b08      	cmp	r3, #8
 800b352:	f103 0301 	add.w	r3, r3, #1
 800b356:	dc03      	bgt.n	800b360 <_strtod_l+0x260>
 800b358:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b35a:	434f      	muls	r7, r1
 800b35c:	9709      	str	r7, [sp, #36]	; 0x24
 800b35e:	e7e1      	b.n	800b324 <_strtod_l+0x224>
 800b360:	2b10      	cmp	r3, #16
 800b362:	bfd8      	it	le
 800b364:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b368:	e7dc      	b.n	800b324 <_strtod_l+0x224>
 800b36a:	2e10      	cmp	r6, #16
 800b36c:	bfdc      	itt	le
 800b36e:	230a      	movle	r3, #10
 800b370:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b374:	e7e3      	b.n	800b33e <_strtod_l+0x23e>
 800b376:	2300      	movs	r3, #0
 800b378:	9305      	str	r3, [sp, #20]
 800b37a:	2301      	movs	r3, #1
 800b37c:	e780      	b.n	800b280 <_strtod_l+0x180>
 800b37e:	f04f 0c00 	mov.w	ip, #0
 800b382:	1caa      	adds	r2, r5, #2
 800b384:	9215      	str	r2, [sp, #84]	; 0x54
 800b386:	78aa      	ldrb	r2, [r5, #2]
 800b388:	e788      	b.n	800b29c <_strtod_l+0x19c>
 800b38a:	f04f 0c01 	mov.w	ip, #1
 800b38e:	e7f8      	b.n	800b382 <_strtod_l+0x282>
 800b390:	0800daf8 	.word	0x0800daf8
 800b394:	0800daf4 	.word	0x0800daf4
 800b398:	7ff00000 	.word	0x7ff00000
 800b39c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b39e:	1c51      	adds	r1, r2, #1
 800b3a0:	9115      	str	r1, [sp, #84]	; 0x54
 800b3a2:	7852      	ldrb	r2, [r2, #1]
 800b3a4:	2a30      	cmp	r2, #48	; 0x30
 800b3a6:	d0f9      	beq.n	800b39c <_strtod_l+0x29c>
 800b3a8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b3ac:	2908      	cmp	r1, #8
 800b3ae:	f63f af7a 	bhi.w	800b2a6 <_strtod_l+0x1a6>
 800b3b2:	3a30      	subs	r2, #48	; 0x30
 800b3b4:	9208      	str	r2, [sp, #32]
 800b3b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b3b8:	920c      	str	r2, [sp, #48]	; 0x30
 800b3ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b3bc:	1c57      	adds	r7, r2, #1
 800b3be:	9715      	str	r7, [sp, #84]	; 0x54
 800b3c0:	7852      	ldrb	r2, [r2, #1]
 800b3c2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b3c6:	f1be 0f09 	cmp.w	lr, #9
 800b3ca:	d938      	bls.n	800b43e <_strtod_l+0x33e>
 800b3cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b3ce:	1a7f      	subs	r7, r7, r1
 800b3d0:	2f08      	cmp	r7, #8
 800b3d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b3d6:	dc03      	bgt.n	800b3e0 <_strtod_l+0x2e0>
 800b3d8:	9908      	ldr	r1, [sp, #32]
 800b3da:	428f      	cmp	r7, r1
 800b3dc:	bfa8      	it	ge
 800b3de:	460f      	movge	r7, r1
 800b3e0:	f1bc 0f00 	cmp.w	ip, #0
 800b3e4:	d000      	beq.n	800b3e8 <_strtod_l+0x2e8>
 800b3e6:	427f      	negs	r7, r7
 800b3e8:	2e00      	cmp	r6, #0
 800b3ea:	d14f      	bne.n	800b48c <_strtod_l+0x38c>
 800b3ec:	9904      	ldr	r1, [sp, #16]
 800b3ee:	4301      	orrs	r1, r0
 800b3f0:	f47f aec1 	bne.w	800b176 <_strtod_l+0x76>
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f47f aedb 	bne.w	800b1b0 <_strtod_l+0xb0>
 800b3fa:	2a69      	cmp	r2, #105	; 0x69
 800b3fc:	d029      	beq.n	800b452 <_strtod_l+0x352>
 800b3fe:	dc26      	bgt.n	800b44e <_strtod_l+0x34e>
 800b400:	2a49      	cmp	r2, #73	; 0x49
 800b402:	d026      	beq.n	800b452 <_strtod_l+0x352>
 800b404:	2a4e      	cmp	r2, #78	; 0x4e
 800b406:	f47f aed3 	bne.w	800b1b0 <_strtod_l+0xb0>
 800b40a:	499b      	ldr	r1, [pc, #620]	; (800b678 <_strtod_l+0x578>)
 800b40c:	a815      	add	r0, sp, #84	; 0x54
 800b40e:	f001 fdab 	bl	800cf68 <__match>
 800b412:	2800      	cmp	r0, #0
 800b414:	f43f aecc 	beq.w	800b1b0 <_strtod_l+0xb0>
 800b418:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	2b28      	cmp	r3, #40	; 0x28
 800b41e:	d12f      	bne.n	800b480 <_strtod_l+0x380>
 800b420:	4996      	ldr	r1, [pc, #600]	; (800b67c <_strtod_l+0x57c>)
 800b422:	aa18      	add	r2, sp, #96	; 0x60
 800b424:	a815      	add	r0, sp, #84	; 0x54
 800b426:	f001 fdb3 	bl	800cf90 <__hexnan>
 800b42a:	2805      	cmp	r0, #5
 800b42c:	d128      	bne.n	800b480 <_strtod_l+0x380>
 800b42e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b430:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b434:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b438:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b43c:	e69b      	b.n	800b176 <_strtod_l+0x76>
 800b43e:	9f08      	ldr	r7, [sp, #32]
 800b440:	210a      	movs	r1, #10
 800b442:	fb01 2107 	mla	r1, r1, r7, r2
 800b446:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b44a:	9208      	str	r2, [sp, #32]
 800b44c:	e7b5      	b.n	800b3ba <_strtod_l+0x2ba>
 800b44e:	2a6e      	cmp	r2, #110	; 0x6e
 800b450:	e7d9      	b.n	800b406 <_strtod_l+0x306>
 800b452:	498b      	ldr	r1, [pc, #556]	; (800b680 <_strtod_l+0x580>)
 800b454:	a815      	add	r0, sp, #84	; 0x54
 800b456:	f001 fd87 	bl	800cf68 <__match>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	f43f aea8 	beq.w	800b1b0 <_strtod_l+0xb0>
 800b460:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b462:	4988      	ldr	r1, [pc, #544]	; (800b684 <_strtod_l+0x584>)
 800b464:	3b01      	subs	r3, #1
 800b466:	a815      	add	r0, sp, #84	; 0x54
 800b468:	9315      	str	r3, [sp, #84]	; 0x54
 800b46a:	f001 fd7d 	bl	800cf68 <__match>
 800b46e:	b910      	cbnz	r0, 800b476 <_strtod_l+0x376>
 800b470:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b472:	3301      	adds	r3, #1
 800b474:	9315      	str	r3, [sp, #84]	; 0x54
 800b476:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b694 <_strtod_l+0x594>
 800b47a:	f04f 0800 	mov.w	r8, #0
 800b47e:	e67a      	b.n	800b176 <_strtod_l+0x76>
 800b480:	4881      	ldr	r0, [pc, #516]	; (800b688 <_strtod_l+0x588>)
 800b482:	f001 fa8d 	bl	800c9a0 <nan>
 800b486:	ec59 8b10 	vmov	r8, r9, d0
 800b48a:	e674      	b.n	800b176 <_strtod_l+0x76>
 800b48c:	9b05      	ldr	r3, [sp, #20]
 800b48e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b490:	1afb      	subs	r3, r7, r3
 800b492:	f1bb 0f00 	cmp.w	fp, #0
 800b496:	bf08      	it	eq
 800b498:	46b3      	moveq	fp, r6
 800b49a:	2e10      	cmp	r6, #16
 800b49c:	9308      	str	r3, [sp, #32]
 800b49e:	4635      	mov	r5, r6
 800b4a0:	bfa8      	it	ge
 800b4a2:	2510      	movge	r5, #16
 800b4a4:	f7f5 f84e 	bl	8000544 <__aeabi_ui2d>
 800b4a8:	2e09      	cmp	r6, #9
 800b4aa:	4680      	mov	r8, r0
 800b4ac:	4689      	mov	r9, r1
 800b4ae:	dd13      	ble.n	800b4d8 <_strtod_l+0x3d8>
 800b4b0:	4b76      	ldr	r3, [pc, #472]	; (800b68c <_strtod_l+0x58c>)
 800b4b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b4b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b4ba:	f7f5 f8bd 	bl	8000638 <__aeabi_dmul>
 800b4be:	4680      	mov	r8, r0
 800b4c0:	4650      	mov	r0, sl
 800b4c2:	4689      	mov	r9, r1
 800b4c4:	f7f5 f83e 	bl	8000544 <__aeabi_ui2d>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	4640      	mov	r0, r8
 800b4ce:	4649      	mov	r1, r9
 800b4d0:	f7f4 fefc 	bl	80002cc <__adddf3>
 800b4d4:	4680      	mov	r8, r0
 800b4d6:	4689      	mov	r9, r1
 800b4d8:	2e0f      	cmp	r6, #15
 800b4da:	dc38      	bgt.n	800b54e <_strtod_l+0x44e>
 800b4dc:	9b08      	ldr	r3, [sp, #32]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f43f ae49 	beq.w	800b176 <_strtod_l+0x76>
 800b4e4:	dd24      	ble.n	800b530 <_strtod_l+0x430>
 800b4e6:	2b16      	cmp	r3, #22
 800b4e8:	dc0b      	bgt.n	800b502 <_strtod_l+0x402>
 800b4ea:	4968      	ldr	r1, [pc, #416]	; (800b68c <_strtod_l+0x58c>)
 800b4ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b4f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4f4:	4642      	mov	r2, r8
 800b4f6:	464b      	mov	r3, r9
 800b4f8:	f7f5 f89e 	bl	8000638 <__aeabi_dmul>
 800b4fc:	4680      	mov	r8, r0
 800b4fe:	4689      	mov	r9, r1
 800b500:	e639      	b.n	800b176 <_strtod_l+0x76>
 800b502:	9a08      	ldr	r2, [sp, #32]
 800b504:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b508:	4293      	cmp	r3, r2
 800b50a:	db20      	blt.n	800b54e <_strtod_l+0x44e>
 800b50c:	4c5f      	ldr	r4, [pc, #380]	; (800b68c <_strtod_l+0x58c>)
 800b50e:	f1c6 060f 	rsb	r6, r6, #15
 800b512:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b516:	4642      	mov	r2, r8
 800b518:	464b      	mov	r3, r9
 800b51a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b51e:	f7f5 f88b 	bl	8000638 <__aeabi_dmul>
 800b522:	9b08      	ldr	r3, [sp, #32]
 800b524:	1b9e      	subs	r6, r3, r6
 800b526:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b52a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b52e:	e7e3      	b.n	800b4f8 <_strtod_l+0x3f8>
 800b530:	9b08      	ldr	r3, [sp, #32]
 800b532:	3316      	adds	r3, #22
 800b534:	db0b      	blt.n	800b54e <_strtod_l+0x44e>
 800b536:	9b05      	ldr	r3, [sp, #20]
 800b538:	1bdf      	subs	r7, r3, r7
 800b53a:	4b54      	ldr	r3, [pc, #336]	; (800b68c <_strtod_l+0x58c>)
 800b53c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b540:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b544:	4640      	mov	r0, r8
 800b546:	4649      	mov	r1, r9
 800b548:	f7f5 f9a0 	bl	800088c <__aeabi_ddiv>
 800b54c:	e7d6      	b.n	800b4fc <_strtod_l+0x3fc>
 800b54e:	9b08      	ldr	r3, [sp, #32]
 800b550:	1b75      	subs	r5, r6, r5
 800b552:	441d      	add	r5, r3
 800b554:	2d00      	cmp	r5, #0
 800b556:	dd70      	ble.n	800b63a <_strtod_l+0x53a>
 800b558:	f015 030f 	ands.w	r3, r5, #15
 800b55c:	d00a      	beq.n	800b574 <_strtod_l+0x474>
 800b55e:	494b      	ldr	r1, [pc, #300]	; (800b68c <_strtod_l+0x58c>)
 800b560:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b564:	4642      	mov	r2, r8
 800b566:	464b      	mov	r3, r9
 800b568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b56c:	f7f5 f864 	bl	8000638 <__aeabi_dmul>
 800b570:	4680      	mov	r8, r0
 800b572:	4689      	mov	r9, r1
 800b574:	f035 050f 	bics.w	r5, r5, #15
 800b578:	d04d      	beq.n	800b616 <_strtod_l+0x516>
 800b57a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b57e:	dd22      	ble.n	800b5c6 <_strtod_l+0x4c6>
 800b580:	2500      	movs	r5, #0
 800b582:	46ab      	mov	fp, r5
 800b584:	9509      	str	r5, [sp, #36]	; 0x24
 800b586:	9505      	str	r5, [sp, #20]
 800b588:	2322      	movs	r3, #34	; 0x22
 800b58a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b694 <_strtod_l+0x594>
 800b58e:	6023      	str	r3, [r4, #0]
 800b590:	f04f 0800 	mov.w	r8, #0
 800b594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b596:	2b00      	cmp	r3, #0
 800b598:	f43f aded 	beq.w	800b176 <_strtod_l+0x76>
 800b59c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f7ff f924 	bl	800a7ec <_Bfree>
 800b5a4:	9905      	ldr	r1, [sp, #20]
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f7ff f920 	bl	800a7ec <_Bfree>
 800b5ac:	4659      	mov	r1, fp
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f7ff f91c 	bl	800a7ec <_Bfree>
 800b5b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f7ff f918 	bl	800a7ec <_Bfree>
 800b5bc:	4629      	mov	r1, r5
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f7ff f914 	bl	800a7ec <_Bfree>
 800b5c4:	e5d7      	b.n	800b176 <_strtod_l+0x76>
 800b5c6:	4b32      	ldr	r3, [pc, #200]	; (800b690 <_strtod_l+0x590>)
 800b5c8:	9304      	str	r3, [sp, #16]
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	112d      	asrs	r5, r5, #4
 800b5ce:	4640      	mov	r0, r8
 800b5d0:	4649      	mov	r1, r9
 800b5d2:	469a      	mov	sl, r3
 800b5d4:	2d01      	cmp	r5, #1
 800b5d6:	dc21      	bgt.n	800b61c <_strtod_l+0x51c>
 800b5d8:	b10b      	cbz	r3, 800b5de <_strtod_l+0x4de>
 800b5da:	4680      	mov	r8, r0
 800b5dc:	4689      	mov	r9, r1
 800b5de:	492c      	ldr	r1, [pc, #176]	; (800b690 <_strtod_l+0x590>)
 800b5e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b5e4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b5e8:	4642      	mov	r2, r8
 800b5ea:	464b      	mov	r3, r9
 800b5ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5f0:	f7f5 f822 	bl	8000638 <__aeabi_dmul>
 800b5f4:	4b27      	ldr	r3, [pc, #156]	; (800b694 <_strtod_l+0x594>)
 800b5f6:	460a      	mov	r2, r1
 800b5f8:	400b      	ands	r3, r1
 800b5fa:	4927      	ldr	r1, [pc, #156]	; (800b698 <_strtod_l+0x598>)
 800b5fc:	428b      	cmp	r3, r1
 800b5fe:	4680      	mov	r8, r0
 800b600:	d8be      	bhi.n	800b580 <_strtod_l+0x480>
 800b602:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b606:	428b      	cmp	r3, r1
 800b608:	bf86      	itte	hi
 800b60a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b69c <_strtod_l+0x59c>
 800b60e:	f04f 38ff 	movhi.w	r8, #4294967295
 800b612:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b616:	2300      	movs	r3, #0
 800b618:	9304      	str	r3, [sp, #16]
 800b61a:	e07b      	b.n	800b714 <_strtod_l+0x614>
 800b61c:	07ea      	lsls	r2, r5, #31
 800b61e:	d505      	bpl.n	800b62c <_strtod_l+0x52c>
 800b620:	9b04      	ldr	r3, [sp, #16]
 800b622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b626:	f7f5 f807 	bl	8000638 <__aeabi_dmul>
 800b62a:	2301      	movs	r3, #1
 800b62c:	9a04      	ldr	r2, [sp, #16]
 800b62e:	3208      	adds	r2, #8
 800b630:	f10a 0a01 	add.w	sl, sl, #1
 800b634:	106d      	asrs	r5, r5, #1
 800b636:	9204      	str	r2, [sp, #16]
 800b638:	e7cc      	b.n	800b5d4 <_strtod_l+0x4d4>
 800b63a:	d0ec      	beq.n	800b616 <_strtod_l+0x516>
 800b63c:	426d      	negs	r5, r5
 800b63e:	f015 020f 	ands.w	r2, r5, #15
 800b642:	d00a      	beq.n	800b65a <_strtod_l+0x55a>
 800b644:	4b11      	ldr	r3, [pc, #68]	; (800b68c <_strtod_l+0x58c>)
 800b646:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b64a:	4640      	mov	r0, r8
 800b64c:	4649      	mov	r1, r9
 800b64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b652:	f7f5 f91b 	bl	800088c <__aeabi_ddiv>
 800b656:	4680      	mov	r8, r0
 800b658:	4689      	mov	r9, r1
 800b65a:	112d      	asrs	r5, r5, #4
 800b65c:	d0db      	beq.n	800b616 <_strtod_l+0x516>
 800b65e:	2d1f      	cmp	r5, #31
 800b660:	dd1e      	ble.n	800b6a0 <_strtod_l+0x5a0>
 800b662:	2500      	movs	r5, #0
 800b664:	46ab      	mov	fp, r5
 800b666:	9509      	str	r5, [sp, #36]	; 0x24
 800b668:	9505      	str	r5, [sp, #20]
 800b66a:	2322      	movs	r3, #34	; 0x22
 800b66c:	f04f 0800 	mov.w	r8, #0
 800b670:	f04f 0900 	mov.w	r9, #0
 800b674:	6023      	str	r3, [r4, #0]
 800b676:	e78d      	b.n	800b594 <_strtod_l+0x494>
 800b678:	0800d8e5 	.word	0x0800d8e5
 800b67c:	0800db0c 	.word	0x0800db0c
 800b680:	0800d8dd 	.word	0x0800d8dd
 800b684:	0800d912 	.word	0x0800d912
 800b688:	0800dcb8 	.word	0x0800dcb8
 800b68c:	0800da20 	.word	0x0800da20
 800b690:	0800d9f8 	.word	0x0800d9f8
 800b694:	7ff00000 	.word	0x7ff00000
 800b698:	7ca00000 	.word	0x7ca00000
 800b69c:	7fefffff 	.word	0x7fefffff
 800b6a0:	f015 0310 	ands.w	r3, r5, #16
 800b6a4:	bf18      	it	ne
 800b6a6:	236a      	movne	r3, #106	; 0x6a
 800b6a8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ba4c <_strtod_l+0x94c>
 800b6ac:	9304      	str	r3, [sp, #16]
 800b6ae:	4640      	mov	r0, r8
 800b6b0:	4649      	mov	r1, r9
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	07ea      	lsls	r2, r5, #31
 800b6b6:	d504      	bpl.n	800b6c2 <_strtod_l+0x5c2>
 800b6b8:	e9da 2300 	ldrd	r2, r3, [sl]
 800b6bc:	f7f4 ffbc 	bl	8000638 <__aeabi_dmul>
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	106d      	asrs	r5, r5, #1
 800b6c4:	f10a 0a08 	add.w	sl, sl, #8
 800b6c8:	d1f4      	bne.n	800b6b4 <_strtod_l+0x5b4>
 800b6ca:	b10b      	cbz	r3, 800b6d0 <_strtod_l+0x5d0>
 800b6cc:	4680      	mov	r8, r0
 800b6ce:	4689      	mov	r9, r1
 800b6d0:	9b04      	ldr	r3, [sp, #16]
 800b6d2:	b1bb      	cbz	r3, 800b704 <_strtod_l+0x604>
 800b6d4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b6d8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	4649      	mov	r1, r9
 800b6e0:	dd10      	ble.n	800b704 <_strtod_l+0x604>
 800b6e2:	2b1f      	cmp	r3, #31
 800b6e4:	f340 811e 	ble.w	800b924 <_strtod_l+0x824>
 800b6e8:	2b34      	cmp	r3, #52	; 0x34
 800b6ea:	bfde      	ittt	le
 800b6ec:	f04f 33ff 	movle.w	r3, #4294967295
 800b6f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b6f4:	4093      	lslle	r3, r2
 800b6f6:	f04f 0800 	mov.w	r8, #0
 800b6fa:	bfcc      	ite	gt
 800b6fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b700:	ea03 0901 	andle.w	r9, r3, r1
 800b704:	2200      	movs	r2, #0
 800b706:	2300      	movs	r3, #0
 800b708:	4640      	mov	r0, r8
 800b70a:	4649      	mov	r1, r9
 800b70c:	f7f5 f9fc 	bl	8000b08 <__aeabi_dcmpeq>
 800b710:	2800      	cmp	r0, #0
 800b712:	d1a6      	bne.n	800b662 <_strtod_l+0x562>
 800b714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b716:	9300      	str	r3, [sp, #0]
 800b718:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b71a:	4633      	mov	r3, r6
 800b71c:	465a      	mov	r2, fp
 800b71e:	4620      	mov	r0, r4
 800b720:	f7ff f8cc 	bl	800a8bc <__s2b>
 800b724:	9009      	str	r0, [sp, #36]	; 0x24
 800b726:	2800      	cmp	r0, #0
 800b728:	f43f af2a 	beq.w	800b580 <_strtod_l+0x480>
 800b72c:	9a08      	ldr	r2, [sp, #32]
 800b72e:	9b05      	ldr	r3, [sp, #20]
 800b730:	2a00      	cmp	r2, #0
 800b732:	eba3 0307 	sub.w	r3, r3, r7
 800b736:	bfa8      	it	ge
 800b738:	2300      	movge	r3, #0
 800b73a:	930c      	str	r3, [sp, #48]	; 0x30
 800b73c:	2500      	movs	r5, #0
 800b73e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b742:	9312      	str	r3, [sp, #72]	; 0x48
 800b744:	46ab      	mov	fp, r5
 800b746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b748:	4620      	mov	r0, r4
 800b74a:	6859      	ldr	r1, [r3, #4]
 800b74c:	f7ff f80e 	bl	800a76c <_Balloc>
 800b750:	9005      	str	r0, [sp, #20]
 800b752:	2800      	cmp	r0, #0
 800b754:	f43f af18 	beq.w	800b588 <_strtod_l+0x488>
 800b758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b75a:	691a      	ldr	r2, [r3, #16]
 800b75c:	3202      	adds	r2, #2
 800b75e:	f103 010c 	add.w	r1, r3, #12
 800b762:	0092      	lsls	r2, r2, #2
 800b764:	300c      	adds	r0, #12
 800b766:	f7fe f872 	bl	800984e <memcpy>
 800b76a:	ec49 8b10 	vmov	d0, r8, r9
 800b76e:	aa18      	add	r2, sp, #96	; 0x60
 800b770:	a917      	add	r1, sp, #92	; 0x5c
 800b772:	4620      	mov	r0, r4
 800b774:	f7ff fbd6 	bl	800af24 <__d2b>
 800b778:	ec49 8b18 	vmov	d8, r8, r9
 800b77c:	9016      	str	r0, [sp, #88]	; 0x58
 800b77e:	2800      	cmp	r0, #0
 800b780:	f43f af02 	beq.w	800b588 <_strtod_l+0x488>
 800b784:	2101      	movs	r1, #1
 800b786:	4620      	mov	r0, r4
 800b788:	f7ff f930 	bl	800a9ec <__i2b>
 800b78c:	4683      	mov	fp, r0
 800b78e:	2800      	cmp	r0, #0
 800b790:	f43f aefa 	beq.w	800b588 <_strtod_l+0x488>
 800b794:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b796:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b798:	2e00      	cmp	r6, #0
 800b79a:	bfab      	itete	ge
 800b79c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b79e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b7a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b7a2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b7a6:	bfac      	ite	ge
 800b7a8:	eb06 0a03 	addge.w	sl, r6, r3
 800b7ac:	1b9f      	sublt	r7, r3, r6
 800b7ae:	9b04      	ldr	r3, [sp, #16]
 800b7b0:	1af6      	subs	r6, r6, r3
 800b7b2:	4416      	add	r6, r2
 800b7b4:	4ba0      	ldr	r3, [pc, #640]	; (800ba38 <_strtod_l+0x938>)
 800b7b6:	3e01      	subs	r6, #1
 800b7b8:	429e      	cmp	r6, r3
 800b7ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b7be:	f280 80c4 	bge.w	800b94a <_strtod_l+0x84a>
 800b7c2:	1b9b      	subs	r3, r3, r6
 800b7c4:	2b1f      	cmp	r3, #31
 800b7c6:	eba2 0203 	sub.w	r2, r2, r3
 800b7ca:	f04f 0101 	mov.w	r1, #1
 800b7ce:	f300 80b0 	bgt.w	800b932 <_strtod_l+0x832>
 800b7d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b7d6:	930e      	str	r3, [sp, #56]	; 0x38
 800b7d8:	2300      	movs	r3, #0
 800b7da:	930d      	str	r3, [sp, #52]	; 0x34
 800b7dc:	eb0a 0602 	add.w	r6, sl, r2
 800b7e0:	9b04      	ldr	r3, [sp, #16]
 800b7e2:	45b2      	cmp	sl, r6
 800b7e4:	4417      	add	r7, r2
 800b7e6:	441f      	add	r7, r3
 800b7e8:	4653      	mov	r3, sl
 800b7ea:	bfa8      	it	ge
 800b7ec:	4633      	movge	r3, r6
 800b7ee:	42bb      	cmp	r3, r7
 800b7f0:	bfa8      	it	ge
 800b7f2:	463b      	movge	r3, r7
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	bfc2      	ittt	gt
 800b7f8:	1af6      	subgt	r6, r6, r3
 800b7fa:	1aff      	subgt	r7, r7, r3
 800b7fc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b800:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b802:	2b00      	cmp	r3, #0
 800b804:	dd17      	ble.n	800b836 <_strtod_l+0x736>
 800b806:	4659      	mov	r1, fp
 800b808:	461a      	mov	r2, r3
 800b80a:	4620      	mov	r0, r4
 800b80c:	f7ff f9ae 	bl	800ab6c <__pow5mult>
 800b810:	4683      	mov	fp, r0
 800b812:	2800      	cmp	r0, #0
 800b814:	f43f aeb8 	beq.w	800b588 <_strtod_l+0x488>
 800b818:	4601      	mov	r1, r0
 800b81a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b81c:	4620      	mov	r0, r4
 800b81e:	f7ff f8fb 	bl	800aa18 <__multiply>
 800b822:	900b      	str	r0, [sp, #44]	; 0x2c
 800b824:	2800      	cmp	r0, #0
 800b826:	f43f aeaf 	beq.w	800b588 <_strtod_l+0x488>
 800b82a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b82c:	4620      	mov	r0, r4
 800b82e:	f7fe ffdd 	bl	800a7ec <_Bfree>
 800b832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b834:	9316      	str	r3, [sp, #88]	; 0x58
 800b836:	2e00      	cmp	r6, #0
 800b838:	f300 808c 	bgt.w	800b954 <_strtod_l+0x854>
 800b83c:	9b08      	ldr	r3, [sp, #32]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	dd08      	ble.n	800b854 <_strtod_l+0x754>
 800b842:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b844:	9905      	ldr	r1, [sp, #20]
 800b846:	4620      	mov	r0, r4
 800b848:	f7ff f990 	bl	800ab6c <__pow5mult>
 800b84c:	9005      	str	r0, [sp, #20]
 800b84e:	2800      	cmp	r0, #0
 800b850:	f43f ae9a 	beq.w	800b588 <_strtod_l+0x488>
 800b854:	2f00      	cmp	r7, #0
 800b856:	dd08      	ble.n	800b86a <_strtod_l+0x76a>
 800b858:	9905      	ldr	r1, [sp, #20]
 800b85a:	463a      	mov	r2, r7
 800b85c:	4620      	mov	r0, r4
 800b85e:	f7ff f9df 	bl	800ac20 <__lshift>
 800b862:	9005      	str	r0, [sp, #20]
 800b864:	2800      	cmp	r0, #0
 800b866:	f43f ae8f 	beq.w	800b588 <_strtod_l+0x488>
 800b86a:	f1ba 0f00 	cmp.w	sl, #0
 800b86e:	dd08      	ble.n	800b882 <_strtod_l+0x782>
 800b870:	4659      	mov	r1, fp
 800b872:	4652      	mov	r2, sl
 800b874:	4620      	mov	r0, r4
 800b876:	f7ff f9d3 	bl	800ac20 <__lshift>
 800b87a:	4683      	mov	fp, r0
 800b87c:	2800      	cmp	r0, #0
 800b87e:	f43f ae83 	beq.w	800b588 <_strtod_l+0x488>
 800b882:	9a05      	ldr	r2, [sp, #20]
 800b884:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b886:	4620      	mov	r0, r4
 800b888:	f7ff fa52 	bl	800ad30 <__mdiff>
 800b88c:	4605      	mov	r5, r0
 800b88e:	2800      	cmp	r0, #0
 800b890:	f43f ae7a 	beq.w	800b588 <_strtod_l+0x488>
 800b894:	68c3      	ldr	r3, [r0, #12]
 800b896:	930b      	str	r3, [sp, #44]	; 0x2c
 800b898:	2300      	movs	r3, #0
 800b89a:	60c3      	str	r3, [r0, #12]
 800b89c:	4659      	mov	r1, fp
 800b89e:	f7ff fa2b 	bl	800acf8 <__mcmp>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	da60      	bge.n	800b968 <_strtod_l+0x868>
 800b8a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8a8:	ea53 0308 	orrs.w	r3, r3, r8
 800b8ac:	f040 8084 	bne.w	800b9b8 <_strtod_l+0x8b8>
 800b8b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d17f      	bne.n	800b9b8 <_strtod_l+0x8b8>
 800b8b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b8bc:	0d1b      	lsrs	r3, r3, #20
 800b8be:	051b      	lsls	r3, r3, #20
 800b8c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b8c4:	d978      	bls.n	800b9b8 <_strtod_l+0x8b8>
 800b8c6:	696b      	ldr	r3, [r5, #20]
 800b8c8:	b913      	cbnz	r3, 800b8d0 <_strtod_l+0x7d0>
 800b8ca:	692b      	ldr	r3, [r5, #16]
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	dd73      	ble.n	800b9b8 <_strtod_l+0x8b8>
 800b8d0:	4629      	mov	r1, r5
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f7ff f9a3 	bl	800ac20 <__lshift>
 800b8da:	4659      	mov	r1, fp
 800b8dc:	4605      	mov	r5, r0
 800b8de:	f7ff fa0b 	bl	800acf8 <__mcmp>
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	dd68      	ble.n	800b9b8 <_strtod_l+0x8b8>
 800b8e6:	9904      	ldr	r1, [sp, #16]
 800b8e8:	4a54      	ldr	r2, [pc, #336]	; (800ba3c <_strtod_l+0x93c>)
 800b8ea:	464b      	mov	r3, r9
 800b8ec:	2900      	cmp	r1, #0
 800b8ee:	f000 8084 	beq.w	800b9fa <_strtod_l+0x8fa>
 800b8f2:	ea02 0109 	and.w	r1, r2, r9
 800b8f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b8fa:	dc7e      	bgt.n	800b9fa <_strtod_l+0x8fa>
 800b8fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b900:	f77f aeb3 	ble.w	800b66a <_strtod_l+0x56a>
 800b904:	4b4e      	ldr	r3, [pc, #312]	; (800ba40 <_strtod_l+0x940>)
 800b906:	4640      	mov	r0, r8
 800b908:	4649      	mov	r1, r9
 800b90a:	2200      	movs	r2, #0
 800b90c:	f7f4 fe94 	bl	8000638 <__aeabi_dmul>
 800b910:	4b4a      	ldr	r3, [pc, #296]	; (800ba3c <_strtod_l+0x93c>)
 800b912:	400b      	ands	r3, r1
 800b914:	4680      	mov	r8, r0
 800b916:	4689      	mov	r9, r1
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f47f ae3f 	bne.w	800b59c <_strtod_l+0x49c>
 800b91e:	2322      	movs	r3, #34	; 0x22
 800b920:	6023      	str	r3, [r4, #0]
 800b922:	e63b      	b.n	800b59c <_strtod_l+0x49c>
 800b924:	f04f 32ff 	mov.w	r2, #4294967295
 800b928:	fa02 f303 	lsl.w	r3, r2, r3
 800b92c:	ea03 0808 	and.w	r8, r3, r8
 800b930:	e6e8      	b.n	800b704 <_strtod_l+0x604>
 800b932:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b936:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b93a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b93e:	36e2      	adds	r6, #226	; 0xe2
 800b940:	fa01 f306 	lsl.w	r3, r1, r6
 800b944:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b948:	e748      	b.n	800b7dc <_strtod_l+0x6dc>
 800b94a:	2100      	movs	r1, #0
 800b94c:	2301      	movs	r3, #1
 800b94e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b952:	e743      	b.n	800b7dc <_strtod_l+0x6dc>
 800b954:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b956:	4632      	mov	r2, r6
 800b958:	4620      	mov	r0, r4
 800b95a:	f7ff f961 	bl	800ac20 <__lshift>
 800b95e:	9016      	str	r0, [sp, #88]	; 0x58
 800b960:	2800      	cmp	r0, #0
 800b962:	f47f af6b 	bne.w	800b83c <_strtod_l+0x73c>
 800b966:	e60f      	b.n	800b588 <_strtod_l+0x488>
 800b968:	46ca      	mov	sl, r9
 800b96a:	d171      	bne.n	800ba50 <_strtod_l+0x950>
 800b96c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b96e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b972:	b352      	cbz	r2, 800b9ca <_strtod_l+0x8ca>
 800b974:	4a33      	ldr	r2, [pc, #204]	; (800ba44 <_strtod_l+0x944>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d12a      	bne.n	800b9d0 <_strtod_l+0x8d0>
 800b97a:	9b04      	ldr	r3, [sp, #16]
 800b97c:	4641      	mov	r1, r8
 800b97e:	b1fb      	cbz	r3, 800b9c0 <_strtod_l+0x8c0>
 800b980:	4b2e      	ldr	r3, [pc, #184]	; (800ba3c <_strtod_l+0x93c>)
 800b982:	ea09 0303 	and.w	r3, r9, r3
 800b986:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b98a:	f04f 32ff 	mov.w	r2, #4294967295
 800b98e:	d81a      	bhi.n	800b9c6 <_strtod_l+0x8c6>
 800b990:	0d1b      	lsrs	r3, r3, #20
 800b992:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b996:	fa02 f303 	lsl.w	r3, r2, r3
 800b99a:	4299      	cmp	r1, r3
 800b99c:	d118      	bne.n	800b9d0 <_strtod_l+0x8d0>
 800b99e:	4b2a      	ldr	r3, [pc, #168]	; (800ba48 <_strtod_l+0x948>)
 800b9a0:	459a      	cmp	sl, r3
 800b9a2:	d102      	bne.n	800b9aa <_strtod_l+0x8aa>
 800b9a4:	3101      	adds	r1, #1
 800b9a6:	f43f adef 	beq.w	800b588 <_strtod_l+0x488>
 800b9aa:	4b24      	ldr	r3, [pc, #144]	; (800ba3c <_strtod_l+0x93c>)
 800b9ac:	ea0a 0303 	and.w	r3, sl, r3
 800b9b0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b9b4:	f04f 0800 	mov.w	r8, #0
 800b9b8:	9b04      	ldr	r3, [sp, #16]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1a2      	bne.n	800b904 <_strtod_l+0x804>
 800b9be:	e5ed      	b.n	800b59c <_strtod_l+0x49c>
 800b9c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c4:	e7e9      	b.n	800b99a <_strtod_l+0x89a>
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	e7e7      	b.n	800b99a <_strtod_l+0x89a>
 800b9ca:	ea53 0308 	orrs.w	r3, r3, r8
 800b9ce:	d08a      	beq.n	800b8e6 <_strtod_l+0x7e6>
 800b9d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9d2:	b1e3      	cbz	r3, 800ba0e <_strtod_l+0x90e>
 800b9d4:	ea13 0f0a 	tst.w	r3, sl
 800b9d8:	d0ee      	beq.n	800b9b8 <_strtod_l+0x8b8>
 800b9da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9dc:	9a04      	ldr	r2, [sp, #16]
 800b9de:	4640      	mov	r0, r8
 800b9e0:	4649      	mov	r1, r9
 800b9e2:	b1c3      	cbz	r3, 800ba16 <_strtod_l+0x916>
 800b9e4:	f7ff fb6f 	bl	800b0c6 <sulp>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	ec51 0b18 	vmov	r0, r1, d8
 800b9f0:	f7f4 fc6c 	bl	80002cc <__adddf3>
 800b9f4:	4680      	mov	r8, r0
 800b9f6:	4689      	mov	r9, r1
 800b9f8:	e7de      	b.n	800b9b8 <_strtod_l+0x8b8>
 800b9fa:	4013      	ands	r3, r2
 800b9fc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ba00:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ba04:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ba08:	f04f 38ff 	mov.w	r8, #4294967295
 800ba0c:	e7d4      	b.n	800b9b8 <_strtod_l+0x8b8>
 800ba0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba10:	ea13 0f08 	tst.w	r3, r8
 800ba14:	e7e0      	b.n	800b9d8 <_strtod_l+0x8d8>
 800ba16:	f7ff fb56 	bl	800b0c6 <sulp>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	ec51 0b18 	vmov	r0, r1, d8
 800ba22:	f7f4 fc51 	bl	80002c8 <__aeabi_dsub>
 800ba26:	2200      	movs	r2, #0
 800ba28:	2300      	movs	r3, #0
 800ba2a:	4680      	mov	r8, r0
 800ba2c:	4689      	mov	r9, r1
 800ba2e:	f7f5 f86b 	bl	8000b08 <__aeabi_dcmpeq>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	d0c0      	beq.n	800b9b8 <_strtod_l+0x8b8>
 800ba36:	e618      	b.n	800b66a <_strtod_l+0x56a>
 800ba38:	fffffc02 	.word	0xfffffc02
 800ba3c:	7ff00000 	.word	0x7ff00000
 800ba40:	39500000 	.word	0x39500000
 800ba44:	000fffff 	.word	0x000fffff
 800ba48:	7fefffff 	.word	0x7fefffff
 800ba4c:	0800db20 	.word	0x0800db20
 800ba50:	4659      	mov	r1, fp
 800ba52:	4628      	mov	r0, r5
 800ba54:	f7ff fac0 	bl	800afd8 <__ratio>
 800ba58:	ec57 6b10 	vmov	r6, r7, d0
 800ba5c:	ee10 0a10 	vmov	r0, s0
 800ba60:	2200      	movs	r2, #0
 800ba62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ba66:	4639      	mov	r1, r7
 800ba68:	f7f5 f862 	bl	8000b30 <__aeabi_dcmple>
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	d071      	beq.n	800bb54 <_strtod_l+0xa54>
 800ba70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d17c      	bne.n	800bb70 <_strtod_l+0xa70>
 800ba76:	f1b8 0f00 	cmp.w	r8, #0
 800ba7a:	d15a      	bne.n	800bb32 <_strtod_l+0xa32>
 800ba7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d15d      	bne.n	800bb40 <_strtod_l+0xa40>
 800ba84:	4b90      	ldr	r3, [pc, #576]	; (800bcc8 <_strtod_l+0xbc8>)
 800ba86:	2200      	movs	r2, #0
 800ba88:	4630      	mov	r0, r6
 800ba8a:	4639      	mov	r1, r7
 800ba8c:	f7f5 f846 	bl	8000b1c <__aeabi_dcmplt>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	d15c      	bne.n	800bb4e <_strtod_l+0xa4e>
 800ba94:	4630      	mov	r0, r6
 800ba96:	4639      	mov	r1, r7
 800ba98:	4b8c      	ldr	r3, [pc, #560]	; (800bccc <_strtod_l+0xbcc>)
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f7f4 fdcc 	bl	8000638 <__aeabi_dmul>
 800baa0:	4606      	mov	r6, r0
 800baa2:	460f      	mov	r7, r1
 800baa4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800baa8:	9606      	str	r6, [sp, #24]
 800baaa:	9307      	str	r3, [sp, #28]
 800baac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bab0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bab4:	4b86      	ldr	r3, [pc, #536]	; (800bcd0 <_strtod_l+0xbd0>)
 800bab6:	ea0a 0303 	and.w	r3, sl, r3
 800baba:	930d      	str	r3, [sp, #52]	; 0x34
 800babc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800babe:	4b85      	ldr	r3, [pc, #532]	; (800bcd4 <_strtod_l+0xbd4>)
 800bac0:	429a      	cmp	r2, r3
 800bac2:	f040 8090 	bne.w	800bbe6 <_strtod_l+0xae6>
 800bac6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800baca:	ec49 8b10 	vmov	d0, r8, r9
 800bace:	f7ff f9b9 	bl	800ae44 <__ulp>
 800bad2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bad6:	ec51 0b10 	vmov	r0, r1, d0
 800bada:	f7f4 fdad 	bl	8000638 <__aeabi_dmul>
 800bade:	4642      	mov	r2, r8
 800bae0:	464b      	mov	r3, r9
 800bae2:	f7f4 fbf3 	bl	80002cc <__adddf3>
 800bae6:	460b      	mov	r3, r1
 800bae8:	4979      	ldr	r1, [pc, #484]	; (800bcd0 <_strtod_l+0xbd0>)
 800baea:	4a7b      	ldr	r2, [pc, #492]	; (800bcd8 <_strtod_l+0xbd8>)
 800baec:	4019      	ands	r1, r3
 800baee:	4291      	cmp	r1, r2
 800baf0:	4680      	mov	r8, r0
 800baf2:	d944      	bls.n	800bb7e <_strtod_l+0xa7e>
 800baf4:	ee18 2a90 	vmov	r2, s17
 800baf8:	4b78      	ldr	r3, [pc, #480]	; (800bcdc <_strtod_l+0xbdc>)
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d104      	bne.n	800bb08 <_strtod_l+0xa08>
 800bafe:	ee18 3a10 	vmov	r3, s16
 800bb02:	3301      	adds	r3, #1
 800bb04:	f43f ad40 	beq.w	800b588 <_strtod_l+0x488>
 800bb08:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800bcdc <_strtod_l+0xbdc>
 800bb0c:	f04f 38ff 	mov.w	r8, #4294967295
 800bb10:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bb12:	4620      	mov	r0, r4
 800bb14:	f7fe fe6a 	bl	800a7ec <_Bfree>
 800bb18:	9905      	ldr	r1, [sp, #20]
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	f7fe fe66 	bl	800a7ec <_Bfree>
 800bb20:	4659      	mov	r1, fp
 800bb22:	4620      	mov	r0, r4
 800bb24:	f7fe fe62 	bl	800a7ec <_Bfree>
 800bb28:	4629      	mov	r1, r5
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	f7fe fe5e 	bl	800a7ec <_Bfree>
 800bb30:	e609      	b.n	800b746 <_strtod_l+0x646>
 800bb32:	f1b8 0f01 	cmp.w	r8, #1
 800bb36:	d103      	bne.n	800bb40 <_strtod_l+0xa40>
 800bb38:	f1b9 0f00 	cmp.w	r9, #0
 800bb3c:	f43f ad95 	beq.w	800b66a <_strtod_l+0x56a>
 800bb40:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800bc98 <_strtod_l+0xb98>
 800bb44:	4f60      	ldr	r7, [pc, #384]	; (800bcc8 <_strtod_l+0xbc8>)
 800bb46:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb4a:	2600      	movs	r6, #0
 800bb4c:	e7ae      	b.n	800baac <_strtod_l+0x9ac>
 800bb4e:	4f5f      	ldr	r7, [pc, #380]	; (800bccc <_strtod_l+0xbcc>)
 800bb50:	2600      	movs	r6, #0
 800bb52:	e7a7      	b.n	800baa4 <_strtod_l+0x9a4>
 800bb54:	4b5d      	ldr	r3, [pc, #372]	; (800bccc <_strtod_l+0xbcc>)
 800bb56:	4630      	mov	r0, r6
 800bb58:	4639      	mov	r1, r7
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f7f4 fd6c 	bl	8000638 <__aeabi_dmul>
 800bb60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb62:	4606      	mov	r6, r0
 800bb64:	460f      	mov	r7, r1
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d09c      	beq.n	800baa4 <_strtod_l+0x9a4>
 800bb6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bb6e:	e79d      	b.n	800baac <_strtod_l+0x9ac>
 800bb70:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800bca0 <_strtod_l+0xba0>
 800bb74:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb78:	ec57 6b17 	vmov	r6, r7, d7
 800bb7c:	e796      	b.n	800baac <_strtod_l+0x9ac>
 800bb7e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800bb82:	9b04      	ldr	r3, [sp, #16]
 800bb84:	46ca      	mov	sl, r9
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d1c2      	bne.n	800bb10 <_strtod_l+0xa10>
 800bb8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bb8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb90:	0d1b      	lsrs	r3, r3, #20
 800bb92:	051b      	lsls	r3, r3, #20
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d1bb      	bne.n	800bb10 <_strtod_l+0xa10>
 800bb98:	4630      	mov	r0, r6
 800bb9a:	4639      	mov	r1, r7
 800bb9c:	f7f5 f8ac 	bl	8000cf8 <__aeabi_d2lz>
 800bba0:	f7f4 fd1c 	bl	80005dc <__aeabi_l2d>
 800bba4:	4602      	mov	r2, r0
 800bba6:	460b      	mov	r3, r1
 800bba8:	4630      	mov	r0, r6
 800bbaa:	4639      	mov	r1, r7
 800bbac:	f7f4 fb8c 	bl	80002c8 <__aeabi_dsub>
 800bbb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbb2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bbb6:	ea43 0308 	orr.w	r3, r3, r8
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	4606      	mov	r6, r0
 800bbbe:	460f      	mov	r7, r1
 800bbc0:	d054      	beq.n	800bc6c <_strtod_l+0xb6c>
 800bbc2:	a339      	add	r3, pc, #228	; (adr r3, 800bca8 <_strtod_l+0xba8>)
 800bbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc8:	f7f4 ffa8 	bl	8000b1c <__aeabi_dcmplt>
 800bbcc:	2800      	cmp	r0, #0
 800bbce:	f47f ace5 	bne.w	800b59c <_strtod_l+0x49c>
 800bbd2:	a337      	add	r3, pc, #220	; (adr r3, 800bcb0 <_strtod_l+0xbb0>)
 800bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd8:	4630      	mov	r0, r6
 800bbda:	4639      	mov	r1, r7
 800bbdc:	f7f4 ffbc 	bl	8000b58 <__aeabi_dcmpgt>
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	d095      	beq.n	800bb10 <_strtod_l+0xa10>
 800bbe4:	e4da      	b.n	800b59c <_strtod_l+0x49c>
 800bbe6:	9b04      	ldr	r3, [sp, #16]
 800bbe8:	b333      	cbz	r3, 800bc38 <_strtod_l+0xb38>
 800bbea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bbf0:	d822      	bhi.n	800bc38 <_strtod_l+0xb38>
 800bbf2:	a331      	add	r3, pc, #196	; (adr r3, 800bcb8 <_strtod_l+0xbb8>)
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	4630      	mov	r0, r6
 800bbfa:	4639      	mov	r1, r7
 800bbfc:	f7f4 ff98 	bl	8000b30 <__aeabi_dcmple>
 800bc00:	b1a0      	cbz	r0, 800bc2c <_strtod_l+0xb2c>
 800bc02:	4639      	mov	r1, r7
 800bc04:	4630      	mov	r0, r6
 800bc06:	f7f4 ffef 	bl	8000be8 <__aeabi_d2uiz>
 800bc0a:	2801      	cmp	r0, #1
 800bc0c:	bf38      	it	cc
 800bc0e:	2001      	movcc	r0, #1
 800bc10:	f7f4 fc98 	bl	8000544 <__aeabi_ui2d>
 800bc14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc16:	4606      	mov	r6, r0
 800bc18:	460f      	mov	r7, r1
 800bc1a:	bb23      	cbnz	r3, 800bc66 <_strtod_l+0xb66>
 800bc1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc20:	9010      	str	r0, [sp, #64]	; 0x40
 800bc22:	9311      	str	r3, [sp, #68]	; 0x44
 800bc24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bc28:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bc2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc30:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bc34:	1a9b      	subs	r3, r3, r2
 800bc36:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc38:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bc3c:	eeb0 0a48 	vmov.f32	s0, s16
 800bc40:	eef0 0a68 	vmov.f32	s1, s17
 800bc44:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bc48:	f7ff f8fc 	bl	800ae44 <__ulp>
 800bc4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bc50:	ec53 2b10 	vmov	r2, r3, d0
 800bc54:	f7f4 fcf0 	bl	8000638 <__aeabi_dmul>
 800bc58:	ec53 2b18 	vmov	r2, r3, d8
 800bc5c:	f7f4 fb36 	bl	80002cc <__adddf3>
 800bc60:	4680      	mov	r8, r0
 800bc62:	4689      	mov	r9, r1
 800bc64:	e78d      	b.n	800bb82 <_strtod_l+0xa82>
 800bc66:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800bc6a:	e7db      	b.n	800bc24 <_strtod_l+0xb24>
 800bc6c:	a314      	add	r3, pc, #80	; (adr r3, 800bcc0 <_strtod_l+0xbc0>)
 800bc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc72:	f7f4 ff53 	bl	8000b1c <__aeabi_dcmplt>
 800bc76:	e7b3      	b.n	800bbe0 <_strtod_l+0xae0>
 800bc78:	2300      	movs	r3, #0
 800bc7a:	930a      	str	r3, [sp, #40]	; 0x28
 800bc7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bc7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc80:	6013      	str	r3, [r2, #0]
 800bc82:	f7ff ba7c 	b.w	800b17e <_strtod_l+0x7e>
 800bc86:	2a65      	cmp	r2, #101	; 0x65
 800bc88:	f43f ab75 	beq.w	800b376 <_strtod_l+0x276>
 800bc8c:	2a45      	cmp	r2, #69	; 0x45
 800bc8e:	f43f ab72 	beq.w	800b376 <_strtod_l+0x276>
 800bc92:	2301      	movs	r3, #1
 800bc94:	f7ff bbaa 	b.w	800b3ec <_strtod_l+0x2ec>
 800bc98:	00000000 	.word	0x00000000
 800bc9c:	bff00000 	.word	0xbff00000
 800bca0:	00000000 	.word	0x00000000
 800bca4:	3ff00000 	.word	0x3ff00000
 800bca8:	94a03595 	.word	0x94a03595
 800bcac:	3fdfffff 	.word	0x3fdfffff
 800bcb0:	35afe535 	.word	0x35afe535
 800bcb4:	3fe00000 	.word	0x3fe00000
 800bcb8:	ffc00000 	.word	0xffc00000
 800bcbc:	41dfffff 	.word	0x41dfffff
 800bcc0:	94a03595 	.word	0x94a03595
 800bcc4:	3fcfffff 	.word	0x3fcfffff
 800bcc8:	3ff00000 	.word	0x3ff00000
 800bccc:	3fe00000 	.word	0x3fe00000
 800bcd0:	7ff00000 	.word	0x7ff00000
 800bcd4:	7fe00000 	.word	0x7fe00000
 800bcd8:	7c9fffff 	.word	0x7c9fffff
 800bcdc:	7fefffff 	.word	0x7fefffff

0800bce0 <_strtod_r>:
 800bce0:	4b01      	ldr	r3, [pc, #4]	; (800bce8 <_strtod_r+0x8>)
 800bce2:	f7ff ba0d 	b.w	800b100 <_strtod_l>
 800bce6:	bf00      	nop
 800bce8:	2000007c 	.word	0x2000007c

0800bcec <_strtol_l.constprop.0>:
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcf2:	d001      	beq.n	800bcf8 <_strtol_l.constprop.0+0xc>
 800bcf4:	2b24      	cmp	r3, #36	; 0x24
 800bcf6:	d906      	bls.n	800bd06 <_strtol_l.constprop.0+0x1a>
 800bcf8:	f7fd fd7c 	bl	80097f4 <__errno>
 800bcfc:	2316      	movs	r3, #22
 800bcfe:	6003      	str	r3, [r0, #0]
 800bd00:	2000      	movs	r0, #0
 800bd02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd06:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bdec <_strtol_l.constprop.0+0x100>
 800bd0a:	460d      	mov	r5, r1
 800bd0c:	462e      	mov	r6, r5
 800bd0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd12:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800bd16:	f017 0708 	ands.w	r7, r7, #8
 800bd1a:	d1f7      	bne.n	800bd0c <_strtol_l.constprop.0+0x20>
 800bd1c:	2c2d      	cmp	r4, #45	; 0x2d
 800bd1e:	d132      	bne.n	800bd86 <_strtol_l.constprop.0+0x9a>
 800bd20:	782c      	ldrb	r4, [r5, #0]
 800bd22:	2701      	movs	r7, #1
 800bd24:	1cb5      	adds	r5, r6, #2
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d05b      	beq.n	800bde2 <_strtol_l.constprop.0+0xf6>
 800bd2a:	2b10      	cmp	r3, #16
 800bd2c:	d109      	bne.n	800bd42 <_strtol_l.constprop.0+0x56>
 800bd2e:	2c30      	cmp	r4, #48	; 0x30
 800bd30:	d107      	bne.n	800bd42 <_strtol_l.constprop.0+0x56>
 800bd32:	782c      	ldrb	r4, [r5, #0]
 800bd34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bd38:	2c58      	cmp	r4, #88	; 0x58
 800bd3a:	d14d      	bne.n	800bdd8 <_strtol_l.constprop.0+0xec>
 800bd3c:	786c      	ldrb	r4, [r5, #1]
 800bd3e:	2310      	movs	r3, #16
 800bd40:	3502      	adds	r5, #2
 800bd42:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bd46:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd4a:	f04f 0e00 	mov.w	lr, #0
 800bd4e:	fbb8 f9f3 	udiv	r9, r8, r3
 800bd52:	4676      	mov	r6, lr
 800bd54:	fb03 8a19 	mls	sl, r3, r9, r8
 800bd58:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bd5c:	f1bc 0f09 	cmp.w	ip, #9
 800bd60:	d816      	bhi.n	800bd90 <_strtol_l.constprop.0+0xa4>
 800bd62:	4664      	mov	r4, ip
 800bd64:	42a3      	cmp	r3, r4
 800bd66:	dd24      	ble.n	800bdb2 <_strtol_l.constprop.0+0xc6>
 800bd68:	f1be 3fff 	cmp.w	lr, #4294967295
 800bd6c:	d008      	beq.n	800bd80 <_strtol_l.constprop.0+0x94>
 800bd6e:	45b1      	cmp	r9, r6
 800bd70:	d31c      	bcc.n	800bdac <_strtol_l.constprop.0+0xc0>
 800bd72:	d101      	bne.n	800bd78 <_strtol_l.constprop.0+0x8c>
 800bd74:	45a2      	cmp	sl, r4
 800bd76:	db19      	blt.n	800bdac <_strtol_l.constprop.0+0xc0>
 800bd78:	fb06 4603 	mla	r6, r6, r3, r4
 800bd7c:	f04f 0e01 	mov.w	lr, #1
 800bd80:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd84:	e7e8      	b.n	800bd58 <_strtol_l.constprop.0+0x6c>
 800bd86:	2c2b      	cmp	r4, #43	; 0x2b
 800bd88:	bf04      	itt	eq
 800bd8a:	782c      	ldrbeq	r4, [r5, #0]
 800bd8c:	1cb5      	addeq	r5, r6, #2
 800bd8e:	e7ca      	b.n	800bd26 <_strtol_l.constprop.0+0x3a>
 800bd90:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bd94:	f1bc 0f19 	cmp.w	ip, #25
 800bd98:	d801      	bhi.n	800bd9e <_strtol_l.constprop.0+0xb2>
 800bd9a:	3c37      	subs	r4, #55	; 0x37
 800bd9c:	e7e2      	b.n	800bd64 <_strtol_l.constprop.0+0x78>
 800bd9e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bda2:	f1bc 0f19 	cmp.w	ip, #25
 800bda6:	d804      	bhi.n	800bdb2 <_strtol_l.constprop.0+0xc6>
 800bda8:	3c57      	subs	r4, #87	; 0x57
 800bdaa:	e7db      	b.n	800bd64 <_strtol_l.constprop.0+0x78>
 800bdac:	f04f 3eff 	mov.w	lr, #4294967295
 800bdb0:	e7e6      	b.n	800bd80 <_strtol_l.constprop.0+0x94>
 800bdb2:	f1be 3fff 	cmp.w	lr, #4294967295
 800bdb6:	d105      	bne.n	800bdc4 <_strtol_l.constprop.0+0xd8>
 800bdb8:	2322      	movs	r3, #34	; 0x22
 800bdba:	6003      	str	r3, [r0, #0]
 800bdbc:	4646      	mov	r6, r8
 800bdbe:	b942      	cbnz	r2, 800bdd2 <_strtol_l.constprop.0+0xe6>
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	e79e      	b.n	800bd02 <_strtol_l.constprop.0+0x16>
 800bdc4:	b107      	cbz	r7, 800bdc8 <_strtol_l.constprop.0+0xdc>
 800bdc6:	4276      	negs	r6, r6
 800bdc8:	2a00      	cmp	r2, #0
 800bdca:	d0f9      	beq.n	800bdc0 <_strtol_l.constprop.0+0xd4>
 800bdcc:	f1be 0f00 	cmp.w	lr, #0
 800bdd0:	d000      	beq.n	800bdd4 <_strtol_l.constprop.0+0xe8>
 800bdd2:	1e69      	subs	r1, r5, #1
 800bdd4:	6011      	str	r1, [r2, #0]
 800bdd6:	e7f3      	b.n	800bdc0 <_strtol_l.constprop.0+0xd4>
 800bdd8:	2430      	movs	r4, #48	; 0x30
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d1b1      	bne.n	800bd42 <_strtol_l.constprop.0+0x56>
 800bdde:	2308      	movs	r3, #8
 800bde0:	e7af      	b.n	800bd42 <_strtol_l.constprop.0+0x56>
 800bde2:	2c30      	cmp	r4, #48	; 0x30
 800bde4:	d0a5      	beq.n	800bd32 <_strtol_l.constprop.0+0x46>
 800bde6:	230a      	movs	r3, #10
 800bde8:	e7ab      	b.n	800bd42 <_strtol_l.constprop.0+0x56>
 800bdea:	bf00      	nop
 800bdec:	0800db49 	.word	0x0800db49

0800bdf0 <_strtol_r>:
 800bdf0:	f7ff bf7c 	b.w	800bcec <_strtol_l.constprop.0>

0800bdf4 <__ssputs_r>:
 800bdf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdf8:	688e      	ldr	r6, [r1, #8]
 800bdfa:	461f      	mov	r7, r3
 800bdfc:	42be      	cmp	r6, r7
 800bdfe:	680b      	ldr	r3, [r1, #0]
 800be00:	4682      	mov	sl, r0
 800be02:	460c      	mov	r4, r1
 800be04:	4690      	mov	r8, r2
 800be06:	d82c      	bhi.n	800be62 <__ssputs_r+0x6e>
 800be08:	898a      	ldrh	r2, [r1, #12]
 800be0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be0e:	d026      	beq.n	800be5e <__ssputs_r+0x6a>
 800be10:	6965      	ldr	r5, [r4, #20]
 800be12:	6909      	ldr	r1, [r1, #16]
 800be14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be18:	eba3 0901 	sub.w	r9, r3, r1
 800be1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be20:	1c7b      	adds	r3, r7, #1
 800be22:	444b      	add	r3, r9
 800be24:	106d      	asrs	r5, r5, #1
 800be26:	429d      	cmp	r5, r3
 800be28:	bf38      	it	cc
 800be2a:	461d      	movcc	r5, r3
 800be2c:	0553      	lsls	r3, r2, #21
 800be2e:	d527      	bpl.n	800be80 <__ssputs_r+0x8c>
 800be30:	4629      	mov	r1, r5
 800be32:	f7fe fc0f 	bl	800a654 <_malloc_r>
 800be36:	4606      	mov	r6, r0
 800be38:	b360      	cbz	r0, 800be94 <__ssputs_r+0xa0>
 800be3a:	6921      	ldr	r1, [r4, #16]
 800be3c:	464a      	mov	r2, r9
 800be3e:	f7fd fd06 	bl	800984e <memcpy>
 800be42:	89a3      	ldrh	r3, [r4, #12]
 800be44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be4c:	81a3      	strh	r3, [r4, #12]
 800be4e:	6126      	str	r6, [r4, #16]
 800be50:	6165      	str	r5, [r4, #20]
 800be52:	444e      	add	r6, r9
 800be54:	eba5 0509 	sub.w	r5, r5, r9
 800be58:	6026      	str	r6, [r4, #0]
 800be5a:	60a5      	str	r5, [r4, #8]
 800be5c:	463e      	mov	r6, r7
 800be5e:	42be      	cmp	r6, r7
 800be60:	d900      	bls.n	800be64 <__ssputs_r+0x70>
 800be62:	463e      	mov	r6, r7
 800be64:	6820      	ldr	r0, [r4, #0]
 800be66:	4632      	mov	r2, r6
 800be68:	4641      	mov	r1, r8
 800be6a:	f000 fd5c 	bl	800c926 <memmove>
 800be6e:	68a3      	ldr	r3, [r4, #8]
 800be70:	1b9b      	subs	r3, r3, r6
 800be72:	60a3      	str	r3, [r4, #8]
 800be74:	6823      	ldr	r3, [r4, #0]
 800be76:	4433      	add	r3, r6
 800be78:	6023      	str	r3, [r4, #0]
 800be7a:	2000      	movs	r0, #0
 800be7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be80:	462a      	mov	r2, r5
 800be82:	f001 f932 	bl	800d0ea <_realloc_r>
 800be86:	4606      	mov	r6, r0
 800be88:	2800      	cmp	r0, #0
 800be8a:	d1e0      	bne.n	800be4e <__ssputs_r+0x5a>
 800be8c:	6921      	ldr	r1, [r4, #16]
 800be8e:	4650      	mov	r0, sl
 800be90:	f7fe fb6c 	bl	800a56c <_free_r>
 800be94:	230c      	movs	r3, #12
 800be96:	f8ca 3000 	str.w	r3, [sl]
 800be9a:	89a3      	ldrh	r3, [r4, #12]
 800be9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bea0:	81a3      	strh	r3, [r4, #12]
 800bea2:	f04f 30ff 	mov.w	r0, #4294967295
 800bea6:	e7e9      	b.n	800be7c <__ssputs_r+0x88>

0800bea8 <_svfiprintf_r>:
 800bea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beac:	4698      	mov	r8, r3
 800beae:	898b      	ldrh	r3, [r1, #12]
 800beb0:	061b      	lsls	r3, r3, #24
 800beb2:	b09d      	sub	sp, #116	; 0x74
 800beb4:	4607      	mov	r7, r0
 800beb6:	460d      	mov	r5, r1
 800beb8:	4614      	mov	r4, r2
 800beba:	d50e      	bpl.n	800beda <_svfiprintf_r+0x32>
 800bebc:	690b      	ldr	r3, [r1, #16]
 800bebe:	b963      	cbnz	r3, 800beda <_svfiprintf_r+0x32>
 800bec0:	2140      	movs	r1, #64	; 0x40
 800bec2:	f7fe fbc7 	bl	800a654 <_malloc_r>
 800bec6:	6028      	str	r0, [r5, #0]
 800bec8:	6128      	str	r0, [r5, #16]
 800beca:	b920      	cbnz	r0, 800bed6 <_svfiprintf_r+0x2e>
 800becc:	230c      	movs	r3, #12
 800bece:	603b      	str	r3, [r7, #0]
 800bed0:	f04f 30ff 	mov.w	r0, #4294967295
 800bed4:	e0d0      	b.n	800c078 <_svfiprintf_r+0x1d0>
 800bed6:	2340      	movs	r3, #64	; 0x40
 800bed8:	616b      	str	r3, [r5, #20]
 800beda:	2300      	movs	r3, #0
 800bedc:	9309      	str	r3, [sp, #36]	; 0x24
 800bede:	2320      	movs	r3, #32
 800bee0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bee4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bee8:	2330      	movs	r3, #48	; 0x30
 800beea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c090 <_svfiprintf_r+0x1e8>
 800beee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bef2:	f04f 0901 	mov.w	r9, #1
 800bef6:	4623      	mov	r3, r4
 800bef8:	469a      	mov	sl, r3
 800befa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800befe:	b10a      	cbz	r2, 800bf04 <_svfiprintf_r+0x5c>
 800bf00:	2a25      	cmp	r2, #37	; 0x25
 800bf02:	d1f9      	bne.n	800bef8 <_svfiprintf_r+0x50>
 800bf04:	ebba 0b04 	subs.w	fp, sl, r4
 800bf08:	d00b      	beq.n	800bf22 <_svfiprintf_r+0x7a>
 800bf0a:	465b      	mov	r3, fp
 800bf0c:	4622      	mov	r2, r4
 800bf0e:	4629      	mov	r1, r5
 800bf10:	4638      	mov	r0, r7
 800bf12:	f7ff ff6f 	bl	800bdf4 <__ssputs_r>
 800bf16:	3001      	adds	r0, #1
 800bf18:	f000 80a9 	beq.w	800c06e <_svfiprintf_r+0x1c6>
 800bf1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf1e:	445a      	add	r2, fp
 800bf20:	9209      	str	r2, [sp, #36]	; 0x24
 800bf22:	f89a 3000 	ldrb.w	r3, [sl]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	f000 80a1 	beq.w	800c06e <_svfiprintf_r+0x1c6>
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf36:	f10a 0a01 	add.w	sl, sl, #1
 800bf3a:	9304      	str	r3, [sp, #16]
 800bf3c:	9307      	str	r3, [sp, #28]
 800bf3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf42:	931a      	str	r3, [sp, #104]	; 0x68
 800bf44:	4654      	mov	r4, sl
 800bf46:	2205      	movs	r2, #5
 800bf48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf4c:	4850      	ldr	r0, [pc, #320]	; (800c090 <_svfiprintf_r+0x1e8>)
 800bf4e:	f7f4 f95f 	bl	8000210 <memchr>
 800bf52:	9a04      	ldr	r2, [sp, #16]
 800bf54:	b9d8      	cbnz	r0, 800bf8e <_svfiprintf_r+0xe6>
 800bf56:	06d0      	lsls	r0, r2, #27
 800bf58:	bf44      	itt	mi
 800bf5a:	2320      	movmi	r3, #32
 800bf5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf60:	0711      	lsls	r1, r2, #28
 800bf62:	bf44      	itt	mi
 800bf64:	232b      	movmi	r3, #43	; 0x2b
 800bf66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf6a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf6e:	2b2a      	cmp	r3, #42	; 0x2a
 800bf70:	d015      	beq.n	800bf9e <_svfiprintf_r+0xf6>
 800bf72:	9a07      	ldr	r2, [sp, #28]
 800bf74:	4654      	mov	r4, sl
 800bf76:	2000      	movs	r0, #0
 800bf78:	f04f 0c0a 	mov.w	ip, #10
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf82:	3b30      	subs	r3, #48	; 0x30
 800bf84:	2b09      	cmp	r3, #9
 800bf86:	d94d      	bls.n	800c024 <_svfiprintf_r+0x17c>
 800bf88:	b1b0      	cbz	r0, 800bfb8 <_svfiprintf_r+0x110>
 800bf8a:	9207      	str	r2, [sp, #28]
 800bf8c:	e014      	b.n	800bfb8 <_svfiprintf_r+0x110>
 800bf8e:	eba0 0308 	sub.w	r3, r0, r8
 800bf92:	fa09 f303 	lsl.w	r3, r9, r3
 800bf96:	4313      	orrs	r3, r2
 800bf98:	9304      	str	r3, [sp, #16]
 800bf9a:	46a2      	mov	sl, r4
 800bf9c:	e7d2      	b.n	800bf44 <_svfiprintf_r+0x9c>
 800bf9e:	9b03      	ldr	r3, [sp, #12]
 800bfa0:	1d19      	adds	r1, r3, #4
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	9103      	str	r1, [sp, #12]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	bfbb      	ittet	lt
 800bfaa:	425b      	neglt	r3, r3
 800bfac:	f042 0202 	orrlt.w	r2, r2, #2
 800bfb0:	9307      	strge	r3, [sp, #28]
 800bfb2:	9307      	strlt	r3, [sp, #28]
 800bfb4:	bfb8      	it	lt
 800bfb6:	9204      	strlt	r2, [sp, #16]
 800bfb8:	7823      	ldrb	r3, [r4, #0]
 800bfba:	2b2e      	cmp	r3, #46	; 0x2e
 800bfbc:	d10c      	bne.n	800bfd8 <_svfiprintf_r+0x130>
 800bfbe:	7863      	ldrb	r3, [r4, #1]
 800bfc0:	2b2a      	cmp	r3, #42	; 0x2a
 800bfc2:	d134      	bne.n	800c02e <_svfiprintf_r+0x186>
 800bfc4:	9b03      	ldr	r3, [sp, #12]
 800bfc6:	1d1a      	adds	r2, r3, #4
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	9203      	str	r2, [sp, #12]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	bfb8      	it	lt
 800bfd0:	f04f 33ff 	movlt.w	r3, #4294967295
 800bfd4:	3402      	adds	r4, #2
 800bfd6:	9305      	str	r3, [sp, #20]
 800bfd8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c0a0 <_svfiprintf_r+0x1f8>
 800bfdc:	7821      	ldrb	r1, [r4, #0]
 800bfde:	2203      	movs	r2, #3
 800bfe0:	4650      	mov	r0, sl
 800bfe2:	f7f4 f915 	bl	8000210 <memchr>
 800bfe6:	b138      	cbz	r0, 800bff8 <_svfiprintf_r+0x150>
 800bfe8:	9b04      	ldr	r3, [sp, #16]
 800bfea:	eba0 000a 	sub.w	r0, r0, sl
 800bfee:	2240      	movs	r2, #64	; 0x40
 800bff0:	4082      	lsls	r2, r0
 800bff2:	4313      	orrs	r3, r2
 800bff4:	3401      	adds	r4, #1
 800bff6:	9304      	str	r3, [sp, #16]
 800bff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bffc:	4825      	ldr	r0, [pc, #148]	; (800c094 <_svfiprintf_r+0x1ec>)
 800bffe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c002:	2206      	movs	r2, #6
 800c004:	f7f4 f904 	bl	8000210 <memchr>
 800c008:	2800      	cmp	r0, #0
 800c00a:	d038      	beq.n	800c07e <_svfiprintf_r+0x1d6>
 800c00c:	4b22      	ldr	r3, [pc, #136]	; (800c098 <_svfiprintf_r+0x1f0>)
 800c00e:	bb1b      	cbnz	r3, 800c058 <_svfiprintf_r+0x1b0>
 800c010:	9b03      	ldr	r3, [sp, #12]
 800c012:	3307      	adds	r3, #7
 800c014:	f023 0307 	bic.w	r3, r3, #7
 800c018:	3308      	adds	r3, #8
 800c01a:	9303      	str	r3, [sp, #12]
 800c01c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c01e:	4433      	add	r3, r6
 800c020:	9309      	str	r3, [sp, #36]	; 0x24
 800c022:	e768      	b.n	800bef6 <_svfiprintf_r+0x4e>
 800c024:	fb0c 3202 	mla	r2, ip, r2, r3
 800c028:	460c      	mov	r4, r1
 800c02a:	2001      	movs	r0, #1
 800c02c:	e7a6      	b.n	800bf7c <_svfiprintf_r+0xd4>
 800c02e:	2300      	movs	r3, #0
 800c030:	3401      	adds	r4, #1
 800c032:	9305      	str	r3, [sp, #20]
 800c034:	4619      	mov	r1, r3
 800c036:	f04f 0c0a 	mov.w	ip, #10
 800c03a:	4620      	mov	r0, r4
 800c03c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c040:	3a30      	subs	r2, #48	; 0x30
 800c042:	2a09      	cmp	r2, #9
 800c044:	d903      	bls.n	800c04e <_svfiprintf_r+0x1a6>
 800c046:	2b00      	cmp	r3, #0
 800c048:	d0c6      	beq.n	800bfd8 <_svfiprintf_r+0x130>
 800c04a:	9105      	str	r1, [sp, #20]
 800c04c:	e7c4      	b.n	800bfd8 <_svfiprintf_r+0x130>
 800c04e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c052:	4604      	mov	r4, r0
 800c054:	2301      	movs	r3, #1
 800c056:	e7f0      	b.n	800c03a <_svfiprintf_r+0x192>
 800c058:	ab03      	add	r3, sp, #12
 800c05a:	9300      	str	r3, [sp, #0]
 800c05c:	462a      	mov	r2, r5
 800c05e:	4b0f      	ldr	r3, [pc, #60]	; (800c09c <_svfiprintf_r+0x1f4>)
 800c060:	a904      	add	r1, sp, #16
 800c062:	4638      	mov	r0, r7
 800c064:	f7fc fc4a 	bl	80088fc <_printf_float>
 800c068:	1c42      	adds	r2, r0, #1
 800c06a:	4606      	mov	r6, r0
 800c06c:	d1d6      	bne.n	800c01c <_svfiprintf_r+0x174>
 800c06e:	89ab      	ldrh	r3, [r5, #12]
 800c070:	065b      	lsls	r3, r3, #25
 800c072:	f53f af2d 	bmi.w	800bed0 <_svfiprintf_r+0x28>
 800c076:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c078:	b01d      	add	sp, #116	; 0x74
 800c07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c07e:	ab03      	add	r3, sp, #12
 800c080:	9300      	str	r3, [sp, #0]
 800c082:	462a      	mov	r2, r5
 800c084:	4b05      	ldr	r3, [pc, #20]	; (800c09c <_svfiprintf_r+0x1f4>)
 800c086:	a904      	add	r1, sp, #16
 800c088:	4638      	mov	r0, r7
 800c08a:	f7fc fedb 	bl	8008e44 <_printf_i>
 800c08e:	e7eb      	b.n	800c068 <_svfiprintf_r+0x1c0>
 800c090:	0800dc49 	.word	0x0800dc49
 800c094:	0800dc53 	.word	0x0800dc53
 800c098:	080088fd 	.word	0x080088fd
 800c09c:	0800bdf5 	.word	0x0800bdf5
 800c0a0:	0800dc4f 	.word	0x0800dc4f

0800c0a4 <_sungetc_r>:
 800c0a4:	b538      	push	{r3, r4, r5, lr}
 800c0a6:	1c4b      	adds	r3, r1, #1
 800c0a8:	4614      	mov	r4, r2
 800c0aa:	d103      	bne.n	800c0b4 <_sungetc_r+0x10>
 800c0ac:	f04f 35ff 	mov.w	r5, #4294967295
 800c0b0:	4628      	mov	r0, r5
 800c0b2:	bd38      	pop	{r3, r4, r5, pc}
 800c0b4:	8993      	ldrh	r3, [r2, #12]
 800c0b6:	f023 0320 	bic.w	r3, r3, #32
 800c0ba:	8193      	strh	r3, [r2, #12]
 800c0bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0be:	6852      	ldr	r2, [r2, #4]
 800c0c0:	b2cd      	uxtb	r5, r1
 800c0c2:	b18b      	cbz	r3, 800c0e8 <_sungetc_r+0x44>
 800c0c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	dd08      	ble.n	800c0dc <_sungetc_r+0x38>
 800c0ca:	6823      	ldr	r3, [r4, #0]
 800c0cc:	1e5a      	subs	r2, r3, #1
 800c0ce:	6022      	str	r2, [r4, #0]
 800c0d0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c0d4:	6863      	ldr	r3, [r4, #4]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	6063      	str	r3, [r4, #4]
 800c0da:	e7e9      	b.n	800c0b0 <_sungetc_r+0xc>
 800c0dc:	4621      	mov	r1, r4
 800c0de:	f000 fbe8 	bl	800c8b2 <__submore>
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	d0f1      	beq.n	800c0ca <_sungetc_r+0x26>
 800c0e6:	e7e1      	b.n	800c0ac <_sungetc_r+0x8>
 800c0e8:	6921      	ldr	r1, [r4, #16]
 800c0ea:	6823      	ldr	r3, [r4, #0]
 800c0ec:	b151      	cbz	r1, 800c104 <_sungetc_r+0x60>
 800c0ee:	4299      	cmp	r1, r3
 800c0f0:	d208      	bcs.n	800c104 <_sungetc_r+0x60>
 800c0f2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c0f6:	42a9      	cmp	r1, r5
 800c0f8:	d104      	bne.n	800c104 <_sungetc_r+0x60>
 800c0fa:	3b01      	subs	r3, #1
 800c0fc:	3201      	adds	r2, #1
 800c0fe:	6023      	str	r3, [r4, #0]
 800c100:	6062      	str	r2, [r4, #4]
 800c102:	e7d5      	b.n	800c0b0 <_sungetc_r+0xc>
 800c104:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c10c:	6363      	str	r3, [r4, #52]	; 0x34
 800c10e:	2303      	movs	r3, #3
 800c110:	63a3      	str	r3, [r4, #56]	; 0x38
 800c112:	4623      	mov	r3, r4
 800c114:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c118:	6023      	str	r3, [r4, #0]
 800c11a:	2301      	movs	r3, #1
 800c11c:	e7dc      	b.n	800c0d8 <_sungetc_r+0x34>

0800c11e <__ssrefill_r>:
 800c11e:	b510      	push	{r4, lr}
 800c120:	460c      	mov	r4, r1
 800c122:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c124:	b169      	cbz	r1, 800c142 <__ssrefill_r+0x24>
 800c126:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c12a:	4299      	cmp	r1, r3
 800c12c:	d001      	beq.n	800c132 <__ssrefill_r+0x14>
 800c12e:	f7fe fa1d 	bl	800a56c <_free_r>
 800c132:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c134:	6063      	str	r3, [r4, #4]
 800c136:	2000      	movs	r0, #0
 800c138:	6360      	str	r0, [r4, #52]	; 0x34
 800c13a:	b113      	cbz	r3, 800c142 <__ssrefill_r+0x24>
 800c13c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c13e:	6023      	str	r3, [r4, #0]
 800c140:	bd10      	pop	{r4, pc}
 800c142:	6923      	ldr	r3, [r4, #16]
 800c144:	6023      	str	r3, [r4, #0]
 800c146:	2300      	movs	r3, #0
 800c148:	6063      	str	r3, [r4, #4]
 800c14a:	89a3      	ldrh	r3, [r4, #12]
 800c14c:	f043 0320 	orr.w	r3, r3, #32
 800c150:	81a3      	strh	r3, [r4, #12]
 800c152:	f04f 30ff 	mov.w	r0, #4294967295
 800c156:	e7f3      	b.n	800c140 <__ssrefill_r+0x22>

0800c158 <__ssvfiscanf_r>:
 800c158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c15c:	460c      	mov	r4, r1
 800c15e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c162:	2100      	movs	r1, #0
 800c164:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c168:	49a6      	ldr	r1, [pc, #664]	; (800c404 <__ssvfiscanf_r+0x2ac>)
 800c16a:	91a0      	str	r1, [sp, #640]	; 0x280
 800c16c:	f10d 0804 	add.w	r8, sp, #4
 800c170:	49a5      	ldr	r1, [pc, #660]	; (800c408 <__ssvfiscanf_r+0x2b0>)
 800c172:	4fa6      	ldr	r7, [pc, #664]	; (800c40c <__ssvfiscanf_r+0x2b4>)
 800c174:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c410 <__ssvfiscanf_r+0x2b8>
 800c178:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c17c:	4606      	mov	r6, r0
 800c17e:	91a1      	str	r1, [sp, #644]	; 0x284
 800c180:	9300      	str	r3, [sp, #0]
 800c182:	7813      	ldrb	r3, [r2, #0]
 800c184:	2b00      	cmp	r3, #0
 800c186:	f000 815a 	beq.w	800c43e <__ssvfiscanf_r+0x2e6>
 800c18a:	5cf9      	ldrb	r1, [r7, r3]
 800c18c:	f011 0108 	ands.w	r1, r1, #8
 800c190:	f102 0501 	add.w	r5, r2, #1
 800c194:	d019      	beq.n	800c1ca <__ssvfiscanf_r+0x72>
 800c196:	6863      	ldr	r3, [r4, #4]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	dd0f      	ble.n	800c1bc <__ssvfiscanf_r+0x64>
 800c19c:	6823      	ldr	r3, [r4, #0]
 800c19e:	781a      	ldrb	r2, [r3, #0]
 800c1a0:	5cba      	ldrb	r2, [r7, r2]
 800c1a2:	0712      	lsls	r2, r2, #28
 800c1a4:	d401      	bmi.n	800c1aa <__ssvfiscanf_r+0x52>
 800c1a6:	462a      	mov	r2, r5
 800c1a8:	e7eb      	b.n	800c182 <__ssvfiscanf_r+0x2a>
 800c1aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c1ac:	3201      	adds	r2, #1
 800c1ae:	9245      	str	r2, [sp, #276]	; 0x114
 800c1b0:	6862      	ldr	r2, [r4, #4]
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	3a01      	subs	r2, #1
 800c1b6:	6062      	str	r2, [r4, #4]
 800c1b8:	6023      	str	r3, [r4, #0]
 800c1ba:	e7ec      	b.n	800c196 <__ssvfiscanf_r+0x3e>
 800c1bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c1be:	4621      	mov	r1, r4
 800c1c0:	4630      	mov	r0, r6
 800c1c2:	4798      	blx	r3
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	d0e9      	beq.n	800c19c <__ssvfiscanf_r+0x44>
 800c1c8:	e7ed      	b.n	800c1a6 <__ssvfiscanf_r+0x4e>
 800c1ca:	2b25      	cmp	r3, #37	; 0x25
 800c1cc:	d012      	beq.n	800c1f4 <__ssvfiscanf_r+0x9c>
 800c1ce:	469a      	mov	sl, r3
 800c1d0:	6863      	ldr	r3, [r4, #4]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	f340 8091 	ble.w	800c2fa <__ssvfiscanf_r+0x1a2>
 800c1d8:	6822      	ldr	r2, [r4, #0]
 800c1da:	7813      	ldrb	r3, [r2, #0]
 800c1dc:	4553      	cmp	r3, sl
 800c1de:	f040 812e 	bne.w	800c43e <__ssvfiscanf_r+0x2e6>
 800c1e2:	6863      	ldr	r3, [r4, #4]
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	6063      	str	r3, [r4, #4]
 800c1e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c1ea:	3201      	adds	r2, #1
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	6022      	str	r2, [r4, #0]
 800c1f0:	9345      	str	r3, [sp, #276]	; 0x114
 800c1f2:	e7d8      	b.n	800c1a6 <__ssvfiscanf_r+0x4e>
 800c1f4:	9141      	str	r1, [sp, #260]	; 0x104
 800c1f6:	9143      	str	r1, [sp, #268]	; 0x10c
 800c1f8:	7853      	ldrb	r3, [r2, #1]
 800c1fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c1fc:	bf02      	ittt	eq
 800c1fe:	2310      	moveq	r3, #16
 800c200:	1c95      	addeq	r5, r2, #2
 800c202:	9341      	streq	r3, [sp, #260]	; 0x104
 800c204:	220a      	movs	r2, #10
 800c206:	46aa      	mov	sl, r5
 800c208:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c20c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c210:	2b09      	cmp	r3, #9
 800c212:	d91c      	bls.n	800c24e <__ssvfiscanf_r+0xf6>
 800c214:	487e      	ldr	r0, [pc, #504]	; (800c410 <__ssvfiscanf_r+0x2b8>)
 800c216:	2203      	movs	r2, #3
 800c218:	f7f3 fffa 	bl	8000210 <memchr>
 800c21c:	b138      	cbz	r0, 800c22e <__ssvfiscanf_r+0xd6>
 800c21e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c220:	eba0 0009 	sub.w	r0, r0, r9
 800c224:	2301      	movs	r3, #1
 800c226:	4083      	lsls	r3, r0
 800c228:	4313      	orrs	r3, r2
 800c22a:	9341      	str	r3, [sp, #260]	; 0x104
 800c22c:	4655      	mov	r5, sl
 800c22e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c232:	2b78      	cmp	r3, #120	; 0x78
 800c234:	d806      	bhi.n	800c244 <__ssvfiscanf_r+0xec>
 800c236:	2b57      	cmp	r3, #87	; 0x57
 800c238:	d810      	bhi.n	800c25c <__ssvfiscanf_r+0x104>
 800c23a:	2b25      	cmp	r3, #37	; 0x25
 800c23c:	d0c7      	beq.n	800c1ce <__ssvfiscanf_r+0x76>
 800c23e:	d857      	bhi.n	800c2f0 <__ssvfiscanf_r+0x198>
 800c240:	2b00      	cmp	r3, #0
 800c242:	d065      	beq.n	800c310 <__ssvfiscanf_r+0x1b8>
 800c244:	2303      	movs	r3, #3
 800c246:	9347      	str	r3, [sp, #284]	; 0x11c
 800c248:	230a      	movs	r3, #10
 800c24a:	9342      	str	r3, [sp, #264]	; 0x108
 800c24c:	e076      	b.n	800c33c <__ssvfiscanf_r+0x1e4>
 800c24e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c250:	fb02 1103 	mla	r1, r2, r3, r1
 800c254:	3930      	subs	r1, #48	; 0x30
 800c256:	9143      	str	r1, [sp, #268]	; 0x10c
 800c258:	4655      	mov	r5, sl
 800c25a:	e7d4      	b.n	800c206 <__ssvfiscanf_r+0xae>
 800c25c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c260:	2a20      	cmp	r2, #32
 800c262:	d8ef      	bhi.n	800c244 <__ssvfiscanf_r+0xec>
 800c264:	a101      	add	r1, pc, #4	; (adr r1, 800c26c <__ssvfiscanf_r+0x114>)
 800c266:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c26a:	bf00      	nop
 800c26c:	0800c31f 	.word	0x0800c31f
 800c270:	0800c245 	.word	0x0800c245
 800c274:	0800c245 	.word	0x0800c245
 800c278:	0800c37d 	.word	0x0800c37d
 800c27c:	0800c245 	.word	0x0800c245
 800c280:	0800c245 	.word	0x0800c245
 800c284:	0800c245 	.word	0x0800c245
 800c288:	0800c245 	.word	0x0800c245
 800c28c:	0800c245 	.word	0x0800c245
 800c290:	0800c245 	.word	0x0800c245
 800c294:	0800c245 	.word	0x0800c245
 800c298:	0800c393 	.word	0x0800c393
 800c29c:	0800c379 	.word	0x0800c379
 800c2a0:	0800c2f7 	.word	0x0800c2f7
 800c2a4:	0800c2f7 	.word	0x0800c2f7
 800c2a8:	0800c2f7 	.word	0x0800c2f7
 800c2ac:	0800c245 	.word	0x0800c245
 800c2b0:	0800c335 	.word	0x0800c335
 800c2b4:	0800c245 	.word	0x0800c245
 800c2b8:	0800c245 	.word	0x0800c245
 800c2bc:	0800c245 	.word	0x0800c245
 800c2c0:	0800c245 	.word	0x0800c245
 800c2c4:	0800c3a3 	.word	0x0800c3a3
 800c2c8:	0800c371 	.word	0x0800c371
 800c2cc:	0800c317 	.word	0x0800c317
 800c2d0:	0800c245 	.word	0x0800c245
 800c2d4:	0800c245 	.word	0x0800c245
 800c2d8:	0800c39f 	.word	0x0800c39f
 800c2dc:	0800c245 	.word	0x0800c245
 800c2e0:	0800c379 	.word	0x0800c379
 800c2e4:	0800c245 	.word	0x0800c245
 800c2e8:	0800c245 	.word	0x0800c245
 800c2ec:	0800c31f 	.word	0x0800c31f
 800c2f0:	3b45      	subs	r3, #69	; 0x45
 800c2f2:	2b02      	cmp	r3, #2
 800c2f4:	d8a6      	bhi.n	800c244 <__ssvfiscanf_r+0xec>
 800c2f6:	2305      	movs	r3, #5
 800c2f8:	e01f      	b.n	800c33a <__ssvfiscanf_r+0x1e2>
 800c2fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c2fc:	4621      	mov	r1, r4
 800c2fe:	4630      	mov	r0, r6
 800c300:	4798      	blx	r3
 800c302:	2800      	cmp	r0, #0
 800c304:	f43f af68 	beq.w	800c1d8 <__ssvfiscanf_r+0x80>
 800c308:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c30a:	2800      	cmp	r0, #0
 800c30c:	f040 808d 	bne.w	800c42a <__ssvfiscanf_r+0x2d2>
 800c310:	f04f 30ff 	mov.w	r0, #4294967295
 800c314:	e08f      	b.n	800c436 <__ssvfiscanf_r+0x2de>
 800c316:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c318:	f042 0220 	orr.w	r2, r2, #32
 800c31c:	9241      	str	r2, [sp, #260]	; 0x104
 800c31e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c324:	9241      	str	r2, [sp, #260]	; 0x104
 800c326:	2210      	movs	r2, #16
 800c328:	2b6f      	cmp	r3, #111	; 0x6f
 800c32a:	9242      	str	r2, [sp, #264]	; 0x108
 800c32c:	bf34      	ite	cc
 800c32e:	2303      	movcc	r3, #3
 800c330:	2304      	movcs	r3, #4
 800c332:	e002      	b.n	800c33a <__ssvfiscanf_r+0x1e2>
 800c334:	2300      	movs	r3, #0
 800c336:	9342      	str	r3, [sp, #264]	; 0x108
 800c338:	2303      	movs	r3, #3
 800c33a:	9347      	str	r3, [sp, #284]	; 0x11c
 800c33c:	6863      	ldr	r3, [r4, #4]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	dd3d      	ble.n	800c3be <__ssvfiscanf_r+0x266>
 800c342:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c344:	0659      	lsls	r1, r3, #25
 800c346:	d404      	bmi.n	800c352 <__ssvfiscanf_r+0x1fa>
 800c348:	6823      	ldr	r3, [r4, #0]
 800c34a:	781a      	ldrb	r2, [r3, #0]
 800c34c:	5cba      	ldrb	r2, [r7, r2]
 800c34e:	0712      	lsls	r2, r2, #28
 800c350:	d43c      	bmi.n	800c3cc <__ssvfiscanf_r+0x274>
 800c352:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c354:	2b02      	cmp	r3, #2
 800c356:	dc4b      	bgt.n	800c3f0 <__ssvfiscanf_r+0x298>
 800c358:	466b      	mov	r3, sp
 800c35a:	4622      	mov	r2, r4
 800c35c:	a941      	add	r1, sp, #260	; 0x104
 800c35e:	4630      	mov	r0, r6
 800c360:	f000 f872 	bl	800c448 <_scanf_chars>
 800c364:	2801      	cmp	r0, #1
 800c366:	d06a      	beq.n	800c43e <__ssvfiscanf_r+0x2e6>
 800c368:	2802      	cmp	r0, #2
 800c36a:	f47f af1c 	bne.w	800c1a6 <__ssvfiscanf_r+0x4e>
 800c36e:	e7cb      	b.n	800c308 <__ssvfiscanf_r+0x1b0>
 800c370:	2308      	movs	r3, #8
 800c372:	9342      	str	r3, [sp, #264]	; 0x108
 800c374:	2304      	movs	r3, #4
 800c376:	e7e0      	b.n	800c33a <__ssvfiscanf_r+0x1e2>
 800c378:	220a      	movs	r2, #10
 800c37a:	e7d5      	b.n	800c328 <__ssvfiscanf_r+0x1d0>
 800c37c:	4629      	mov	r1, r5
 800c37e:	4640      	mov	r0, r8
 800c380:	f000 fa5e 	bl	800c840 <__sccl>
 800c384:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c38a:	9341      	str	r3, [sp, #260]	; 0x104
 800c38c:	4605      	mov	r5, r0
 800c38e:	2301      	movs	r3, #1
 800c390:	e7d3      	b.n	800c33a <__ssvfiscanf_r+0x1e2>
 800c392:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c398:	9341      	str	r3, [sp, #260]	; 0x104
 800c39a:	2300      	movs	r3, #0
 800c39c:	e7cd      	b.n	800c33a <__ssvfiscanf_r+0x1e2>
 800c39e:	2302      	movs	r3, #2
 800c3a0:	e7cb      	b.n	800c33a <__ssvfiscanf_r+0x1e2>
 800c3a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c3a4:	06c3      	lsls	r3, r0, #27
 800c3a6:	f53f aefe 	bmi.w	800c1a6 <__ssvfiscanf_r+0x4e>
 800c3aa:	9b00      	ldr	r3, [sp, #0]
 800c3ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c3ae:	1d19      	adds	r1, r3, #4
 800c3b0:	9100      	str	r1, [sp, #0]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	07c0      	lsls	r0, r0, #31
 800c3b6:	bf4c      	ite	mi
 800c3b8:	801a      	strhmi	r2, [r3, #0]
 800c3ba:	601a      	strpl	r2, [r3, #0]
 800c3bc:	e6f3      	b.n	800c1a6 <__ssvfiscanf_r+0x4e>
 800c3be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c3c0:	4621      	mov	r1, r4
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	4798      	blx	r3
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	d0bb      	beq.n	800c342 <__ssvfiscanf_r+0x1ea>
 800c3ca:	e79d      	b.n	800c308 <__ssvfiscanf_r+0x1b0>
 800c3cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c3ce:	3201      	adds	r2, #1
 800c3d0:	9245      	str	r2, [sp, #276]	; 0x114
 800c3d2:	6862      	ldr	r2, [r4, #4]
 800c3d4:	3a01      	subs	r2, #1
 800c3d6:	2a00      	cmp	r2, #0
 800c3d8:	6062      	str	r2, [r4, #4]
 800c3da:	dd02      	ble.n	800c3e2 <__ssvfiscanf_r+0x28a>
 800c3dc:	3301      	adds	r3, #1
 800c3de:	6023      	str	r3, [r4, #0]
 800c3e0:	e7b2      	b.n	800c348 <__ssvfiscanf_r+0x1f0>
 800c3e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c3e4:	4621      	mov	r1, r4
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	4798      	blx	r3
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	d0ac      	beq.n	800c348 <__ssvfiscanf_r+0x1f0>
 800c3ee:	e78b      	b.n	800c308 <__ssvfiscanf_r+0x1b0>
 800c3f0:	2b04      	cmp	r3, #4
 800c3f2:	dc0f      	bgt.n	800c414 <__ssvfiscanf_r+0x2bc>
 800c3f4:	466b      	mov	r3, sp
 800c3f6:	4622      	mov	r2, r4
 800c3f8:	a941      	add	r1, sp, #260	; 0x104
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	f000 f87e 	bl	800c4fc <_scanf_i>
 800c400:	e7b0      	b.n	800c364 <__ssvfiscanf_r+0x20c>
 800c402:	bf00      	nop
 800c404:	0800c0a5 	.word	0x0800c0a5
 800c408:	0800c11f 	.word	0x0800c11f
 800c40c:	0800db49 	.word	0x0800db49
 800c410:	0800dc4f 	.word	0x0800dc4f
 800c414:	4b0b      	ldr	r3, [pc, #44]	; (800c444 <__ssvfiscanf_r+0x2ec>)
 800c416:	2b00      	cmp	r3, #0
 800c418:	f43f aec5 	beq.w	800c1a6 <__ssvfiscanf_r+0x4e>
 800c41c:	466b      	mov	r3, sp
 800c41e:	4622      	mov	r2, r4
 800c420:	a941      	add	r1, sp, #260	; 0x104
 800c422:	4630      	mov	r0, r6
 800c424:	f7fc fe30 	bl	8009088 <_scanf_float>
 800c428:	e79c      	b.n	800c364 <__ssvfiscanf_r+0x20c>
 800c42a:	89a3      	ldrh	r3, [r4, #12]
 800c42c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c430:	bf18      	it	ne
 800c432:	f04f 30ff 	movne.w	r0, #4294967295
 800c436:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c43e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c440:	e7f9      	b.n	800c436 <__ssvfiscanf_r+0x2de>
 800c442:	bf00      	nop
 800c444:	08009089 	.word	0x08009089

0800c448 <_scanf_chars>:
 800c448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c44c:	4615      	mov	r5, r2
 800c44e:	688a      	ldr	r2, [r1, #8]
 800c450:	4680      	mov	r8, r0
 800c452:	460c      	mov	r4, r1
 800c454:	b932      	cbnz	r2, 800c464 <_scanf_chars+0x1c>
 800c456:	698a      	ldr	r2, [r1, #24]
 800c458:	2a00      	cmp	r2, #0
 800c45a:	bf0c      	ite	eq
 800c45c:	2201      	moveq	r2, #1
 800c45e:	f04f 32ff 	movne.w	r2, #4294967295
 800c462:	608a      	str	r2, [r1, #8]
 800c464:	6822      	ldr	r2, [r4, #0]
 800c466:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c4f8 <_scanf_chars+0xb0>
 800c46a:	06d1      	lsls	r1, r2, #27
 800c46c:	bf5f      	itttt	pl
 800c46e:	681a      	ldrpl	r2, [r3, #0]
 800c470:	1d11      	addpl	r1, r2, #4
 800c472:	6019      	strpl	r1, [r3, #0]
 800c474:	6816      	ldrpl	r6, [r2, #0]
 800c476:	2700      	movs	r7, #0
 800c478:	69a0      	ldr	r0, [r4, #24]
 800c47a:	b188      	cbz	r0, 800c4a0 <_scanf_chars+0x58>
 800c47c:	2801      	cmp	r0, #1
 800c47e:	d107      	bne.n	800c490 <_scanf_chars+0x48>
 800c480:	682a      	ldr	r2, [r5, #0]
 800c482:	7811      	ldrb	r1, [r2, #0]
 800c484:	6962      	ldr	r2, [r4, #20]
 800c486:	5c52      	ldrb	r2, [r2, r1]
 800c488:	b952      	cbnz	r2, 800c4a0 <_scanf_chars+0x58>
 800c48a:	2f00      	cmp	r7, #0
 800c48c:	d031      	beq.n	800c4f2 <_scanf_chars+0xaa>
 800c48e:	e022      	b.n	800c4d6 <_scanf_chars+0x8e>
 800c490:	2802      	cmp	r0, #2
 800c492:	d120      	bne.n	800c4d6 <_scanf_chars+0x8e>
 800c494:	682b      	ldr	r3, [r5, #0]
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c49c:	071b      	lsls	r3, r3, #28
 800c49e:	d41a      	bmi.n	800c4d6 <_scanf_chars+0x8e>
 800c4a0:	6823      	ldr	r3, [r4, #0]
 800c4a2:	06da      	lsls	r2, r3, #27
 800c4a4:	bf5e      	ittt	pl
 800c4a6:	682b      	ldrpl	r3, [r5, #0]
 800c4a8:	781b      	ldrbpl	r3, [r3, #0]
 800c4aa:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c4ae:	682a      	ldr	r2, [r5, #0]
 800c4b0:	686b      	ldr	r3, [r5, #4]
 800c4b2:	3201      	adds	r2, #1
 800c4b4:	602a      	str	r2, [r5, #0]
 800c4b6:	68a2      	ldr	r2, [r4, #8]
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	3a01      	subs	r2, #1
 800c4bc:	606b      	str	r3, [r5, #4]
 800c4be:	3701      	adds	r7, #1
 800c4c0:	60a2      	str	r2, [r4, #8]
 800c4c2:	b142      	cbz	r2, 800c4d6 <_scanf_chars+0x8e>
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	dcd7      	bgt.n	800c478 <_scanf_chars+0x30>
 800c4c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c4cc:	4629      	mov	r1, r5
 800c4ce:	4640      	mov	r0, r8
 800c4d0:	4798      	blx	r3
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	d0d0      	beq.n	800c478 <_scanf_chars+0x30>
 800c4d6:	6823      	ldr	r3, [r4, #0]
 800c4d8:	f013 0310 	ands.w	r3, r3, #16
 800c4dc:	d105      	bne.n	800c4ea <_scanf_chars+0xa2>
 800c4de:	68e2      	ldr	r2, [r4, #12]
 800c4e0:	3201      	adds	r2, #1
 800c4e2:	60e2      	str	r2, [r4, #12]
 800c4e4:	69a2      	ldr	r2, [r4, #24]
 800c4e6:	b102      	cbz	r2, 800c4ea <_scanf_chars+0xa2>
 800c4e8:	7033      	strb	r3, [r6, #0]
 800c4ea:	6923      	ldr	r3, [r4, #16]
 800c4ec:	443b      	add	r3, r7
 800c4ee:	6123      	str	r3, [r4, #16]
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4f6:	bf00      	nop
 800c4f8:	0800db49 	.word	0x0800db49

0800c4fc <_scanf_i>:
 800c4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c500:	4698      	mov	r8, r3
 800c502:	4b74      	ldr	r3, [pc, #464]	; (800c6d4 <_scanf_i+0x1d8>)
 800c504:	460c      	mov	r4, r1
 800c506:	4682      	mov	sl, r0
 800c508:	4616      	mov	r6, r2
 800c50a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c50e:	b087      	sub	sp, #28
 800c510:	ab03      	add	r3, sp, #12
 800c512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c516:	4b70      	ldr	r3, [pc, #448]	; (800c6d8 <_scanf_i+0x1dc>)
 800c518:	69a1      	ldr	r1, [r4, #24]
 800c51a:	4a70      	ldr	r2, [pc, #448]	; (800c6dc <_scanf_i+0x1e0>)
 800c51c:	2903      	cmp	r1, #3
 800c51e:	bf18      	it	ne
 800c520:	461a      	movne	r2, r3
 800c522:	68a3      	ldr	r3, [r4, #8]
 800c524:	9201      	str	r2, [sp, #4]
 800c526:	1e5a      	subs	r2, r3, #1
 800c528:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c52c:	bf88      	it	hi
 800c52e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c532:	4627      	mov	r7, r4
 800c534:	bf82      	ittt	hi
 800c536:	eb03 0905 	addhi.w	r9, r3, r5
 800c53a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c53e:	60a3      	strhi	r3, [r4, #8]
 800c540:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c544:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c548:	bf98      	it	ls
 800c54a:	f04f 0900 	movls.w	r9, #0
 800c54e:	6023      	str	r3, [r4, #0]
 800c550:	463d      	mov	r5, r7
 800c552:	f04f 0b00 	mov.w	fp, #0
 800c556:	6831      	ldr	r1, [r6, #0]
 800c558:	ab03      	add	r3, sp, #12
 800c55a:	7809      	ldrb	r1, [r1, #0]
 800c55c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c560:	2202      	movs	r2, #2
 800c562:	f7f3 fe55 	bl	8000210 <memchr>
 800c566:	b328      	cbz	r0, 800c5b4 <_scanf_i+0xb8>
 800c568:	f1bb 0f01 	cmp.w	fp, #1
 800c56c:	d159      	bne.n	800c622 <_scanf_i+0x126>
 800c56e:	6862      	ldr	r2, [r4, #4]
 800c570:	b92a      	cbnz	r2, 800c57e <_scanf_i+0x82>
 800c572:	6822      	ldr	r2, [r4, #0]
 800c574:	2308      	movs	r3, #8
 800c576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c57a:	6063      	str	r3, [r4, #4]
 800c57c:	6022      	str	r2, [r4, #0]
 800c57e:	6822      	ldr	r2, [r4, #0]
 800c580:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c584:	6022      	str	r2, [r4, #0]
 800c586:	68a2      	ldr	r2, [r4, #8]
 800c588:	1e51      	subs	r1, r2, #1
 800c58a:	60a1      	str	r1, [r4, #8]
 800c58c:	b192      	cbz	r2, 800c5b4 <_scanf_i+0xb8>
 800c58e:	6832      	ldr	r2, [r6, #0]
 800c590:	1c51      	adds	r1, r2, #1
 800c592:	6031      	str	r1, [r6, #0]
 800c594:	7812      	ldrb	r2, [r2, #0]
 800c596:	f805 2b01 	strb.w	r2, [r5], #1
 800c59a:	6872      	ldr	r2, [r6, #4]
 800c59c:	3a01      	subs	r2, #1
 800c59e:	2a00      	cmp	r2, #0
 800c5a0:	6072      	str	r2, [r6, #4]
 800c5a2:	dc07      	bgt.n	800c5b4 <_scanf_i+0xb8>
 800c5a4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c5a8:	4631      	mov	r1, r6
 800c5aa:	4650      	mov	r0, sl
 800c5ac:	4790      	blx	r2
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	f040 8085 	bne.w	800c6be <_scanf_i+0x1c2>
 800c5b4:	f10b 0b01 	add.w	fp, fp, #1
 800c5b8:	f1bb 0f03 	cmp.w	fp, #3
 800c5bc:	d1cb      	bne.n	800c556 <_scanf_i+0x5a>
 800c5be:	6863      	ldr	r3, [r4, #4]
 800c5c0:	b90b      	cbnz	r3, 800c5c6 <_scanf_i+0xca>
 800c5c2:	230a      	movs	r3, #10
 800c5c4:	6063      	str	r3, [r4, #4]
 800c5c6:	6863      	ldr	r3, [r4, #4]
 800c5c8:	4945      	ldr	r1, [pc, #276]	; (800c6e0 <_scanf_i+0x1e4>)
 800c5ca:	6960      	ldr	r0, [r4, #20]
 800c5cc:	1ac9      	subs	r1, r1, r3
 800c5ce:	f000 f937 	bl	800c840 <__sccl>
 800c5d2:	f04f 0b00 	mov.w	fp, #0
 800c5d6:	68a3      	ldr	r3, [r4, #8]
 800c5d8:	6822      	ldr	r2, [r4, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d03d      	beq.n	800c65a <_scanf_i+0x15e>
 800c5de:	6831      	ldr	r1, [r6, #0]
 800c5e0:	6960      	ldr	r0, [r4, #20]
 800c5e2:	f891 c000 	ldrb.w	ip, [r1]
 800c5e6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c5ea:	2800      	cmp	r0, #0
 800c5ec:	d035      	beq.n	800c65a <_scanf_i+0x15e>
 800c5ee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c5f2:	d124      	bne.n	800c63e <_scanf_i+0x142>
 800c5f4:	0510      	lsls	r0, r2, #20
 800c5f6:	d522      	bpl.n	800c63e <_scanf_i+0x142>
 800c5f8:	f10b 0b01 	add.w	fp, fp, #1
 800c5fc:	f1b9 0f00 	cmp.w	r9, #0
 800c600:	d003      	beq.n	800c60a <_scanf_i+0x10e>
 800c602:	3301      	adds	r3, #1
 800c604:	f109 39ff 	add.w	r9, r9, #4294967295
 800c608:	60a3      	str	r3, [r4, #8]
 800c60a:	6873      	ldr	r3, [r6, #4]
 800c60c:	3b01      	subs	r3, #1
 800c60e:	2b00      	cmp	r3, #0
 800c610:	6073      	str	r3, [r6, #4]
 800c612:	dd1b      	ble.n	800c64c <_scanf_i+0x150>
 800c614:	6833      	ldr	r3, [r6, #0]
 800c616:	3301      	adds	r3, #1
 800c618:	6033      	str	r3, [r6, #0]
 800c61a:	68a3      	ldr	r3, [r4, #8]
 800c61c:	3b01      	subs	r3, #1
 800c61e:	60a3      	str	r3, [r4, #8]
 800c620:	e7d9      	b.n	800c5d6 <_scanf_i+0xda>
 800c622:	f1bb 0f02 	cmp.w	fp, #2
 800c626:	d1ae      	bne.n	800c586 <_scanf_i+0x8a>
 800c628:	6822      	ldr	r2, [r4, #0]
 800c62a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c62e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c632:	d1bf      	bne.n	800c5b4 <_scanf_i+0xb8>
 800c634:	2310      	movs	r3, #16
 800c636:	6063      	str	r3, [r4, #4]
 800c638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c63c:	e7a2      	b.n	800c584 <_scanf_i+0x88>
 800c63e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c642:	6022      	str	r2, [r4, #0]
 800c644:	780b      	ldrb	r3, [r1, #0]
 800c646:	f805 3b01 	strb.w	r3, [r5], #1
 800c64a:	e7de      	b.n	800c60a <_scanf_i+0x10e>
 800c64c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c650:	4631      	mov	r1, r6
 800c652:	4650      	mov	r0, sl
 800c654:	4798      	blx	r3
 800c656:	2800      	cmp	r0, #0
 800c658:	d0df      	beq.n	800c61a <_scanf_i+0x11e>
 800c65a:	6823      	ldr	r3, [r4, #0]
 800c65c:	05d9      	lsls	r1, r3, #23
 800c65e:	d50d      	bpl.n	800c67c <_scanf_i+0x180>
 800c660:	42bd      	cmp	r5, r7
 800c662:	d909      	bls.n	800c678 <_scanf_i+0x17c>
 800c664:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c668:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c66c:	4632      	mov	r2, r6
 800c66e:	4650      	mov	r0, sl
 800c670:	4798      	blx	r3
 800c672:	f105 39ff 	add.w	r9, r5, #4294967295
 800c676:	464d      	mov	r5, r9
 800c678:	42bd      	cmp	r5, r7
 800c67a:	d028      	beq.n	800c6ce <_scanf_i+0x1d2>
 800c67c:	6822      	ldr	r2, [r4, #0]
 800c67e:	f012 0210 	ands.w	r2, r2, #16
 800c682:	d113      	bne.n	800c6ac <_scanf_i+0x1b0>
 800c684:	702a      	strb	r2, [r5, #0]
 800c686:	6863      	ldr	r3, [r4, #4]
 800c688:	9e01      	ldr	r6, [sp, #4]
 800c68a:	4639      	mov	r1, r7
 800c68c:	4650      	mov	r0, sl
 800c68e:	47b0      	blx	r6
 800c690:	f8d8 3000 	ldr.w	r3, [r8]
 800c694:	6821      	ldr	r1, [r4, #0]
 800c696:	1d1a      	adds	r2, r3, #4
 800c698:	f8c8 2000 	str.w	r2, [r8]
 800c69c:	f011 0f20 	tst.w	r1, #32
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	d00f      	beq.n	800c6c4 <_scanf_i+0x1c8>
 800c6a4:	6018      	str	r0, [r3, #0]
 800c6a6:	68e3      	ldr	r3, [r4, #12]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	60e3      	str	r3, [r4, #12]
 800c6ac:	6923      	ldr	r3, [r4, #16]
 800c6ae:	1bed      	subs	r5, r5, r7
 800c6b0:	445d      	add	r5, fp
 800c6b2:	442b      	add	r3, r5
 800c6b4:	6123      	str	r3, [r4, #16]
 800c6b6:	2000      	movs	r0, #0
 800c6b8:	b007      	add	sp, #28
 800c6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6be:	f04f 0b00 	mov.w	fp, #0
 800c6c2:	e7ca      	b.n	800c65a <_scanf_i+0x15e>
 800c6c4:	07ca      	lsls	r2, r1, #31
 800c6c6:	bf4c      	ite	mi
 800c6c8:	8018      	strhmi	r0, [r3, #0]
 800c6ca:	6018      	strpl	r0, [r3, #0]
 800c6cc:	e7eb      	b.n	800c6a6 <_scanf_i+0x1aa>
 800c6ce:	2001      	movs	r0, #1
 800c6d0:	e7f2      	b.n	800c6b8 <_scanf_i+0x1bc>
 800c6d2:	bf00      	nop
 800c6d4:	0800d8b4 	.word	0x0800d8b4
 800c6d8:	0800d22d 	.word	0x0800d22d
 800c6dc:	0800bdf1 	.word	0x0800bdf1
 800c6e0:	0800dc6a 	.word	0x0800dc6a

0800c6e4 <__sflush_r>:
 800c6e4:	898a      	ldrh	r2, [r1, #12]
 800c6e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ea:	4605      	mov	r5, r0
 800c6ec:	0710      	lsls	r0, r2, #28
 800c6ee:	460c      	mov	r4, r1
 800c6f0:	d458      	bmi.n	800c7a4 <__sflush_r+0xc0>
 800c6f2:	684b      	ldr	r3, [r1, #4]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	dc05      	bgt.n	800c704 <__sflush_r+0x20>
 800c6f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	dc02      	bgt.n	800c704 <__sflush_r+0x20>
 800c6fe:	2000      	movs	r0, #0
 800c700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c706:	2e00      	cmp	r6, #0
 800c708:	d0f9      	beq.n	800c6fe <__sflush_r+0x1a>
 800c70a:	2300      	movs	r3, #0
 800c70c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c710:	682f      	ldr	r7, [r5, #0]
 800c712:	6a21      	ldr	r1, [r4, #32]
 800c714:	602b      	str	r3, [r5, #0]
 800c716:	d032      	beq.n	800c77e <__sflush_r+0x9a>
 800c718:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c71a:	89a3      	ldrh	r3, [r4, #12]
 800c71c:	075a      	lsls	r2, r3, #29
 800c71e:	d505      	bpl.n	800c72c <__sflush_r+0x48>
 800c720:	6863      	ldr	r3, [r4, #4]
 800c722:	1ac0      	subs	r0, r0, r3
 800c724:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c726:	b10b      	cbz	r3, 800c72c <__sflush_r+0x48>
 800c728:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c72a:	1ac0      	subs	r0, r0, r3
 800c72c:	2300      	movs	r3, #0
 800c72e:	4602      	mov	r2, r0
 800c730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c732:	6a21      	ldr	r1, [r4, #32]
 800c734:	4628      	mov	r0, r5
 800c736:	47b0      	blx	r6
 800c738:	1c43      	adds	r3, r0, #1
 800c73a:	89a3      	ldrh	r3, [r4, #12]
 800c73c:	d106      	bne.n	800c74c <__sflush_r+0x68>
 800c73e:	6829      	ldr	r1, [r5, #0]
 800c740:	291d      	cmp	r1, #29
 800c742:	d82b      	bhi.n	800c79c <__sflush_r+0xb8>
 800c744:	4a29      	ldr	r2, [pc, #164]	; (800c7ec <__sflush_r+0x108>)
 800c746:	410a      	asrs	r2, r1
 800c748:	07d6      	lsls	r6, r2, #31
 800c74a:	d427      	bmi.n	800c79c <__sflush_r+0xb8>
 800c74c:	2200      	movs	r2, #0
 800c74e:	6062      	str	r2, [r4, #4]
 800c750:	04d9      	lsls	r1, r3, #19
 800c752:	6922      	ldr	r2, [r4, #16]
 800c754:	6022      	str	r2, [r4, #0]
 800c756:	d504      	bpl.n	800c762 <__sflush_r+0x7e>
 800c758:	1c42      	adds	r2, r0, #1
 800c75a:	d101      	bne.n	800c760 <__sflush_r+0x7c>
 800c75c:	682b      	ldr	r3, [r5, #0]
 800c75e:	b903      	cbnz	r3, 800c762 <__sflush_r+0x7e>
 800c760:	6560      	str	r0, [r4, #84]	; 0x54
 800c762:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c764:	602f      	str	r7, [r5, #0]
 800c766:	2900      	cmp	r1, #0
 800c768:	d0c9      	beq.n	800c6fe <__sflush_r+0x1a>
 800c76a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c76e:	4299      	cmp	r1, r3
 800c770:	d002      	beq.n	800c778 <__sflush_r+0x94>
 800c772:	4628      	mov	r0, r5
 800c774:	f7fd fefa 	bl	800a56c <_free_r>
 800c778:	2000      	movs	r0, #0
 800c77a:	6360      	str	r0, [r4, #52]	; 0x34
 800c77c:	e7c0      	b.n	800c700 <__sflush_r+0x1c>
 800c77e:	2301      	movs	r3, #1
 800c780:	4628      	mov	r0, r5
 800c782:	47b0      	blx	r6
 800c784:	1c41      	adds	r1, r0, #1
 800c786:	d1c8      	bne.n	800c71a <__sflush_r+0x36>
 800c788:	682b      	ldr	r3, [r5, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d0c5      	beq.n	800c71a <__sflush_r+0x36>
 800c78e:	2b1d      	cmp	r3, #29
 800c790:	d001      	beq.n	800c796 <__sflush_r+0xb2>
 800c792:	2b16      	cmp	r3, #22
 800c794:	d101      	bne.n	800c79a <__sflush_r+0xb6>
 800c796:	602f      	str	r7, [r5, #0]
 800c798:	e7b1      	b.n	800c6fe <__sflush_r+0x1a>
 800c79a:	89a3      	ldrh	r3, [r4, #12]
 800c79c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7a0:	81a3      	strh	r3, [r4, #12]
 800c7a2:	e7ad      	b.n	800c700 <__sflush_r+0x1c>
 800c7a4:	690f      	ldr	r7, [r1, #16]
 800c7a6:	2f00      	cmp	r7, #0
 800c7a8:	d0a9      	beq.n	800c6fe <__sflush_r+0x1a>
 800c7aa:	0793      	lsls	r3, r2, #30
 800c7ac:	680e      	ldr	r6, [r1, #0]
 800c7ae:	bf08      	it	eq
 800c7b0:	694b      	ldreq	r3, [r1, #20]
 800c7b2:	600f      	str	r7, [r1, #0]
 800c7b4:	bf18      	it	ne
 800c7b6:	2300      	movne	r3, #0
 800c7b8:	eba6 0807 	sub.w	r8, r6, r7
 800c7bc:	608b      	str	r3, [r1, #8]
 800c7be:	f1b8 0f00 	cmp.w	r8, #0
 800c7c2:	dd9c      	ble.n	800c6fe <__sflush_r+0x1a>
 800c7c4:	6a21      	ldr	r1, [r4, #32]
 800c7c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c7c8:	4643      	mov	r3, r8
 800c7ca:	463a      	mov	r2, r7
 800c7cc:	4628      	mov	r0, r5
 800c7ce:	47b0      	blx	r6
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	dc06      	bgt.n	800c7e2 <__sflush_r+0xfe>
 800c7d4:	89a3      	ldrh	r3, [r4, #12]
 800c7d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7da:	81a3      	strh	r3, [r4, #12]
 800c7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e0:	e78e      	b.n	800c700 <__sflush_r+0x1c>
 800c7e2:	4407      	add	r7, r0
 800c7e4:	eba8 0800 	sub.w	r8, r8, r0
 800c7e8:	e7e9      	b.n	800c7be <__sflush_r+0xda>
 800c7ea:	bf00      	nop
 800c7ec:	dfbffffe 	.word	0xdfbffffe

0800c7f0 <_fflush_r>:
 800c7f0:	b538      	push	{r3, r4, r5, lr}
 800c7f2:	690b      	ldr	r3, [r1, #16]
 800c7f4:	4605      	mov	r5, r0
 800c7f6:	460c      	mov	r4, r1
 800c7f8:	b913      	cbnz	r3, 800c800 <_fflush_r+0x10>
 800c7fa:	2500      	movs	r5, #0
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	bd38      	pop	{r3, r4, r5, pc}
 800c800:	b118      	cbz	r0, 800c80a <_fflush_r+0x1a>
 800c802:	6a03      	ldr	r3, [r0, #32]
 800c804:	b90b      	cbnz	r3, 800c80a <_fflush_r+0x1a>
 800c806:	f7fc fedb 	bl	80095c0 <__sinit>
 800c80a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d0f3      	beq.n	800c7fa <_fflush_r+0xa>
 800c812:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c814:	07d0      	lsls	r0, r2, #31
 800c816:	d404      	bmi.n	800c822 <_fflush_r+0x32>
 800c818:	0599      	lsls	r1, r3, #22
 800c81a:	d402      	bmi.n	800c822 <_fflush_r+0x32>
 800c81c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c81e:	f7fd f814 	bl	800984a <__retarget_lock_acquire_recursive>
 800c822:	4628      	mov	r0, r5
 800c824:	4621      	mov	r1, r4
 800c826:	f7ff ff5d 	bl	800c6e4 <__sflush_r>
 800c82a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c82c:	07da      	lsls	r2, r3, #31
 800c82e:	4605      	mov	r5, r0
 800c830:	d4e4      	bmi.n	800c7fc <_fflush_r+0xc>
 800c832:	89a3      	ldrh	r3, [r4, #12]
 800c834:	059b      	lsls	r3, r3, #22
 800c836:	d4e1      	bmi.n	800c7fc <_fflush_r+0xc>
 800c838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c83a:	f7fd f807 	bl	800984c <__retarget_lock_release_recursive>
 800c83e:	e7dd      	b.n	800c7fc <_fflush_r+0xc>

0800c840 <__sccl>:
 800c840:	b570      	push	{r4, r5, r6, lr}
 800c842:	780b      	ldrb	r3, [r1, #0]
 800c844:	4604      	mov	r4, r0
 800c846:	2b5e      	cmp	r3, #94	; 0x5e
 800c848:	bf0b      	itete	eq
 800c84a:	784b      	ldrbeq	r3, [r1, #1]
 800c84c:	1c4a      	addne	r2, r1, #1
 800c84e:	1c8a      	addeq	r2, r1, #2
 800c850:	2100      	movne	r1, #0
 800c852:	bf08      	it	eq
 800c854:	2101      	moveq	r1, #1
 800c856:	3801      	subs	r0, #1
 800c858:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c85c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c860:	42a8      	cmp	r0, r5
 800c862:	d1fb      	bne.n	800c85c <__sccl+0x1c>
 800c864:	b90b      	cbnz	r3, 800c86a <__sccl+0x2a>
 800c866:	1e50      	subs	r0, r2, #1
 800c868:	bd70      	pop	{r4, r5, r6, pc}
 800c86a:	f081 0101 	eor.w	r1, r1, #1
 800c86e:	54e1      	strb	r1, [r4, r3]
 800c870:	4610      	mov	r0, r2
 800c872:	4602      	mov	r2, r0
 800c874:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c878:	2d2d      	cmp	r5, #45	; 0x2d
 800c87a:	d005      	beq.n	800c888 <__sccl+0x48>
 800c87c:	2d5d      	cmp	r5, #93	; 0x5d
 800c87e:	d016      	beq.n	800c8ae <__sccl+0x6e>
 800c880:	2d00      	cmp	r5, #0
 800c882:	d0f1      	beq.n	800c868 <__sccl+0x28>
 800c884:	462b      	mov	r3, r5
 800c886:	e7f2      	b.n	800c86e <__sccl+0x2e>
 800c888:	7846      	ldrb	r6, [r0, #1]
 800c88a:	2e5d      	cmp	r6, #93	; 0x5d
 800c88c:	d0fa      	beq.n	800c884 <__sccl+0x44>
 800c88e:	42b3      	cmp	r3, r6
 800c890:	dcf8      	bgt.n	800c884 <__sccl+0x44>
 800c892:	3002      	adds	r0, #2
 800c894:	461a      	mov	r2, r3
 800c896:	3201      	adds	r2, #1
 800c898:	4296      	cmp	r6, r2
 800c89a:	54a1      	strb	r1, [r4, r2]
 800c89c:	dcfb      	bgt.n	800c896 <__sccl+0x56>
 800c89e:	1af2      	subs	r2, r6, r3
 800c8a0:	3a01      	subs	r2, #1
 800c8a2:	1c5d      	adds	r5, r3, #1
 800c8a4:	42b3      	cmp	r3, r6
 800c8a6:	bfa8      	it	ge
 800c8a8:	2200      	movge	r2, #0
 800c8aa:	18ab      	adds	r3, r5, r2
 800c8ac:	e7e1      	b.n	800c872 <__sccl+0x32>
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	e7da      	b.n	800c868 <__sccl+0x28>

0800c8b2 <__submore>:
 800c8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b6:	460c      	mov	r4, r1
 800c8b8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c8ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8be:	4299      	cmp	r1, r3
 800c8c0:	d11d      	bne.n	800c8fe <__submore+0x4c>
 800c8c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c8c6:	f7fd fec5 	bl	800a654 <_malloc_r>
 800c8ca:	b918      	cbnz	r0, 800c8d4 <__submore+0x22>
 800c8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8d8:	63a3      	str	r3, [r4, #56]	; 0x38
 800c8da:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c8de:	6360      	str	r0, [r4, #52]	; 0x34
 800c8e0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c8e4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c8e8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c8ec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c8f0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c8f4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c8f8:	6020      	str	r0, [r4, #0]
 800c8fa:	2000      	movs	r0, #0
 800c8fc:	e7e8      	b.n	800c8d0 <__submore+0x1e>
 800c8fe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c900:	0077      	lsls	r7, r6, #1
 800c902:	463a      	mov	r2, r7
 800c904:	f000 fbf1 	bl	800d0ea <_realloc_r>
 800c908:	4605      	mov	r5, r0
 800c90a:	2800      	cmp	r0, #0
 800c90c:	d0de      	beq.n	800c8cc <__submore+0x1a>
 800c90e:	eb00 0806 	add.w	r8, r0, r6
 800c912:	4601      	mov	r1, r0
 800c914:	4632      	mov	r2, r6
 800c916:	4640      	mov	r0, r8
 800c918:	f7fc ff99 	bl	800984e <memcpy>
 800c91c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c920:	f8c4 8000 	str.w	r8, [r4]
 800c924:	e7e9      	b.n	800c8fa <__submore+0x48>

0800c926 <memmove>:
 800c926:	4288      	cmp	r0, r1
 800c928:	b510      	push	{r4, lr}
 800c92a:	eb01 0402 	add.w	r4, r1, r2
 800c92e:	d902      	bls.n	800c936 <memmove+0x10>
 800c930:	4284      	cmp	r4, r0
 800c932:	4623      	mov	r3, r4
 800c934:	d807      	bhi.n	800c946 <memmove+0x20>
 800c936:	1e43      	subs	r3, r0, #1
 800c938:	42a1      	cmp	r1, r4
 800c93a:	d008      	beq.n	800c94e <memmove+0x28>
 800c93c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c940:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c944:	e7f8      	b.n	800c938 <memmove+0x12>
 800c946:	4402      	add	r2, r0
 800c948:	4601      	mov	r1, r0
 800c94a:	428a      	cmp	r2, r1
 800c94c:	d100      	bne.n	800c950 <memmove+0x2a>
 800c94e:	bd10      	pop	{r4, pc}
 800c950:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c954:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c958:	e7f7      	b.n	800c94a <memmove+0x24>

0800c95a <strncmp>:
 800c95a:	b510      	push	{r4, lr}
 800c95c:	b16a      	cbz	r2, 800c97a <strncmp+0x20>
 800c95e:	3901      	subs	r1, #1
 800c960:	1884      	adds	r4, r0, r2
 800c962:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c966:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d103      	bne.n	800c976 <strncmp+0x1c>
 800c96e:	42a0      	cmp	r0, r4
 800c970:	d001      	beq.n	800c976 <strncmp+0x1c>
 800c972:	2a00      	cmp	r2, #0
 800c974:	d1f5      	bne.n	800c962 <strncmp+0x8>
 800c976:	1ad0      	subs	r0, r2, r3
 800c978:	bd10      	pop	{r4, pc}
 800c97a:	4610      	mov	r0, r2
 800c97c:	e7fc      	b.n	800c978 <strncmp+0x1e>
	...

0800c980 <_sbrk_r>:
 800c980:	b538      	push	{r3, r4, r5, lr}
 800c982:	4d06      	ldr	r5, [pc, #24]	; (800c99c <_sbrk_r+0x1c>)
 800c984:	2300      	movs	r3, #0
 800c986:	4604      	mov	r4, r0
 800c988:	4608      	mov	r0, r1
 800c98a:	602b      	str	r3, [r5, #0]
 800c98c:	f7f6 fa04 	bl	8002d98 <_sbrk>
 800c990:	1c43      	adds	r3, r0, #1
 800c992:	d102      	bne.n	800c99a <_sbrk_r+0x1a>
 800c994:	682b      	ldr	r3, [r5, #0]
 800c996:	b103      	cbz	r3, 800c99a <_sbrk_r+0x1a>
 800c998:	6023      	str	r3, [r4, #0]
 800c99a:	bd38      	pop	{r3, r4, r5, pc}
 800c99c:	20000d30 	.word	0x20000d30

0800c9a0 <nan>:
 800c9a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c9a8 <nan+0x8>
 800c9a4:	4770      	bx	lr
 800c9a6:	bf00      	nop
 800c9a8:	00000000 	.word	0x00000000
 800c9ac:	7ff80000 	.word	0x7ff80000

0800c9b0 <__assert_func>:
 800c9b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9b2:	4614      	mov	r4, r2
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	4b09      	ldr	r3, [pc, #36]	; (800c9dc <__assert_func+0x2c>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4605      	mov	r5, r0
 800c9bc:	68d8      	ldr	r0, [r3, #12]
 800c9be:	b14c      	cbz	r4, 800c9d4 <__assert_func+0x24>
 800c9c0:	4b07      	ldr	r3, [pc, #28]	; (800c9e0 <__assert_func+0x30>)
 800c9c2:	9100      	str	r1, [sp, #0]
 800c9c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c9c8:	4906      	ldr	r1, [pc, #24]	; (800c9e4 <__assert_func+0x34>)
 800c9ca:	462b      	mov	r3, r5
 800c9cc:	f000 fc3e 	bl	800d24c <fiprintf>
 800c9d0:	f000 fc4e 	bl	800d270 <abort>
 800c9d4:	4b04      	ldr	r3, [pc, #16]	; (800c9e8 <__assert_func+0x38>)
 800c9d6:	461c      	mov	r4, r3
 800c9d8:	e7f3      	b.n	800c9c2 <__assert_func+0x12>
 800c9da:	bf00      	nop
 800c9dc:	20000078 	.word	0x20000078
 800c9e0:	0800dc7d 	.word	0x0800dc7d
 800c9e4:	0800dc8a 	.word	0x0800dc8a
 800c9e8:	0800dcb8 	.word	0x0800dcb8

0800c9ec <_calloc_r>:
 800c9ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9ee:	fba1 2402 	umull	r2, r4, r1, r2
 800c9f2:	b94c      	cbnz	r4, 800ca08 <_calloc_r+0x1c>
 800c9f4:	4611      	mov	r1, r2
 800c9f6:	9201      	str	r2, [sp, #4]
 800c9f8:	f7fd fe2c 	bl	800a654 <_malloc_r>
 800c9fc:	9a01      	ldr	r2, [sp, #4]
 800c9fe:	4605      	mov	r5, r0
 800ca00:	b930      	cbnz	r0, 800ca10 <_calloc_r+0x24>
 800ca02:	4628      	mov	r0, r5
 800ca04:	b003      	add	sp, #12
 800ca06:	bd30      	pop	{r4, r5, pc}
 800ca08:	220c      	movs	r2, #12
 800ca0a:	6002      	str	r2, [r0, #0]
 800ca0c:	2500      	movs	r5, #0
 800ca0e:	e7f8      	b.n	800ca02 <_calloc_r+0x16>
 800ca10:	4621      	mov	r1, r4
 800ca12:	f7fc fe9c 	bl	800974e <memset>
 800ca16:	e7f4      	b.n	800ca02 <_calloc_r+0x16>

0800ca18 <rshift>:
 800ca18:	6903      	ldr	r3, [r0, #16]
 800ca1a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ca1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca22:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ca26:	f100 0414 	add.w	r4, r0, #20
 800ca2a:	dd45      	ble.n	800cab8 <rshift+0xa0>
 800ca2c:	f011 011f 	ands.w	r1, r1, #31
 800ca30:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ca34:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ca38:	d10c      	bne.n	800ca54 <rshift+0x3c>
 800ca3a:	f100 0710 	add.w	r7, r0, #16
 800ca3e:	4629      	mov	r1, r5
 800ca40:	42b1      	cmp	r1, r6
 800ca42:	d334      	bcc.n	800caae <rshift+0x96>
 800ca44:	1a9b      	subs	r3, r3, r2
 800ca46:	009b      	lsls	r3, r3, #2
 800ca48:	1eea      	subs	r2, r5, #3
 800ca4a:	4296      	cmp	r6, r2
 800ca4c:	bf38      	it	cc
 800ca4e:	2300      	movcc	r3, #0
 800ca50:	4423      	add	r3, r4
 800ca52:	e015      	b.n	800ca80 <rshift+0x68>
 800ca54:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ca58:	f1c1 0820 	rsb	r8, r1, #32
 800ca5c:	40cf      	lsrs	r7, r1
 800ca5e:	f105 0e04 	add.w	lr, r5, #4
 800ca62:	46a1      	mov	r9, r4
 800ca64:	4576      	cmp	r6, lr
 800ca66:	46f4      	mov	ip, lr
 800ca68:	d815      	bhi.n	800ca96 <rshift+0x7e>
 800ca6a:	1a9a      	subs	r2, r3, r2
 800ca6c:	0092      	lsls	r2, r2, #2
 800ca6e:	3a04      	subs	r2, #4
 800ca70:	3501      	adds	r5, #1
 800ca72:	42ae      	cmp	r6, r5
 800ca74:	bf38      	it	cc
 800ca76:	2200      	movcc	r2, #0
 800ca78:	18a3      	adds	r3, r4, r2
 800ca7a:	50a7      	str	r7, [r4, r2]
 800ca7c:	b107      	cbz	r7, 800ca80 <rshift+0x68>
 800ca7e:	3304      	adds	r3, #4
 800ca80:	1b1a      	subs	r2, r3, r4
 800ca82:	42a3      	cmp	r3, r4
 800ca84:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ca88:	bf08      	it	eq
 800ca8a:	2300      	moveq	r3, #0
 800ca8c:	6102      	str	r2, [r0, #16]
 800ca8e:	bf08      	it	eq
 800ca90:	6143      	streq	r3, [r0, #20]
 800ca92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca96:	f8dc c000 	ldr.w	ip, [ip]
 800ca9a:	fa0c fc08 	lsl.w	ip, ip, r8
 800ca9e:	ea4c 0707 	orr.w	r7, ip, r7
 800caa2:	f849 7b04 	str.w	r7, [r9], #4
 800caa6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800caaa:	40cf      	lsrs	r7, r1
 800caac:	e7da      	b.n	800ca64 <rshift+0x4c>
 800caae:	f851 cb04 	ldr.w	ip, [r1], #4
 800cab2:	f847 cf04 	str.w	ip, [r7, #4]!
 800cab6:	e7c3      	b.n	800ca40 <rshift+0x28>
 800cab8:	4623      	mov	r3, r4
 800caba:	e7e1      	b.n	800ca80 <rshift+0x68>

0800cabc <__hexdig_fun>:
 800cabc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cac0:	2b09      	cmp	r3, #9
 800cac2:	d802      	bhi.n	800caca <__hexdig_fun+0xe>
 800cac4:	3820      	subs	r0, #32
 800cac6:	b2c0      	uxtb	r0, r0
 800cac8:	4770      	bx	lr
 800caca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cace:	2b05      	cmp	r3, #5
 800cad0:	d801      	bhi.n	800cad6 <__hexdig_fun+0x1a>
 800cad2:	3847      	subs	r0, #71	; 0x47
 800cad4:	e7f7      	b.n	800cac6 <__hexdig_fun+0xa>
 800cad6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cada:	2b05      	cmp	r3, #5
 800cadc:	d801      	bhi.n	800cae2 <__hexdig_fun+0x26>
 800cade:	3827      	subs	r0, #39	; 0x27
 800cae0:	e7f1      	b.n	800cac6 <__hexdig_fun+0xa>
 800cae2:	2000      	movs	r0, #0
 800cae4:	4770      	bx	lr
	...

0800cae8 <__gethex>:
 800cae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caec:	4617      	mov	r7, r2
 800caee:	680a      	ldr	r2, [r1, #0]
 800caf0:	b085      	sub	sp, #20
 800caf2:	f102 0b02 	add.w	fp, r2, #2
 800caf6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cafa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cafe:	4681      	mov	r9, r0
 800cb00:	468a      	mov	sl, r1
 800cb02:	9302      	str	r3, [sp, #8]
 800cb04:	32fe      	adds	r2, #254	; 0xfe
 800cb06:	eb02 030b 	add.w	r3, r2, fp
 800cb0a:	46d8      	mov	r8, fp
 800cb0c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800cb10:	9301      	str	r3, [sp, #4]
 800cb12:	2830      	cmp	r0, #48	; 0x30
 800cb14:	d0f7      	beq.n	800cb06 <__gethex+0x1e>
 800cb16:	f7ff ffd1 	bl	800cabc <__hexdig_fun>
 800cb1a:	4604      	mov	r4, r0
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	d138      	bne.n	800cb92 <__gethex+0xaa>
 800cb20:	49a7      	ldr	r1, [pc, #668]	; (800cdc0 <__gethex+0x2d8>)
 800cb22:	2201      	movs	r2, #1
 800cb24:	4640      	mov	r0, r8
 800cb26:	f7ff ff18 	bl	800c95a <strncmp>
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d169      	bne.n	800cc04 <__gethex+0x11c>
 800cb30:	f898 0001 	ldrb.w	r0, [r8, #1]
 800cb34:	465d      	mov	r5, fp
 800cb36:	f7ff ffc1 	bl	800cabc <__hexdig_fun>
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	d064      	beq.n	800cc08 <__gethex+0x120>
 800cb3e:	465a      	mov	r2, fp
 800cb40:	7810      	ldrb	r0, [r2, #0]
 800cb42:	2830      	cmp	r0, #48	; 0x30
 800cb44:	4690      	mov	r8, r2
 800cb46:	f102 0201 	add.w	r2, r2, #1
 800cb4a:	d0f9      	beq.n	800cb40 <__gethex+0x58>
 800cb4c:	f7ff ffb6 	bl	800cabc <__hexdig_fun>
 800cb50:	2301      	movs	r3, #1
 800cb52:	fab0 f480 	clz	r4, r0
 800cb56:	0964      	lsrs	r4, r4, #5
 800cb58:	465e      	mov	r6, fp
 800cb5a:	9301      	str	r3, [sp, #4]
 800cb5c:	4642      	mov	r2, r8
 800cb5e:	4615      	mov	r5, r2
 800cb60:	3201      	adds	r2, #1
 800cb62:	7828      	ldrb	r0, [r5, #0]
 800cb64:	f7ff ffaa 	bl	800cabc <__hexdig_fun>
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	d1f8      	bne.n	800cb5e <__gethex+0x76>
 800cb6c:	4994      	ldr	r1, [pc, #592]	; (800cdc0 <__gethex+0x2d8>)
 800cb6e:	2201      	movs	r2, #1
 800cb70:	4628      	mov	r0, r5
 800cb72:	f7ff fef2 	bl	800c95a <strncmp>
 800cb76:	b978      	cbnz	r0, 800cb98 <__gethex+0xb0>
 800cb78:	b946      	cbnz	r6, 800cb8c <__gethex+0xa4>
 800cb7a:	1c6e      	adds	r6, r5, #1
 800cb7c:	4632      	mov	r2, r6
 800cb7e:	4615      	mov	r5, r2
 800cb80:	3201      	adds	r2, #1
 800cb82:	7828      	ldrb	r0, [r5, #0]
 800cb84:	f7ff ff9a 	bl	800cabc <__hexdig_fun>
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	d1f8      	bne.n	800cb7e <__gethex+0x96>
 800cb8c:	1b73      	subs	r3, r6, r5
 800cb8e:	009e      	lsls	r6, r3, #2
 800cb90:	e004      	b.n	800cb9c <__gethex+0xb4>
 800cb92:	2400      	movs	r4, #0
 800cb94:	4626      	mov	r6, r4
 800cb96:	e7e1      	b.n	800cb5c <__gethex+0x74>
 800cb98:	2e00      	cmp	r6, #0
 800cb9a:	d1f7      	bne.n	800cb8c <__gethex+0xa4>
 800cb9c:	782b      	ldrb	r3, [r5, #0]
 800cb9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cba2:	2b50      	cmp	r3, #80	; 0x50
 800cba4:	d13d      	bne.n	800cc22 <__gethex+0x13a>
 800cba6:	786b      	ldrb	r3, [r5, #1]
 800cba8:	2b2b      	cmp	r3, #43	; 0x2b
 800cbaa:	d02f      	beq.n	800cc0c <__gethex+0x124>
 800cbac:	2b2d      	cmp	r3, #45	; 0x2d
 800cbae:	d031      	beq.n	800cc14 <__gethex+0x12c>
 800cbb0:	1c69      	adds	r1, r5, #1
 800cbb2:	f04f 0b00 	mov.w	fp, #0
 800cbb6:	7808      	ldrb	r0, [r1, #0]
 800cbb8:	f7ff ff80 	bl	800cabc <__hexdig_fun>
 800cbbc:	1e42      	subs	r2, r0, #1
 800cbbe:	b2d2      	uxtb	r2, r2
 800cbc0:	2a18      	cmp	r2, #24
 800cbc2:	d82e      	bhi.n	800cc22 <__gethex+0x13a>
 800cbc4:	f1a0 0210 	sub.w	r2, r0, #16
 800cbc8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cbcc:	f7ff ff76 	bl	800cabc <__hexdig_fun>
 800cbd0:	f100 3cff 	add.w	ip, r0, #4294967295
 800cbd4:	fa5f fc8c 	uxtb.w	ip, ip
 800cbd8:	f1bc 0f18 	cmp.w	ip, #24
 800cbdc:	d91d      	bls.n	800cc1a <__gethex+0x132>
 800cbde:	f1bb 0f00 	cmp.w	fp, #0
 800cbe2:	d000      	beq.n	800cbe6 <__gethex+0xfe>
 800cbe4:	4252      	negs	r2, r2
 800cbe6:	4416      	add	r6, r2
 800cbe8:	f8ca 1000 	str.w	r1, [sl]
 800cbec:	b1dc      	cbz	r4, 800cc26 <__gethex+0x13e>
 800cbee:	9b01      	ldr	r3, [sp, #4]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	bf14      	ite	ne
 800cbf4:	f04f 0800 	movne.w	r8, #0
 800cbf8:	f04f 0806 	moveq.w	r8, #6
 800cbfc:	4640      	mov	r0, r8
 800cbfe:	b005      	add	sp, #20
 800cc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc04:	4645      	mov	r5, r8
 800cc06:	4626      	mov	r6, r4
 800cc08:	2401      	movs	r4, #1
 800cc0a:	e7c7      	b.n	800cb9c <__gethex+0xb4>
 800cc0c:	f04f 0b00 	mov.w	fp, #0
 800cc10:	1ca9      	adds	r1, r5, #2
 800cc12:	e7d0      	b.n	800cbb6 <__gethex+0xce>
 800cc14:	f04f 0b01 	mov.w	fp, #1
 800cc18:	e7fa      	b.n	800cc10 <__gethex+0x128>
 800cc1a:	230a      	movs	r3, #10
 800cc1c:	fb03 0002 	mla	r0, r3, r2, r0
 800cc20:	e7d0      	b.n	800cbc4 <__gethex+0xdc>
 800cc22:	4629      	mov	r1, r5
 800cc24:	e7e0      	b.n	800cbe8 <__gethex+0x100>
 800cc26:	eba5 0308 	sub.w	r3, r5, r8
 800cc2a:	3b01      	subs	r3, #1
 800cc2c:	4621      	mov	r1, r4
 800cc2e:	2b07      	cmp	r3, #7
 800cc30:	dc0a      	bgt.n	800cc48 <__gethex+0x160>
 800cc32:	4648      	mov	r0, r9
 800cc34:	f7fd fd9a 	bl	800a76c <_Balloc>
 800cc38:	4604      	mov	r4, r0
 800cc3a:	b940      	cbnz	r0, 800cc4e <__gethex+0x166>
 800cc3c:	4b61      	ldr	r3, [pc, #388]	; (800cdc4 <__gethex+0x2dc>)
 800cc3e:	4602      	mov	r2, r0
 800cc40:	21e4      	movs	r1, #228	; 0xe4
 800cc42:	4861      	ldr	r0, [pc, #388]	; (800cdc8 <__gethex+0x2e0>)
 800cc44:	f7ff feb4 	bl	800c9b0 <__assert_func>
 800cc48:	3101      	adds	r1, #1
 800cc4a:	105b      	asrs	r3, r3, #1
 800cc4c:	e7ef      	b.n	800cc2e <__gethex+0x146>
 800cc4e:	f100 0a14 	add.w	sl, r0, #20
 800cc52:	2300      	movs	r3, #0
 800cc54:	495a      	ldr	r1, [pc, #360]	; (800cdc0 <__gethex+0x2d8>)
 800cc56:	f8cd a004 	str.w	sl, [sp, #4]
 800cc5a:	469b      	mov	fp, r3
 800cc5c:	45a8      	cmp	r8, r5
 800cc5e:	d342      	bcc.n	800cce6 <__gethex+0x1fe>
 800cc60:	9801      	ldr	r0, [sp, #4]
 800cc62:	f840 bb04 	str.w	fp, [r0], #4
 800cc66:	eba0 000a 	sub.w	r0, r0, sl
 800cc6a:	1080      	asrs	r0, r0, #2
 800cc6c:	6120      	str	r0, [r4, #16]
 800cc6e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800cc72:	4658      	mov	r0, fp
 800cc74:	f7fd fe6c 	bl	800a950 <__hi0bits>
 800cc78:	683d      	ldr	r5, [r7, #0]
 800cc7a:	eba8 0000 	sub.w	r0, r8, r0
 800cc7e:	42a8      	cmp	r0, r5
 800cc80:	dd59      	ble.n	800cd36 <__gethex+0x24e>
 800cc82:	eba0 0805 	sub.w	r8, r0, r5
 800cc86:	4641      	mov	r1, r8
 800cc88:	4620      	mov	r0, r4
 800cc8a:	f7fe f9fb 	bl	800b084 <__any_on>
 800cc8e:	4683      	mov	fp, r0
 800cc90:	b1b8      	cbz	r0, 800ccc2 <__gethex+0x1da>
 800cc92:	f108 33ff 	add.w	r3, r8, #4294967295
 800cc96:	1159      	asrs	r1, r3, #5
 800cc98:	f003 021f 	and.w	r2, r3, #31
 800cc9c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cca0:	f04f 0b01 	mov.w	fp, #1
 800cca4:	fa0b f202 	lsl.w	r2, fp, r2
 800cca8:	420a      	tst	r2, r1
 800ccaa:	d00a      	beq.n	800ccc2 <__gethex+0x1da>
 800ccac:	455b      	cmp	r3, fp
 800ccae:	dd06      	ble.n	800ccbe <__gethex+0x1d6>
 800ccb0:	f1a8 0102 	sub.w	r1, r8, #2
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f7fe f9e5 	bl	800b084 <__any_on>
 800ccba:	2800      	cmp	r0, #0
 800ccbc:	d138      	bne.n	800cd30 <__gethex+0x248>
 800ccbe:	f04f 0b02 	mov.w	fp, #2
 800ccc2:	4641      	mov	r1, r8
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	f7ff fea7 	bl	800ca18 <rshift>
 800ccca:	4446      	add	r6, r8
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	42b3      	cmp	r3, r6
 800ccd0:	da41      	bge.n	800cd56 <__gethex+0x26e>
 800ccd2:	4621      	mov	r1, r4
 800ccd4:	4648      	mov	r0, r9
 800ccd6:	f7fd fd89 	bl	800a7ec <_Bfree>
 800ccda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ccdc:	2300      	movs	r3, #0
 800ccde:	6013      	str	r3, [r2, #0]
 800cce0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800cce4:	e78a      	b.n	800cbfc <__gethex+0x114>
 800cce6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ccea:	2a2e      	cmp	r2, #46	; 0x2e
 800ccec:	d014      	beq.n	800cd18 <__gethex+0x230>
 800ccee:	2b20      	cmp	r3, #32
 800ccf0:	d106      	bne.n	800cd00 <__gethex+0x218>
 800ccf2:	9b01      	ldr	r3, [sp, #4]
 800ccf4:	f843 bb04 	str.w	fp, [r3], #4
 800ccf8:	f04f 0b00 	mov.w	fp, #0
 800ccfc:	9301      	str	r3, [sp, #4]
 800ccfe:	465b      	mov	r3, fp
 800cd00:	7828      	ldrb	r0, [r5, #0]
 800cd02:	9303      	str	r3, [sp, #12]
 800cd04:	f7ff feda 	bl	800cabc <__hexdig_fun>
 800cd08:	9b03      	ldr	r3, [sp, #12]
 800cd0a:	f000 000f 	and.w	r0, r0, #15
 800cd0e:	4098      	lsls	r0, r3
 800cd10:	ea4b 0b00 	orr.w	fp, fp, r0
 800cd14:	3304      	adds	r3, #4
 800cd16:	e7a1      	b.n	800cc5c <__gethex+0x174>
 800cd18:	45a8      	cmp	r8, r5
 800cd1a:	d8e8      	bhi.n	800ccee <__gethex+0x206>
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	4628      	mov	r0, r5
 800cd20:	9303      	str	r3, [sp, #12]
 800cd22:	f7ff fe1a 	bl	800c95a <strncmp>
 800cd26:	4926      	ldr	r1, [pc, #152]	; (800cdc0 <__gethex+0x2d8>)
 800cd28:	9b03      	ldr	r3, [sp, #12]
 800cd2a:	2800      	cmp	r0, #0
 800cd2c:	d1df      	bne.n	800ccee <__gethex+0x206>
 800cd2e:	e795      	b.n	800cc5c <__gethex+0x174>
 800cd30:	f04f 0b03 	mov.w	fp, #3
 800cd34:	e7c5      	b.n	800ccc2 <__gethex+0x1da>
 800cd36:	da0b      	bge.n	800cd50 <__gethex+0x268>
 800cd38:	eba5 0800 	sub.w	r8, r5, r0
 800cd3c:	4621      	mov	r1, r4
 800cd3e:	4642      	mov	r2, r8
 800cd40:	4648      	mov	r0, r9
 800cd42:	f7fd ff6d 	bl	800ac20 <__lshift>
 800cd46:	eba6 0608 	sub.w	r6, r6, r8
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	f100 0a14 	add.w	sl, r0, #20
 800cd50:	f04f 0b00 	mov.w	fp, #0
 800cd54:	e7ba      	b.n	800cccc <__gethex+0x1e4>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	42b3      	cmp	r3, r6
 800cd5a:	dd73      	ble.n	800ce44 <__gethex+0x35c>
 800cd5c:	1b9e      	subs	r6, r3, r6
 800cd5e:	42b5      	cmp	r5, r6
 800cd60:	dc34      	bgt.n	800cdcc <__gethex+0x2e4>
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2b02      	cmp	r3, #2
 800cd66:	d023      	beq.n	800cdb0 <__gethex+0x2c8>
 800cd68:	2b03      	cmp	r3, #3
 800cd6a:	d025      	beq.n	800cdb8 <__gethex+0x2d0>
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d115      	bne.n	800cd9c <__gethex+0x2b4>
 800cd70:	42b5      	cmp	r5, r6
 800cd72:	d113      	bne.n	800cd9c <__gethex+0x2b4>
 800cd74:	2d01      	cmp	r5, #1
 800cd76:	d10b      	bne.n	800cd90 <__gethex+0x2a8>
 800cd78:	9a02      	ldr	r2, [sp, #8]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6013      	str	r3, [r2, #0]
 800cd7e:	2301      	movs	r3, #1
 800cd80:	6123      	str	r3, [r4, #16]
 800cd82:	f8ca 3000 	str.w	r3, [sl]
 800cd86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd88:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cd8c:	601c      	str	r4, [r3, #0]
 800cd8e:	e735      	b.n	800cbfc <__gethex+0x114>
 800cd90:	1e69      	subs	r1, r5, #1
 800cd92:	4620      	mov	r0, r4
 800cd94:	f7fe f976 	bl	800b084 <__any_on>
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	d1ed      	bne.n	800cd78 <__gethex+0x290>
 800cd9c:	4621      	mov	r1, r4
 800cd9e:	4648      	mov	r0, r9
 800cda0:	f7fd fd24 	bl	800a7ec <_Bfree>
 800cda4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cda6:	2300      	movs	r3, #0
 800cda8:	6013      	str	r3, [r2, #0]
 800cdaa:	f04f 0850 	mov.w	r8, #80	; 0x50
 800cdae:	e725      	b.n	800cbfc <__gethex+0x114>
 800cdb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d1f2      	bne.n	800cd9c <__gethex+0x2b4>
 800cdb6:	e7df      	b.n	800cd78 <__gethex+0x290>
 800cdb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d1dc      	bne.n	800cd78 <__gethex+0x290>
 800cdbe:	e7ed      	b.n	800cd9c <__gethex+0x2b4>
 800cdc0:	0800daf4 	.word	0x0800daf4
 800cdc4:	0800d98b 	.word	0x0800d98b
 800cdc8:	0800dcb9 	.word	0x0800dcb9
 800cdcc:	f106 38ff 	add.w	r8, r6, #4294967295
 800cdd0:	f1bb 0f00 	cmp.w	fp, #0
 800cdd4:	d133      	bne.n	800ce3e <__gethex+0x356>
 800cdd6:	f1b8 0f00 	cmp.w	r8, #0
 800cdda:	d004      	beq.n	800cde6 <__gethex+0x2fe>
 800cddc:	4641      	mov	r1, r8
 800cdde:	4620      	mov	r0, r4
 800cde0:	f7fe f950 	bl	800b084 <__any_on>
 800cde4:	4683      	mov	fp, r0
 800cde6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800cdea:	2301      	movs	r3, #1
 800cdec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cdf0:	f008 081f 	and.w	r8, r8, #31
 800cdf4:	fa03 f308 	lsl.w	r3, r3, r8
 800cdf8:	4213      	tst	r3, r2
 800cdfa:	4631      	mov	r1, r6
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	bf18      	it	ne
 800ce00:	f04b 0b02 	orrne.w	fp, fp, #2
 800ce04:	1bad      	subs	r5, r5, r6
 800ce06:	f7ff fe07 	bl	800ca18 <rshift>
 800ce0a:	687e      	ldr	r6, [r7, #4]
 800ce0c:	f04f 0802 	mov.w	r8, #2
 800ce10:	f1bb 0f00 	cmp.w	fp, #0
 800ce14:	d04a      	beq.n	800ceac <__gethex+0x3c4>
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2b02      	cmp	r3, #2
 800ce1a:	d016      	beq.n	800ce4a <__gethex+0x362>
 800ce1c:	2b03      	cmp	r3, #3
 800ce1e:	d018      	beq.n	800ce52 <__gethex+0x36a>
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d109      	bne.n	800ce38 <__gethex+0x350>
 800ce24:	f01b 0f02 	tst.w	fp, #2
 800ce28:	d006      	beq.n	800ce38 <__gethex+0x350>
 800ce2a:	f8da 3000 	ldr.w	r3, [sl]
 800ce2e:	ea4b 0b03 	orr.w	fp, fp, r3
 800ce32:	f01b 0f01 	tst.w	fp, #1
 800ce36:	d10f      	bne.n	800ce58 <__gethex+0x370>
 800ce38:	f048 0810 	orr.w	r8, r8, #16
 800ce3c:	e036      	b.n	800ceac <__gethex+0x3c4>
 800ce3e:	f04f 0b01 	mov.w	fp, #1
 800ce42:	e7d0      	b.n	800cde6 <__gethex+0x2fe>
 800ce44:	f04f 0801 	mov.w	r8, #1
 800ce48:	e7e2      	b.n	800ce10 <__gethex+0x328>
 800ce4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce4c:	f1c3 0301 	rsb	r3, r3, #1
 800ce50:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d0ef      	beq.n	800ce38 <__gethex+0x350>
 800ce58:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ce5c:	f104 0214 	add.w	r2, r4, #20
 800ce60:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ce64:	9301      	str	r3, [sp, #4]
 800ce66:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	4694      	mov	ip, r2
 800ce6e:	f852 1b04 	ldr.w	r1, [r2], #4
 800ce72:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ce76:	d01e      	beq.n	800ceb6 <__gethex+0x3ce>
 800ce78:	3101      	adds	r1, #1
 800ce7a:	f8cc 1000 	str.w	r1, [ip]
 800ce7e:	f1b8 0f02 	cmp.w	r8, #2
 800ce82:	f104 0214 	add.w	r2, r4, #20
 800ce86:	d13d      	bne.n	800cf04 <__gethex+0x41c>
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	3b01      	subs	r3, #1
 800ce8c:	42ab      	cmp	r3, r5
 800ce8e:	d10b      	bne.n	800cea8 <__gethex+0x3c0>
 800ce90:	1169      	asrs	r1, r5, #5
 800ce92:	2301      	movs	r3, #1
 800ce94:	f005 051f 	and.w	r5, r5, #31
 800ce98:	fa03 f505 	lsl.w	r5, r3, r5
 800ce9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cea0:	421d      	tst	r5, r3
 800cea2:	bf18      	it	ne
 800cea4:	f04f 0801 	movne.w	r8, #1
 800cea8:	f048 0820 	orr.w	r8, r8, #32
 800ceac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ceae:	601c      	str	r4, [r3, #0]
 800ceb0:	9b02      	ldr	r3, [sp, #8]
 800ceb2:	601e      	str	r6, [r3, #0]
 800ceb4:	e6a2      	b.n	800cbfc <__gethex+0x114>
 800ceb6:	4290      	cmp	r0, r2
 800ceb8:	f842 3c04 	str.w	r3, [r2, #-4]
 800cebc:	d8d6      	bhi.n	800ce6c <__gethex+0x384>
 800cebe:	68a2      	ldr	r2, [r4, #8]
 800cec0:	4593      	cmp	fp, r2
 800cec2:	db17      	blt.n	800cef4 <__gethex+0x40c>
 800cec4:	6861      	ldr	r1, [r4, #4]
 800cec6:	4648      	mov	r0, r9
 800cec8:	3101      	adds	r1, #1
 800ceca:	f7fd fc4f 	bl	800a76c <_Balloc>
 800cece:	4682      	mov	sl, r0
 800ced0:	b918      	cbnz	r0, 800ceda <__gethex+0x3f2>
 800ced2:	4b1b      	ldr	r3, [pc, #108]	; (800cf40 <__gethex+0x458>)
 800ced4:	4602      	mov	r2, r0
 800ced6:	2184      	movs	r1, #132	; 0x84
 800ced8:	e6b3      	b.n	800cc42 <__gethex+0x15a>
 800ceda:	6922      	ldr	r2, [r4, #16]
 800cedc:	3202      	adds	r2, #2
 800cede:	f104 010c 	add.w	r1, r4, #12
 800cee2:	0092      	lsls	r2, r2, #2
 800cee4:	300c      	adds	r0, #12
 800cee6:	f7fc fcb2 	bl	800984e <memcpy>
 800ceea:	4621      	mov	r1, r4
 800ceec:	4648      	mov	r0, r9
 800ceee:	f7fd fc7d 	bl	800a7ec <_Bfree>
 800cef2:	4654      	mov	r4, sl
 800cef4:	6922      	ldr	r2, [r4, #16]
 800cef6:	1c51      	adds	r1, r2, #1
 800cef8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cefc:	6121      	str	r1, [r4, #16]
 800cefe:	2101      	movs	r1, #1
 800cf00:	6151      	str	r1, [r2, #20]
 800cf02:	e7bc      	b.n	800ce7e <__gethex+0x396>
 800cf04:	6921      	ldr	r1, [r4, #16]
 800cf06:	4559      	cmp	r1, fp
 800cf08:	dd0b      	ble.n	800cf22 <__gethex+0x43a>
 800cf0a:	2101      	movs	r1, #1
 800cf0c:	4620      	mov	r0, r4
 800cf0e:	f7ff fd83 	bl	800ca18 <rshift>
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	3601      	adds	r6, #1
 800cf16:	42b3      	cmp	r3, r6
 800cf18:	f6ff aedb 	blt.w	800ccd2 <__gethex+0x1ea>
 800cf1c:	f04f 0801 	mov.w	r8, #1
 800cf20:	e7c2      	b.n	800cea8 <__gethex+0x3c0>
 800cf22:	f015 051f 	ands.w	r5, r5, #31
 800cf26:	d0f9      	beq.n	800cf1c <__gethex+0x434>
 800cf28:	9b01      	ldr	r3, [sp, #4]
 800cf2a:	441a      	add	r2, r3
 800cf2c:	f1c5 0520 	rsb	r5, r5, #32
 800cf30:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800cf34:	f7fd fd0c 	bl	800a950 <__hi0bits>
 800cf38:	42a8      	cmp	r0, r5
 800cf3a:	dbe6      	blt.n	800cf0a <__gethex+0x422>
 800cf3c:	e7ee      	b.n	800cf1c <__gethex+0x434>
 800cf3e:	bf00      	nop
 800cf40:	0800d98b 	.word	0x0800d98b

0800cf44 <L_shift>:
 800cf44:	f1c2 0208 	rsb	r2, r2, #8
 800cf48:	0092      	lsls	r2, r2, #2
 800cf4a:	b570      	push	{r4, r5, r6, lr}
 800cf4c:	f1c2 0620 	rsb	r6, r2, #32
 800cf50:	6843      	ldr	r3, [r0, #4]
 800cf52:	6804      	ldr	r4, [r0, #0]
 800cf54:	fa03 f506 	lsl.w	r5, r3, r6
 800cf58:	432c      	orrs	r4, r5
 800cf5a:	40d3      	lsrs	r3, r2
 800cf5c:	6004      	str	r4, [r0, #0]
 800cf5e:	f840 3f04 	str.w	r3, [r0, #4]!
 800cf62:	4288      	cmp	r0, r1
 800cf64:	d3f4      	bcc.n	800cf50 <L_shift+0xc>
 800cf66:	bd70      	pop	{r4, r5, r6, pc}

0800cf68 <__match>:
 800cf68:	b530      	push	{r4, r5, lr}
 800cf6a:	6803      	ldr	r3, [r0, #0]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf72:	b914      	cbnz	r4, 800cf7a <__match+0x12>
 800cf74:	6003      	str	r3, [r0, #0]
 800cf76:	2001      	movs	r0, #1
 800cf78:	bd30      	pop	{r4, r5, pc}
 800cf7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cf82:	2d19      	cmp	r5, #25
 800cf84:	bf98      	it	ls
 800cf86:	3220      	addls	r2, #32
 800cf88:	42a2      	cmp	r2, r4
 800cf8a:	d0f0      	beq.n	800cf6e <__match+0x6>
 800cf8c:	2000      	movs	r0, #0
 800cf8e:	e7f3      	b.n	800cf78 <__match+0x10>

0800cf90 <__hexnan>:
 800cf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf94:	680b      	ldr	r3, [r1, #0]
 800cf96:	6801      	ldr	r1, [r0, #0]
 800cf98:	115e      	asrs	r6, r3, #5
 800cf9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cf9e:	f013 031f 	ands.w	r3, r3, #31
 800cfa2:	b087      	sub	sp, #28
 800cfa4:	bf18      	it	ne
 800cfa6:	3604      	addne	r6, #4
 800cfa8:	2500      	movs	r5, #0
 800cfaa:	1f37      	subs	r7, r6, #4
 800cfac:	4682      	mov	sl, r0
 800cfae:	4690      	mov	r8, r2
 800cfb0:	9301      	str	r3, [sp, #4]
 800cfb2:	f846 5c04 	str.w	r5, [r6, #-4]
 800cfb6:	46b9      	mov	r9, r7
 800cfb8:	463c      	mov	r4, r7
 800cfba:	9502      	str	r5, [sp, #8]
 800cfbc:	46ab      	mov	fp, r5
 800cfbe:	784a      	ldrb	r2, [r1, #1]
 800cfc0:	1c4b      	adds	r3, r1, #1
 800cfc2:	9303      	str	r3, [sp, #12]
 800cfc4:	b342      	cbz	r2, 800d018 <__hexnan+0x88>
 800cfc6:	4610      	mov	r0, r2
 800cfc8:	9105      	str	r1, [sp, #20]
 800cfca:	9204      	str	r2, [sp, #16]
 800cfcc:	f7ff fd76 	bl	800cabc <__hexdig_fun>
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	d14f      	bne.n	800d074 <__hexnan+0xe4>
 800cfd4:	9a04      	ldr	r2, [sp, #16]
 800cfd6:	9905      	ldr	r1, [sp, #20]
 800cfd8:	2a20      	cmp	r2, #32
 800cfda:	d818      	bhi.n	800d00e <__hexnan+0x7e>
 800cfdc:	9b02      	ldr	r3, [sp, #8]
 800cfde:	459b      	cmp	fp, r3
 800cfe0:	dd13      	ble.n	800d00a <__hexnan+0x7a>
 800cfe2:	454c      	cmp	r4, r9
 800cfe4:	d206      	bcs.n	800cff4 <__hexnan+0x64>
 800cfe6:	2d07      	cmp	r5, #7
 800cfe8:	dc04      	bgt.n	800cff4 <__hexnan+0x64>
 800cfea:	462a      	mov	r2, r5
 800cfec:	4649      	mov	r1, r9
 800cfee:	4620      	mov	r0, r4
 800cff0:	f7ff ffa8 	bl	800cf44 <L_shift>
 800cff4:	4544      	cmp	r4, r8
 800cff6:	d950      	bls.n	800d09a <__hexnan+0x10a>
 800cff8:	2300      	movs	r3, #0
 800cffa:	f1a4 0904 	sub.w	r9, r4, #4
 800cffe:	f844 3c04 	str.w	r3, [r4, #-4]
 800d002:	f8cd b008 	str.w	fp, [sp, #8]
 800d006:	464c      	mov	r4, r9
 800d008:	461d      	mov	r5, r3
 800d00a:	9903      	ldr	r1, [sp, #12]
 800d00c:	e7d7      	b.n	800cfbe <__hexnan+0x2e>
 800d00e:	2a29      	cmp	r2, #41	; 0x29
 800d010:	d155      	bne.n	800d0be <__hexnan+0x12e>
 800d012:	3102      	adds	r1, #2
 800d014:	f8ca 1000 	str.w	r1, [sl]
 800d018:	f1bb 0f00 	cmp.w	fp, #0
 800d01c:	d04f      	beq.n	800d0be <__hexnan+0x12e>
 800d01e:	454c      	cmp	r4, r9
 800d020:	d206      	bcs.n	800d030 <__hexnan+0xa0>
 800d022:	2d07      	cmp	r5, #7
 800d024:	dc04      	bgt.n	800d030 <__hexnan+0xa0>
 800d026:	462a      	mov	r2, r5
 800d028:	4649      	mov	r1, r9
 800d02a:	4620      	mov	r0, r4
 800d02c:	f7ff ff8a 	bl	800cf44 <L_shift>
 800d030:	4544      	cmp	r4, r8
 800d032:	d934      	bls.n	800d09e <__hexnan+0x10e>
 800d034:	f1a8 0204 	sub.w	r2, r8, #4
 800d038:	4623      	mov	r3, r4
 800d03a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d03e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d042:	429f      	cmp	r7, r3
 800d044:	d2f9      	bcs.n	800d03a <__hexnan+0xaa>
 800d046:	1b3b      	subs	r3, r7, r4
 800d048:	f023 0303 	bic.w	r3, r3, #3
 800d04c:	3304      	adds	r3, #4
 800d04e:	3e03      	subs	r6, #3
 800d050:	3401      	adds	r4, #1
 800d052:	42a6      	cmp	r6, r4
 800d054:	bf38      	it	cc
 800d056:	2304      	movcc	r3, #4
 800d058:	4443      	add	r3, r8
 800d05a:	2200      	movs	r2, #0
 800d05c:	f843 2b04 	str.w	r2, [r3], #4
 800d060:	429f      	cmp	r7, r3
 800d062:	d2fb      	bcs.n	800d05c <__hexnan+0xcc>
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	b91b      	cbnz	r3, 800d070 <__hexnan+0xe0>
 800d068:	4547      	cmp	r7, r8
 800d06a:	d126      	bne.n	800d0ba <__hexnan+0x12a>
 800d06c:	2301      	movs	r3, #1
 800d06e:	603b      	str	r3, [r7, #0]
 800d070:	2005      	movs	r0, #5
 800d072:	e025      	b.n	800d0c0 <__hexnan+0x130>
 800d074:	3501      	adds	r5, #1
 800d076:	2d08      	cmp	r5, #8
 800d078:	f10b 0b01 	add.w	fp, fp, #1
 800d07c:	dd06      	ble.n	800d08c <__hexnan+0xfc>
 800d07e:	4544      	cmp	r4, r8
 800d080:	d9c3      	bls.n	800d00a <__hexnan+0x7a>
 800d082:	2300      	movs	r3, #0
 800d084:	f844 3c04 	str.w	r3, [r4, #-4]
 800d088:	2501      	movs	r5, #1
 800d08a:	3c04      	subs	r4, #4
 800d08c:	6822      	ldr	r2, [r4, #0]
 800d08e:	f000 000f 	and.w	r0, r0, #15
 800d092:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d096:	6020      	str	r0, [r4, #0]
 800d098:	e7b7      	b.n	800d00a <__hexnan+0x7a>
 800d09a:	2508      	movs	r5, #8
 800d09c:	e7b5      	b.n	800d00a <__hexnan+0x7a>
 800d09e:	9b01      	ldr	r3, [sp, #4]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d0df      	beq.n	800d064 <__hexnan+0xd4>
 800d0a4:	f1c3 0320 	rsb	r3, r3, #32
 800d0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ac:	40da      	lsrs	r2, r3
 800d0ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d0b2:	4013      	ands	r3, r2
 800d0b4:	f846 3c04 	str.w	r3, [r6, #-4]
 800d0b8:	e7d4      	b.n	800d064 <__hexnan+0xd4>
 800d0ba:	3f04      	subs	r7, #4
 800d0bc:	e7d2      	b.n	800d064 <__hexnan+0xd4>
 800d0be:	2004      	movs	r0, #4
 800d0c0:	b007      	add	sp, #28
 800d0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d0c6 <__ascii_mbtowc>:
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	b901      	cbnz	r1, 800d0cc <__ascii_mbtowc+0x6>
 800d0ca:	a901      	add	r1, sp, #4
 800d0cc:	b142      	cbz	r2, 800d0e0 <__ascii_mbtowc+0x1a>
 800d0ce:	b14b      	cbz	r3, 800d0e4 <__ascii_mbtowc+0x1e>
 800d0d0:	7813      	ldrb	r3, [r2, #0]
 800d0d2:	600b      	str	r3, [r1, #0]
 800d0d4:	7812      	ldrb	r2, [r2, #0]
 800d0d6:	1e10      	subs	r0, r2, #0
 800d0d8:	bf18      	it	ne
 800d0da:	2001      	movne	r0, #1
 800d0dc:	b002      	add	sp, #8
 800d0de:	4770      	bx	lr
 800d0e0:	4610      	mov	r0, r2
 800d0e2:	e7fb      	b.n	800d0dc <__ascii_mbtowc+0x16>
 800d0e4:	f06f 0001 	mvn.w	r0, #1
 800d0e8:	e7f8      	b.n	800d0dc <__ascii_mbtowc+0x16>

0800d0ea <_realloc_r>:
 800d0ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ee:	4680      	mov	r8, r0
 800d0f0:	4614      	mov	r4, r2
 800d0f2:	460e      	mov	r6, r1
 800d0f4:	b921      	cbnz	r1, 800d100 <_realloc_r+0x16>
 800d0f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0fa:	4611      	mov	r1, r2
 800d0fc:	f7fd baaa 	b.w	800a654 <_malloc_r>
 800d100:	b92a      	cbnz	r2, 800d10e <_realloc_r+0x24>
 800d102:	f7fd fa33 	bl	800a56c <_free_r>
 800d106:	4625      	mov	r5, r4
 800d108:	4628      	mov	r0, r5
 800d10a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d10e:	f000 f8b6 	bl	800d27e <_malloc_usable_size_r>
 800d112:	4284      	cmp	r4, r0
 800d114:	4607      	mov	r7, r0
 800d116:	d802      	bhi.n	800d11e <_realloc_r+0x34>
 800d118:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d11c:	d812      	bhi.n	800d144 <_realloc_r+0x5a>
 800d11e:	4621      	mov	r1, r4
 800d120:	4640      	mov	r0, r8
 800d122:	f7fd fa97 	bl	800a654 <_malloc_r>
 800d126:	4605      	mov	r5, r0
 800d128:	2800      	cmp	r0, #0
 800d12a:	d0ed      	beq.n	800d108 <_realloc_r+0x1e>
 800d12c:	42bc      	cmp	r4, r7
 800d12e:	4622      	mov	r2, r4
 800d130:	4631      	mov	r1, r6
 800d132:	bf28      	it	cs
 800d134:	463a      	movcs	r2, r7
 800d136:	f7fc fb8a 	bl	800984e <memcpy>
 800d13a:	4631      	mov	r1, r6
 800d13c:	4640      	mov	r0, r8
 800d13e:	f7fd fa15 	bl	800a56c <_free_r>
 800d142:	e7e1      	b.n	800d108 <_realloc_r+0x1e>
 800d144:	4635      	mov	r5, r6
 800d146:	e7df      	b.n	800d108 <_realloc_r+0x1e>

0800d148 <_strtoul_l.constprop.0>:
 800d148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d14c:	4f36      	ldr	r7, [pc, #216]	; (800d228 <_strtoul_l.constprop.0+0xe0>)
 800d14e:	4686      	mov	lr, r0
 800d150:	460d      	mov	r5, r1
 800d152:	4628      	mov	r0, r5
 800d154:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d158:	5d3e      	ldrb	r6, [r7, r4]
 800d15a:	f016 0608 	ands.w	r6, r6, #8
 800d15e:	d1f8      	bne.n	800d152 <_strtoul_l.constprop.0+0xa>
 800d160:	2c2d      	cmp	r4, #45	; 0x2d
 800d162:	d130      	bne.n	800d1c6 <_strtoul_l.constprop.0+0x7e>
 800d164:	782c      	ldrb	r4, [r5, #0]
 800d166:	2601      	movs	r6, #1
 800d168:	1c85      	adds	r5, r0, #2
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d057      	beq.n	800d21e <_strtoul_l.constprop.0+0xd6>
 800d16e:	2b10      	cmp	r3, #16
 800d170:	d109      	bne.n	800d186 <_strtoul_l.constprop.0+0x3e>
 800d172:	2c30      	cmp	r4, #48	; 0x30
 800d174:	d107      	bne.n	800d186 <_strtoul_l.constprop.0+0x3e>
 800d176:	7828      	ldrb	r0, [r5, #0]
 800d178:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d17c:	2858      	cmp	r0, #88	; 0x58
 800d17e:	d149      	bne.n	800d214 <_strtoul_l.constprop.0+0xcc>
 800d180:	786c      	ldrb	r4, [r5, #1]
 800d182:	2310      	movs	r3, #16
 800d184:	3502      	adds	r5, #2
 800d186:	f04f 38ff 	mov.w	r8, #4294967295
 800d18a:	2700      	movs	r7, #0
 800d18c:	fbb8 f8f3 	udiv	r8, r8, r3
 800d190:	fb03 f908 	mul.w	r9, r3, r8
 800d194:	ea6f 0909 	mvn.w	r9, r9
 800d198:	4638      	mov	r0, r7
 800d19a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d19e:	f1bc 0f09 	cmp.w	ip, #9
 800d1a2:	d815      	bhi.n	800d1d0 <_strtoul_l.constprop.0+0x88>
 800d1a4:	4664      	mov	r4, ip
 800d1a6:	42a3      	cmp	r3, r4
 800d1a8:	dd23      	ble.n	800d1f2 <_strtoul_l.constprop.0+0xaa>
 800d1aa:	f1b7 3fff 	cmp.w	r7, #4294967295
 800d1ae:	d007      	beq.n	800d1c0 <_strtoul_l.constprop.0+0x78>
 800d1b0:	4580      	cmp	r8, r0
 800d1b2:	d31b      	bcc.n	800d1ec <_strtoul_l.constprop.0+0xa4>
 800d1b4:	d101      	bne.n	800d1ba <_strtoul_l.constprop.0+0x72>
 800d1b6:	45a1      	cmp	r9, r4
 800d1b8:	db18      	blt.n	800d1ec <_strtoul_l.constprop.0+0xa4>
 800d1ba:	fb00 4003 	mla	r0, r0, r3, r4
 800d1be:	2701      	movs	r7, #1
 800d1c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d1c4:	e7e9      	b.n	800d19a <_strtoul_l.constprop.0+0x52>
 800d1c6:	2c2b      	cmp	r4, #43	; 0x2b
 800d1c8:	bf04      	itt	eq
 800d1ca:	782c      	ldrbeq	r4, [r5, #0]
 800d1cc:	1c85      	addeq	r5, r0, #2
 800d1ce:	e7cc      	b.n	800d16a <_strtoul_l.constprop.0+0x22>
 800d1d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d1d4:	f1bc 0f19 	cmp.w	ip, #25
 800d1d8:	d801      	bhi.n	800d1de <_strtoul_l.constprop.0+0x96>
 800d1da:	3c37      	subs	r4, #55	; 0x37
 800d1dc:	e7e3      	b.n	800d1a6 <_strtoul_l.constprop.0+0x5e>
 800d1de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d1e2:	f1bc 0f19 	cmp.w	ip, #25
 800d1e6:	d804      	bhi.n	800d1f2 <_strtoul_l.constprop.0+0xaa>
 800d1e8:	3c57      	subs	r4, #87	; 0x57
 800d1ea:	e7dc      	b.n	800d1a6 <_strtoul_l.constprop.0+0x5e>
 800d1ec:	f04f 37ff 	mov.w	r7, #4294967295
 800d1f0:	e7e6      	b.n	800d1c0 <_strtoul_l.constprop.0+0x78>
 800d1f2:	1c7b      	adds	r3, r7, #1
 800d1f4:	d106      	bne.n	800d204 <_strtoul_l.constprop.0+0xbc>
 800d1f6:	2322      	movs	r3, #34	; 0x22
 800d1f8:	f8ce 3000 	str.w	r3, [lr]
 800d1fc:	4638      	mov	r0, r7
 800d1fe:	b932      	cbnz	r2, 800d20e <_strtoul_l.constprop.0+0xc6>
 800d200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d204:	b106      	cbz	r6, 800d208 <_strtoul_l.constprop.0+0xc0>
 800d206:	4240      	negs	r0, r0
 800d208:	2a00      	cmp	r2, #0
 800d20a:	d0f9      	beq.n	800d200 <_strtoul_l.constprop.0+0xb8>
 800d20c:	b107      	cbz	r7, 800d210 <_strtoul_l.constprop.0+0xc8>
 800d20e:	1e69      	subs	r1, r5, #1
 800d210:	6011      	str	r1, [r2, #0]
 800d212:	e7f5      	b.n	800d200 <_strtoul_l.constprop.0+0xb8>
 800d214:	2430      	movs	r4, #48	; 0x30
 800d216:	2b00      	cmp	r3, #0
 800d218:	d1b5      	bne.n	800d186 <_strtoul_l.constprop.0+0x3e>
 800d21a:	2308      	movs	r3, #8
 800d21c:	e7b3      	b.n	800d186 <_strtoul_l.constprop.0+0x3e>
 800d21e:	2c30      	cmp	r4, #48	; 0x30
 800d220:	d0a9      	beq.n	800d176 <_strtoul_l.constprop.0+0x2e>
 800d222:	230a      	movs	r3, #10
 800d224:	e7af      	b.n	800d186 <_strtoul_l.constprop.0+0x3e>
 800d226:	bf00      	nop
 800d228:	0800db49 	.word	0x0800db49

0800d22c <_strtoul_r>:
 800d22c:	f7ff bf8c 	b.w	800d148 <_strtoul_l.constprop.0>

0800d230 <__ascii_wctomb>:
 800d230:	b149      	cbz	r1, 800d246 <__ascii_wctomb+0x16>
 800d232:	2aff      	cmp	r2, #255	; 0xff
 800d234:	bf85      	ittet	hi
 800d236:	238a      	movhi	r3, #138	; 0x8a
 800d238:	6003      	strhi	r3, [r0, #0]
 800d23a:	700a      	strbls	r2, [r1, #0]
 800d23c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d240:	bf98      	it	ls
 800d242:	2001      	movls	r0, #1
 800d244:	4770      	bx	lr
 800d246:	4608      	mov	r0, r1
 800d248:	4770      	bx	lr
	...

0800d24c <fiprintf>:
 800d24c:	b40e      	push	{r1, r2, r3}
 800d24e:	b503      	push	{r0, r1, lr}
 800d250:	4601      	mov	r1, r0
 800d252:	ab03      	add	r3, sp, #12
 800d254:	4805      	ldr	r0, [pc, #20]	; (800d26c <fiprintf+0x20>)
 800d256:	f853 2b04 	ldr.w	r2, [r3], #4
 800d25a:	6800      	ldr	r0, [r0, #0]
 800d25c:	9301      	str	r3, [sp, #4]
 800d25e:	f000 f83f 	bl	800d2e0 <_vfiprintf_r>
 800d262:	b002      	add	sp, #8
 800d264:	f85d eb04 	ldr.w	lr, [sp], #4
 800d268:	b003      	add	sp, #12
 800d26a:	4770      	bx	lr
 800d26c:	20000078 	.word	0x20000078

0800d270 <abort>:
 800d270:	b508      	push	{r3, lr}
 800d272:	2006      	movs	r0, #6
 800d274:	f000 fa0c 	bl	800d690 <raise>
 800d278:	2001      	movs	r0, #1
 800d27a:	f7f5 fd15 	bl	8002ca8 <_exit>

0800d27e <_malloc_usable_size_r>:
 800d27e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d282:	1f18      	subs	r0, r3, #4
 800d284:	2b00      	cmp	r3, #0
 800d286:	bfbc      	itt	lt
 800d288:	580b      	ldrlt	r3, [r1, r0]
 800d28a:	18c0      	addlt	r0, r0, r3
 800d28c:	4770      	bx	lr

0800d28e <__sfputc_r>:
 800d28e:	6893      	ldr	r3, [r2, #8]
 800d290:	3b01      	subs	r3, #1
 800d292:	2b00      	cmp	r3, #0
 800d294:	b410      	push	{r4}
 800d296:	6093      	str	r3, [r2, #8]
 800d298:	da08      	bge.n	800d2ac <__sfputc_r+0x1e>
 800d29a:	6994      	ldr	r4, [r2, #24]
 800d29c:	42a3      	cmp	r3, r4
 800d29e:	db01      	blt.n	800d2a4 <__sfputc_r+0x16>
 800d2a0:	290a      	cmp	r1, #10
 800d2a2:	d103      	bne.n	800d2ac <__sfputc_r+0x1e>
 800d2a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2a8:	f000 b934 	b.w	800d514 <__swbuf_r>
 800d2ac:	6813      	ldr	r3, [r2, #0]
 800d2ae:	1c58      	adds	r0, r3, #1
 800d2b0:	6010      	str	r0, [r2, #0]
 800d2b2:	7019      	strb	r1, [r3, #0]
 800d2b4:	4608      	mov	r0, r1
 800d2b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2ba:	4770      	bx	lr

0800d2bc <__sfputs_r>:
 800d2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2be:	4606      	mov	r6, r0
 800d2c0:	460f      	mov	r7, r1
 800d2c2:	4614      	mov	r4, r2
 800d2c4:	18d5      	adds	r5, r2, r3
 800d2c6:	42ac      	cmp	r4, r5
 800d2c8:	d101      	bne.n	800d2ce <__sfputs_r+0x12>
 800d2ca:	2000      	movs	r0, #0
 800d2cc:	e007      	b.n	800d2de <__sfputs_r+0x22>
 800d2ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2d2:	463a      	mov	r2, r7
 800d2d4:	4630      	mov	r0, r6
 800d2d6:	f7ff ffda 	bl	800d28e <__sfputc_r>
 800d2da:	1c43      	adds	r3, r0, #1
 800d2dc:	d1f3      	bne.n	800d2c6 <__sfputs_r+0xa>
 800d2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d2e0 <_vfiprintf_r>:
 800d2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e4:	460d      	mov	r5, r1
 800d2e6:	b09d      	sub	sp, #116	; 0x74
 800d2e8:	4614      	mov	r4, r2
 800d2ea:	4698      	mov	r8, r3
 800d2ec:	4606      	mov	r6, r0
 800d2ee:	b118      	cbz	r0, 800d2f8 <_vfiprintf_r+0x18>
 800d2f0:	6a03      	ldr	r3, [r0, #32]
 800d2f2:	b90b      	cbnz	r3, 800d2f8 <_vfiprintf_r+0x18>
 800d2f4:	f7fc f964 	bl	80095c0 <__sinit>
 800d2f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2fa:	07d9      	lsls	r1, r3, #31
 800d2fc:	d405      	bmi.n	800d30a <_vfiprintf_r+0x2a>
 800d2fe:	89ab      	ldrh	r3, [r5, #12]
 800d300:	059a      	lsls	r2, r3, #22
 800d302:	d402      	bmi.n	800d30a <_vfiprintf_r+0x2a>
 800d304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d306:	f7fc faa0 	bl	800984a <__retarget_lock_acquire_recursive>
 800d30a:	89ab      	ldrh	r3, [r5, #12]
 800d30c:	071b      	lsls	r3, r3, #28
 800d30e:	d501      	bpl.n	800d314 <_vfiprintf_r+0x34>
 800d310:	692b      	ldr	r3, [r5, #16]
 800d312:	b99b      	cbnz	r3, 800d33c <_vfiprintf_r+0x5c>
 800d314:	4629      	mov	r1, r5
 800d316:	4630      	mov	r0, r6
 800d318:	f000 f93a 	bl	800d590 <__swsetup_r>
 800d31c:	b170      	cbz	r0, 800d33c <_vfiprintf_r+0x5c>
 800d31e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d320:	07dc      	lsls	r4, r3, #31
 800d322:	d504      	bpl.n	800d32e <_vfiprintf_r+0x4e>
 800d324:	f04f 30ff 	mov.w	r0, #4294967295
 800d328:	b01d      	add	sp, #116	; 0x74
 800d32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d32e:	89ab      	ldrh	r3, [r5, #12]
 800d330:	0598      	lsls	r0, r3, #22
 800d332:	d4f7      	bmi.n	800d324 <_vfiprintf_r+0x44>
 800d334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d336:	f7fc fa89 	bl	800984c <__retarget_lock_release_recursive>
 800d33a:	e7f3      	b.n	800d324 <_vfiprintf_r+0x44>
 800d33c:	2300      	movs	r3, #0
 800d33e:	9309      	str	r3, [sp, #36]	; 0x24
 800d340:	2320      	movs	r3, #32
 800d342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d346:	f8cd 800c 	str.w	r8, [sp, #12]
 800d34a:	2330      	movs	r3, #48	; 0x30
 800d34c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d500 <_vfiprintf_r+0x220>
 800d350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d354:	f04f 0901 	mov.w	r9, #1
 800d358:	4623      	mov	r3, r4
 800d35a:	469a      	mov	sl, r3
 800d35c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d360:	b10a      	cbz	r2, 800d366 <_vfiprintf_r+0x86>
 800d362:	2a25      	cmp	r2, #37	; 0x25
 800d364:	d1f9      	bne.n	800d35a <_vfiprintf_r+0x7a>
 800d366:	ebba 0b04 	subs.w	fp, sl, r4
 800d36a:	d00b      	beq.n	800d384 <_vfiprintf_r+0xa4>
 800d36c:	465b      	mov	r3, fp
 800d36e:	4622      	mov	r2, r4
 800d370:	4629      	mov	r1, r5
 800d372:	4630      	mov	r0, r6
 800d374:	f7ff ffa2 	bl	800d2bc <__sfputs_r>
 800d378:	3001      	adds	r0, #1
 800d37a:	f000 80a9 	beq.w	800d4d0 <_vfiprintf_r+0x1f0>
 800d37e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d380:	445a      	add	r2, fp
 800d382:	9209      	str	r2, [sp, #36]	; 0x24
 800d384:	f89a 3000 	ldrb.w	r3, [sl]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	f000 80a1 	beq.w	800d4d0 <_vfiprintf_r+0x1f0>
 800d38e:	2300      	movs	r3, #0
 800d390:	f04f 32ff 	mov.w	r2, #4294967295
 800d394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d398:	f10a 0a01 	add.w	sl, sl, #1
 800d39c:	9304      	str	r3, [sp, #16]
 800d39e:	9307      	str	r3, [sp, #28]
 800d3a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3a4:	931a      	str	r3, [sp, #104]	; 0x68
 800d3a6:	4654      	mov	r4, sl
 800d3a8:	2205      	movs	r2, #5
 800d3aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3ae:	4854      	ldr	r0, [pc, #336]	; (800d500 <_vfiprintf_r+0x220>)
 800d3b0:	f7f2 ff2e 	bl	8000210 <memchr>
 800d3b4:	9a04      	ldr	r2, [sp, #16]
 800d3b6:	b9d8      	cbnz	r0, 800d3f0 <_vfiprintf_r+0x110>
 800d3b8:	06d1      	lsls	r1, r2, #27
 800d3ba:	bf44      	itt	mi
 800d3bc:	2320      	movmi	r3, #32
 800d3be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3c2:	0713      	lsls	r3, r2, #28
 800d3c4:	bf44      	itt	mi
 800d3c6:	232b      	movmi	r3, #43	; 0x2b
 800d3c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d3d0:	2b2a      	cmp	r3, #42	; 0x2a
 800d3d2:	d015      	beq.n	800d400 <_vfiprintf_r+0x120>
 800d3d4:	9a07      	ldr	r2, [sp, #28]
 800d3d6:	4654      	mov	r4, sl
 800d3d8:	2000      	movs	r0, #0
 800d3da:	f04f 0c0a 	mov.w	ip, #10
 800d3de:	4621      	mov	r1, r4
 800d3e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3e4:	3b30      	subs	r3, #48	; 0x30
 800d3e6:	2b09      	cmp	r3, #9
 800d3e8:	d94d      	bls.n	800d486 <_vfiprintf_r+0x1a6>
 800d3ea:	b1b0      	cbz	r0, 800d41a <_vfiprintf_r+0x13a>
 800d3ec:	9207      	str	r2, [sp, #28]
 800d3ee:	e014      	b.n	800d41a <_vfiprintf_r+0x13a>
 800d3f0:	eba0 0308 	sub.w	r3, r0, r8
 800d3f4:	fa09 f303 	lsl.w	r3, r9, r3
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	9304      	str	r3, [sp, #16]
 800d3fc:	46a2      	mov	sl, r4
 800d3fe:	e7d2      	b.n	800d3a6 <_vfiprintf_r+0xc6>
 800d400:	9b03      	ldr	r3, [sp, #12]
 800d402:	1d19      	adds	r1, r3, #4
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	9103      	str	r1, [sp, #12]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	bfbb      	ittet	lt
 800d40c:	425b      	neglt	r3, r3
 800d40e:	f042 0202 	orrlt.w	r2, r2, #2
 800d412:	9307      	strge	r3, [sp, #28]
 800d414:	9307      	strlt	r3, [sp, #28]
 800d416:	bfb8      	it	lt
 800d418:	9204      	strlt	r2, [sp, #16]
 800d41a:	7823      	ldrb	r3, [r4, #0]
 800d41c:	2b2e      	cmp	r3, #46	; 0x2e
 800d41e:	d10c      	bne.n	800d43a <_vfiprintf_r+0x15a>
 800d420:	7863      	ldrb	r3, [r4, #1]
 800d422:	2b2a      	cmp	r3, #42	; 0x2a
 800d424:	d134      	bne.n	800d490 <_vfiprintf_r+0x1b0>
 800d426:	9b03      	ldr	r3, [sp, #12]
 800d428:	1d1a      	adds	r2, r3, #4
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	9203      	str	r2, [sp, #12]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	bfb8      	it	lt
 800d432:	f04f 33ff 	movlt.w	r3, #4294967295
 800d436:	3402      	adds	r4, #2
 800d438:	9305      	str	r3, [sp, #20]
 800d43a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d510 <_vfiprintf_r+0x230>
 800d43e:	7821      	ldrb	r1, [r4, #0]
 800d440:	2203      	movs	r2, #3
 800d442:	4650      	mov	r0, sl
 800d444:	f7f2 fee4 	bl	8000210 <memchr>
 800d448:	b138      	cbz	r0, 800d45a <_vfiprintf_r+0x17a>
 800d44a:	9b04      	ldr	r3, [sp, #16]
 800d44c:	eba0 000a 	sub.w	r0, r0, sl
 800d450:	2240      	movs	r2, #64	; 0x40
 800d452:	4082      	lsls	r2, r0
 800d454:	4313      	orrs	r3, r2
 800d456:	3401      	adds	r4, #1
 800d458:	9304      	str	r3, [sp, #16]
 800d45a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d45e:	4829      	ldr	r0, [pc, #164]	; (800d504 <_vfiprintf_r+0x224>)
 800d460:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d464:	2206      	movs	r2, #6
 800d466:	f7f2 fed3 	bl	8000210 <memchr>
 800d46a:	2800      	cmp	r0, #0
 800d46c:	d03f      	beq.n	800d4ee <_vfiprintf_r+0x20e>
 800d46e:	4b26      	ldr	r3, [pc, #152]	; (800d508 <_vfiprintf_r+0x228>)
 800d470:	bb1b      	cbnz	r3, 800d4ba <_vfiprintf_r+0x1da>
 800d472:	9b03      	ldr	r3, [sp, #12]
 800d474:	3307      	adds	r3, #7
 800d476:	f023 0307 	bic.w	r3, r3, #7
 800d47a:	3308      	adds	r3, #8
 800d47c:	9303      	str	r3, [sp, #12]
 800d47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d480:	443b      	add	r3, r7
 800d482:	9309      	str	r3, [sp, #36]	; 0x24
 800d484:	e768      	b.n	800d358 <_vfiprintf_r+0x78>
 800d486:	fb0c 3202 	mla	r2, ip, r2, r3
 800d48a:	460c      	mov	r4, r1
 800d48c:	2001      	movs	r0, #1
 800d48e:	e7a6      	b.n	800d3de <_vfiprintf_r+0xfe>
 800d490:	2300      	movs	r3, #0
 800d492:	3401      	adds	r4, #1
 800d494:	9305      	str	r3, [sp, #20]
 800d496:	4619      	mov	r1, r3
 800d498:	f04f 0c0a 	mov.w	ip, #10
 800d49c:	4620      	mov	r0, r4
 800d49e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4a2:	3a30      	subs	r2, #48	; 0x30
 800d4a4:	2a09      	cmp	r2, #9
 800d4a6:	d903      	bls.n	800d4b0 <_vfiprintf_r+0x1d0>
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d0c6      	beq.n	800d43a <_vfiprintf_r+0x15a>
 800d4ac:	9105      	str	r1, [sp, #20]
 800d4ae:	e7c4      	b.n	800d43a <_vfiprintf_r+0x15a>
 800d4b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4b4:	4604      	mov	r4, r0
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	e7f0      	b.n	800d49c <_vfiprintf_r+0x1bc>
 800d4ba:	ab03      	add	r3, sp, #12
 800d4bc:	9300      	str	r3, [sp, #0]
 800d4be:	462a      	mov	r2, r5
 800d4c0:	4b12      	ldr	r3, [pc, #72]	; (800d50c <_vfiprintf_r+0x22c>)
 800d4c2:	a904      	add	r1, sp, #16
 800d4c4:	4630      	mov	r0, r6
 800d4c6:	f7fb fa19 	bl	80088fc <_printf_float>
 800d4ca:	4607      	mov	r7, r0
 800d4cc:	1c78      	adds	r0, r7, #1
 800d4ce:	d1d6      	bne.n	800d47e <_vfiprintf_r+0x19e>
 800d4d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4d2:	07d9      	lsls	r1, r3, #31
 800d4d4:	d405      	bmi.n	800d4e2 <_vfiprintf_r+0x202>
 800d4d6:	89ab      	ldrh	r3, [r5, #12]
 800d4d8:	059a      	lsls	r2, r3, #22
 800d4da:	d402      	bmi.n	800d4e2 <_vfiprintf_r+0x202>
 800d4dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4de:	f7fc f9b5 	bl	800984c <__retarget_lock_release_recursive>
 800d4e2:	89ab      	ldrh	r3, [r5, #12]
 800d4e4:	065b      	lsls	r3, r3, #25
 800d4e6:	f53f af1d 	bmi.w	800d324 <_vfiprintf_r+0x44>
 800d4ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4ec:	e71c      	b.n	800d328 <_vfiprintf_r+0x48>
 800d4ee:	ab03      	add	r3, sp, #12
 800d4f0:	9300      	str	r3, [sp, #0]
 800d4f2:	462a      	mov	r2, r5
 800d4f4:	4b05      	ldr	r3, [pc, #20]	; (800d50c <_vfiprintf_r+0x22c>)
 800d4f6:	a904      	add	r1, sp, #16
 800d4f8:	4630      	mov	r0, r6
 800d4fa:	f7fb fca3 	bl	8008e44 <_printf_i>
 800d4fe:	e7e4      	b.n	800d4ca <_vfiprintf_r+0x1ea>
 800d500:	0800dc49 	.word	0x0800dc49
 800d504:	0800dc53 	.word	0x0800dc53
 800d508:	080088fd 	.word	0x080088fd
 800d50c:	0800d2bd 	.word	0x0800d2bd
 800d510:	0800dc4f 	.word	0x0800dc4f

0800d514 <__swbuf_r>:
 800d514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d516:	460e      	mov	r6, r1
 800d518:	4614      	mov	r4, r2
 800d51a:	4605      	mov	r5, r0
 800d51c:	b118      	cbz	r0, 800d526 <__swbuf_r+0x12>
 800d51e:	6a03      	ldr	r3, [r0, #32]
 800d520:	b90b      	cbnz	r3, 800d526 <__swbuf_r+0x12>
 800d522:	f7fc f84d 	bl	80095c0 <__sinit>
 800d526:	69a3      	ldr	r3, [r4, #24]
 800d528:	60a3      	str	r3, [r4, #8]
 800d52a:	89a3      	ldrh	r3, [r4, #12]
 800d52c:	071a      	lsls	r2, r3, #28
 800d52e:	d525      	bpl.n	800d57c <__swbuf_r+0x68>
 800d530:	6923      	ldr	r3, [r4, #16]
 800d532:	b31b      	cbz	r3, 800d57c <__swbuf_r+0x68>
 800d534:	6823      	ldr	r3, [r4, #0]
 800d536:	6922      	ldr	r2, [r4, #16]
 800d538:	1a98      	subs	r0, r3, r2
 800d53a:	6963      	ldr	r3, [r4, #20]
 800d53c:	b2f6      	uxtb	r6, r6
 800d53e:	4283      	cmp	r3, r0
 800d540:	4637      	mov	r7, r6
 800d542:	dc04      	bgt.n	800d54e <__swbuf_r+0x3a>
 800d544:	4621      	mov	r1, r4
 800d546:	4628      	mov	r0, r5
 800d548:	f7ff f952 	bl	800c7f0 <_fflush_r>
 800d54c:	b9e0      	cbnz	r0, 800d588 <__swbuf_r+0x74>
 800d54e:	68a3      	ldr	r3, [r4, #8]
 800d550:	3b01      	subs	r3, #1
 800d552:	60a3      	str	r3, [r4, #8]
 800d554:	6823      	ldr	r3, [r4, #0]
 800d556:	1c5a      	adds	r2, r3, #1
 800d558:	6022      	str	r2, [r4, #0]
 800d55a:	701e      	strb	r6, [r3, #0]
 800d55c:	6962      	ldr	r2, [r4, #20]
 800d55e:	1c43      	adds	r3, r0, #1
 800d560:	429a      	cmp	r2, r3
 800d562:	d004      	beq.n	800d56e <__swbuf_r+0x5a>
 800d564:	89a3      	ldrh	r3, [r4, #12]
 800d566:	07db      	lsls	r3, r3, #31
 800d568:	d506      	bpl.n	800d578 <__swbuf_r+0x64>
 800d56a:	2e0a      	cmp	r6, #10
 800d56c:	d104      	bne.n	800d578 <__swbuf_r+0x64>
 800d56e:	4621      	mov	r1, r4
 800d570:	4628      	mov	r0, r5
 800d572:	f7ff f93d 	bl	800c7f0 <_fflush_r>
 800d576:	b938      	cbnz	r0, 800d588 <__swbuf_r+0x74>
 800d578:	4638      	mov	r0, r7
 800d57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d57c:	4621      	mov	r1, r4
 800d57e:	4628      	mov	r0, r5
 800d580:	f000 f806 	bl	800d590 <__swsetup_r>
 800d584:	2800      	cmp	r0, #0
 800d586:	d0d5      	beq.n	800d534 <__swbuf_r+0x20>
 800d588:	f04f 37ff 	mov.w	r7, #4294967295
 800d58c:	e7f4      	b.n	800d578 <__swbuf_r+0x64>
	...

0800d590 <__swsetup_r>:
 800d590:	b538      	push	{r3, r4, r5, lr}
 800d592:	4b2a      	ldr	r3, [pc, #168]	; (800d63c <__swsetup_r+0xac>)
 800d594:	4605      	mov	r5, r0
 800d596:	6818      	ldr	r0, [r3, #0]
 800d598:	460c      	mov	r4, r1
 800d59a:	b118      	cbz	r0, 800d5a4 <__swsetup_r+0x14>
 800d59c:	6a03      	ldr	r3, [r0, #32]
 800d59e:	b90b      	cbnz	r3, 800d5a4 <__swsetup_r+0x14>
 800d5a0:	f7fc f80e 	bl	80095c0 <__sinit>
 800d5a4:	89a3      	ldrh	r3, [r4, #12]
 800d5a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5aa:	0718      	lsls	r0, r3, #28
 800d5ac:	d422      	bmi.n	800d5f4 <__swsetup_r+0x64>
 800d5ae:	06d9      	lsls	r1, r3, #27
 800d5b0:	d407      	bmi.n	800d5c2 <__swsetup_r+0x32>
 800d5b2:	2309      	movs	r3, #9
 800d5b4:	602b      	str	r3, [r5, #0]
 800d5b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d5ba:	81a3      	strh	r3, [r4, #12]
 800d5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c0:	e034      	b.n	800d62c <__swsetup_r+0x9c>
 800d5c2:	0758      	lsls	r0, r3, #29
 800d5c4:	d512      	bpl.n	800d5ec <__swsetup_r+0x5c>
 800d5c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5c8:	b141      	cbz	r1, 800d5dc <__swsetup_r+0x4c>
 800d5ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5ce:	4299      	cmp	r1, r3
 800d5d0:	d002      	beq.n	800d5d8 <__swsetup_r+0x48>
 800d5d2:	4628      	mov	r0, r5
 800d5d4:	f7fc ffca 	bl	800a56c <_free_r>
 800d5d8:	2300      	movs	r3, #0
 800d5da:	6363      	str	r3, [r4, #52]	; 0x34
 800d5dc:	89a3      	ldrh	r3, [r4, #12]
 800d5de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d5e2:	81a3      	strh	r3, [r4, #12]
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	6063      	str	r3, [r4, #4]
 800d5e8:	6923      	ldr	r3, [r4, #16]
 800d5ea:	6023      	str	r3, [r4, #0]
 800d5ec:	89a3      	ldrh	r3, [r4, #12]
 800d5ee:	f043 0308 	orr.w	r3, r3, #8
 800d5f2:	81a3      	strh	r3, [r4, #12]
 800d5f4:	6923      	ldr	r3, [r4, #16]
 800d5f6:	b94b      	cbnz	r3, 800d60c <__swsetup_r+0x7c>
 800d5f8:	89a3      	ldrh	r3, [r4, #12]
 800d5fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d5fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d602:	d003      	beq.n	800d60c <__swsetup_r+0x7c>
 800d604:	4621      	mov	r1, r4
 800d606:	4628      	mov	r0, r5
 800d608:	f000 f884 	bl	800d714 <__smakebuf_r>
 800d60c:	89a0      	ldrh	r0, [r4, #12]
 800d60e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d612:	f010 0301 	ands.w	r3, r0, #1
 800d616:	d00a      	beq.n	800d62e <__swsetup_r+0x9e>
 800d618:	2300      	movs	r3, #0
 800d61a:	60a3      	str	r3, [r4, #8]
 800d61c:	6963      	ldr	r3, [r4, #20]
 800d61e:	425b      	negs	r3, r3
 800d620:	61a3      	str	r3, [r4, #24]
 800d622:	6923      	ldr	r3, [r4, #16]
 800d624:	b943      	cbnz	r3, 800d638 <__swsetup_r+0xa8>
 800d626:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d62a:	d1c4      	bne.n	800d5b6 <__swsetup_r+0x26>
 800d62c:	bd38      	pop	{r3, r4, r5, pc}
 800d62e:	0781      	lsls	r1, r0, #30
 800d630:	bf58      	it	pl
 800d632:	6963      	ldrpl	r3, [r4, #20]
 800d634:	60a3      	str	r3, [r4, #8]
 800d636:	e7f4      	b.n	800d622 <__swsetup_r+0x92>
 800d638:	2000      	movs	r0, #0
 800d63a:	e7f7      	b.n	800d62c <__swsetup_r+0x9c>
 800d63c:	20000078 	.word	0x20000078

0800d640 <_raise_r>:
 800d640:	291f      	cmp	r1, #31
 800d642:	b538      	push	{r3, r4, r5, lr}
 800d644:	4604      	mov	r4, r0
 800d646:	460d      	mov	r5, r1
 800d648:	d904      	bls.n	800d654 <_raise_r+0x14>
 800d64a:	2316      	movs	r3, #22
 800d64c:	6003      	str	r3, [r0, #0]
 800d64e:	f04f 30ff 	mov.w	r0, #4294967295
 800d652:	bd38      	pop	{r3, r4, r5, pc}
 800d654:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d656:	b112      	cbz	r2, 800d65e <_raise_r+0x1e>
 800d658:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d65c:	b94b      	cbnz	r3, 800d672 <_raise_r+0x32>
 800d65e:	4620      	mov	r0, r4
 800d660:	f000 f830 	bl	800d6c4 <_getpid_r>
 800d664:	462a      	mov	r2, r5
 800d666:	4601      	mov	r1, r0
 800d668:	4620      	mov	r0, r4
 800d66a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d66e:	f000 b817 	b.w	800d6a0 <_kill_r>
 800d672:	2b01      	cmp	r3, #1
 800d674:	d00a      	beq.n	800d68c <_raise_r+0x4c>
 800d676:	1c59      	adds	r1, r3, #1
 800d678:	d103      	bne.n	800d682 <_raise_r+0x42>
 800d67a:	2316      	movs	r3, #22
 800d67c:	6003      	str	r3, [r0, #0]
 800d67e:	2001      	movs	r0, #1
 800d680:	e7e7      	b.n	800d652 <_raise_r+0x12>
 800d682:	2400      	movs	r4, #0
 800d684:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d688:	4628      	mov	r0, r5
 800d68a:	4798      	blx	r3
 800d68c:	2000      	movs	r0, #0
 800d68e:	e7e0      	b.n	800d652 <_raise_r+0x12>

0800d690 <raise>:
 800d690:	4b02      	ldr	r3, [pc, #8]	; (800d69c <raise+0xc>)
 800d692:	4601      	mov	r1, r0
 800d694:	6818      	ldr	r0, [r3, #0]
 800d696:	f7ff bfd3 	b.w	800d640 <_raise_r>
 800d69a:	bf00      	nop
 800d69c:	20000078 	.word	0x20000078

0800d6a0 <_kill_r>:
 800d6a0:	b538      	push	{r3, r4, r5, lr}
 800d6a2:	4d07      	ldr	r5, [pc, #28]	; (800d6c0 <_kill_r+0x20>)
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	4608      	mov	r0, r1
 800d6aa:	4611      	mov	r1, r2
 800d6ac:	602b      	str	r3, [r5, #0]
 800d6ae:	f7f5 faeb 	bl	8002c88 <_kill>
 800d6b2:	1c43      	adds	r3, r0, #1
 800d6b4:	d102      	bne.n	800d6bc <_kill_r+0x1c>
 800d6b6:	682b      	ldr	r3, [r5, #0]
 800d6b8:	b103      	cbz	r3, 800d6bc <_kill_r+0x1c>
 800d6ba:	6023      	str	r3, [r4, #0]
 800d6bc:	bd38      	pop	{r3, r4, r5, pc}
 800d6be:	bf00      	nop
 800d6c0:	20000d30 	.word	0x20000d30

0800d6c4 <_getpid_r>:
 800d6c4:	f7f5 bad8 	b.w	8002c78 <_getpid>

0800d6c8 <__swhatbuf_r>:
 800d6c8:	b570      	push	{r4, r5, r6, lr}
 800d6ca:	460c      	mov	r4, r1
 800d6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6d0:	2900      	cmp	r1, #0
 800d6d2:	b096      	sub	sp, #88	; 0x58
 800d6d4:	4615      	mov	r5, r2
 800d6d6:	461e      	mov	r6, r3
 800d6d8:	da0d      	bge.n	800d6f6 <__swhatbuf_r+0x2e>
 800d6da:	89a3      	ldrh	r3, [r4, #12]
 800d6dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d6e0:	f04f 0100 	mov.w	r1, #0
 800d6e4:	bf0c      	ite	eq
 800d6e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d6ea:	2340      	movne	r3, #64	; 0x40
 800d6ec:	2000      	movs	r0, #0
 800d6ee:	6031      	str	r1, [r6, #0]
 800d6f0:	602b      	str	r3, [r5, #0]
 800d6f2:	b016      	add	sp, #88	; 0x58
 800d6f4:	bd70      	pop	{r4, r5, r6, pc}
 800d6f6:	466a      	mov	r2, sp
 800d6f8:	f000 f848 	bl	800d78c <_fstat_r>
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	dbec      	blt.n	800d6da <__swhatbuf_r+0x12>
 800d700:	9901      	ldr	r1, [sp, #4]
 800d702:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d706:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d70a:	4259      	negs	r1, r3
 800d70c:	4159      	adcs	r1, r3
 800d70e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d712:	e7eb      	b.n	800d6ec <__swhatbuf_r+0x24>

0800d714 <__smakebuf_r>:
 800d714:	898b      	ldrh	r3, [r1, #12]
 800d716:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d718:	079d      	lsls	r5, r3, #30
 800d71a:	4606      	mov	r6, r0
 800d71c:	460c      	mov	r4, r1
 800d71e:	d507      	bpl.n	800d730 <__smakebuf_r+0x1c>
 800d720:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d724:	6023      	str	r3, [r4, #0]
 800d726:	6123      	str	r3, [r4, #16]
 800d728:	2301      	movs	r3, #1
 800d72a:	6163      	str	r3, [r4, #20]
 800d72c:	b002      	add	sp, #8
 800d72e:	bd70      	pop	{r4, r5, r6, pc}
 800d730:	ab01      	add	r3, sp, #4
 800d732:	466a      	mov	r2, sp
 800d734:	f7ff ffc8 	bl	800d6c8 <__swhatbuf_r>
 800d738:	9900      	ldr	r1, [sp, #0]
 800d73a:	4605      	mov	r5, r0
 800d73c:	4630      	mov	r0, r6
 800d73e:	f7fc ff89 	bl	800a654 <_malloc_r>
 800d742:	b948      	cbnz	r0, 800d758 <__smakebuf_r+0x44>
 800d744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d748:	059a      	lsls	r2, r3, #22
 800d74a:	d4ef      	bmi.n	800d72c <__smakebuf_r+0x18>
 800d74c:	f023 0303 	bic.w	r3, r3, #3
 800d750:	f043 0302 	orr.w	r3, r3, #2
 800d754:	81a3      	strh	r3, [r4, #12]
 800d756:	e7e3      	b.n	800d720 <__smakebuf_r+0xc>
 800d758:	89a3      	ldrh	r3, [r4, #12]
 800d75a:	6020      	str	r0, [r4, #0]
 800d75c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d760:	81a3      	strh	r3, [r4, #12]
 800d762:	9b00      	ldr	r3, [sp, #0]
 800d764:	6163      	str	r3, [r4, #20]
 800d766:	9b01      	ldr	r3, [sp, #4]
 800d768:	6120      	str	r0, [r4, #16]
 800d76a:	b15b      	cbz	r3, 800d784 <__smakebuf_r+0x70>
 800d76c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d770:	4630      	mov	r0, r6
 800d772:	f000 f81d 	bl	800d7b0 <_isatty_r>
 800d776:	b128      	cbz	r0, 800d784 <__smakebuf_r+0x70>
 800d778:	89a3      	ldrh	r3, [r4, #12]
 800d77a:	f023 0303 	bic.w	r3, r3, #3
 800d77e:	f043 0301 	orr.w	r3, r3, #1
 800d782:	81a3      	strh	r3, [r4, #12]
 800d784:	89a3      	ldrh	r3, [r4, #12]
 800d786:	431d      	orrs	r5, r3
 800d788:	81a5      	strh	r5, [r4, #12]
 800d78a:	e7cf      	b.n	800d72c <__smakebuf_r+0x18>

0800d78c <_fstat_r>:
 800d78c:	b538      	push	{r3, r4, r5, lr}
 800d78e:	4d07      	ldr	r5, [pc, #28]	; (800d7ac <_fstat_r+0x20>)
 800d790:	2300      	movs	r3, #0
 800d792:	4604      	mov	r4, r0
 800d794:	4608      	mov	r0, r1
 800d796:	4611      	mov	r1, r2
 800d798:	602b      	str	r3, [r5, #0]
 800d79a:	f7f5 fad4 	bl	8002d46 <_fstat>
 800d79e:	1c43      	adds	r3, r0, #1
 800d7a0:	d102      	bne.n	800d7a8 <_fstat_r+0x1c>
 800d7a2:	682b      	ldr	r3, [r5, #0]
 800d7a4:	b103      	cbz	r3, 800d7a8 <_fstat_r+0x1c>
 800d7a6:	6023      	str	r3, [r4, #0]
 800d7a8:	bd38      	pop	{r3, r4, r5, pc}
 800d7aa:	bf00      	nop
 800d7ac:	20000d30 	.word	0x20000d30

0800d7b0 <_isatty_r>:
 800d7b0:	b538      	push	{r3, r4, r5, lr}
 800d7b2:	4d06      	ldr	r5, [pc, #24]	; (800d7cc <_isatty_r+0x1c>)
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	4604      	mov	r4, r0
 800d7b8:	4608      	mov	r0, r1
 800d7ba:	602b      	str	r3, [r5, #0]
 800d7bc:	f7f5 fad3 	bl	8002d66 <_isatty>
 800d7c0:	1c43      	adds	r3, r0, #1
 800d7c2:	d102      	bne.n	800d7ca <_isatty_r+0x1a>
 800d7c4:	682b      	ldr	r3, [r5, #0]
 800d7c6:	b103      	cbz	r3, 800d7ca <_isatty_r+0x1a>
 800d7c8:	6023      	str	r3, [r4, #0]
 800d7ca:	bd38      	pop	{r3, r4, r5, pc}
 800d7cc:	20000d30 	.word	0x20000d30

0800d7d0 <_init>:
 800d7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7d2:	bf00      	nop
 800d7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7d6:	bc08      	pop	{r3}
 800d7d8:	469e      	mov	lr, r3
 800d7da:	4770      	bx	lr

0800d7dc <_fini>:
 800d7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7de:	bf00      	nop
 800d7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7e2:	bc08      	pop	{r3}
 800d7e4:	469e      	mov	lr, r3
 800d7e6:	4770      	bx	lr
