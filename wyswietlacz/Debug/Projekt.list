
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008980  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08008b50  08008b50  00018b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d60  08008d60  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  08008d60  08008d60  00018d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d68  08008d68  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d68  08008d68  00018d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d6c  08008d6c  00018d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000070  08008de0  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000110  08008e80  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000009c0  200001b0  08008f20  000201b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000b70  08008f20  00020b70  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 15 .debug_info   00017fee  00000000  00000000  00020223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002e9c  00000000  00000000  00038211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001440  00000000  00000000  0003b0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000fd0  00000000  00000000  0003c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000285e5  00000000  00000000  0003d4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00017a7a  00000000  00000000  00065aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fa2d4  00000000  00000000  0007d51f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005e8c  00000000  00000000  001777f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  0017d680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b0 	.word	0x200001b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008b38 	.word	0x08008b38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001b4 	.word	0x200001b4
 800020c:	08008b38 	.word	0x08008b38

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08e      	sub	sp, #56	; 0x38
 80005c0:	af0a      	add	r7, sp, #40	; 0x28
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	4608      	mov	r0, r1
 80005c6:	4611      	mov	r1, r2
 80005c8:	461a      	mov	r2, r3
 80005ca:	4603      	mov	r3, r0
 80005cc:	817b      	strh	r3, [r7, #10]
 80005ce:	460b      	mov	r3, r1
 80005d0:	813b      	strh	r3, [r7, #8]
 80005d2:	4613      	mov	r3, r2
 80005d4:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 80005d6:	4b1d      	ldr	r3, [pc, #116]	; (800064c <LiquidCrystal+0x90>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d019      	beq.n	8000612 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80005de:	8939      	ldrh	r1, [r7, #8]
 80005e0:	897a      	ldrh	r2, [r7, #10]
 80005e2:	2300      	movs	r3, #0
 80005e4:	9308      	str	r3, [sp, #32]
 80005e6:	2300      	movs	r3, #0
 80005e8:	9307      	str	r3, [sp, #28]
 80005ea:	2300      	movs	r3, #0
 80005ec:	9306      	str	r3, [sp, #24]
 80005ee:	2300      	movs	r3, #0
 80005f0:	9305      	str	r3, [sp, #20]
 80005f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80005f4:	9304      	str	r3, [sp, #16]
 80005f6:	8c3b      	ldrh	r3, [r7, #32]
 80005f8:	9303      	str	r3, [sp, #12]
 80005fa:	8bbb      	ldrh	r3, [r7, #28]
 80005fc:	9302      	str	r3, [sp, #8]
 80005fe:	8b3b      	ldrh	r3, [r7, #24]
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	460b      	mov	r3, r1
 8000608:	68f9      	ldr	r1, [r7, #12]
 800060a:	2001      	movs	r0, #1
 800060c:	f000 f820 	bl	8000650 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8000610:	e018      	b.n	8000644 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000612:	8939      	ldrh	r1, [r7, #8]
 8000614:	897a      	ldrh	r2, [r7, #10]
 8000616:	2300      	movs	r3, #0
 8000618:	9308      	str	r3, [sp, #32]
 800061a:	2300      	movs	r3, #0
 800061c:	9307      	str	r3, [sp, #28]
 800061e:	2300      	movs	r3, #0
 8000620:	9306      	str	r3, [sp, #24]
 8000622:	2300      	movs	r3, #0
 8000624:	9305      	str	r3, [sp, #20]
 8000626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000628:	9304      	str	r3, [sp, #16]
 800062a:	8c3b      	ldrh	r3, [r7, #32]
 800062c:	9303      	str	r3, [sp, #12]
 800062e:	8bbb      	ldrh	r3, [r7, #28]
 8000630:	9302      	str	r3, [sp, #8]
 8000632:	8b3b      	ldrh	r3, [r7, #24]
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	460b      	mov	r3, r1
 800063c:	68f9      	ldr	r1, [r7, #12]
 800063e:	2000      	movs	r0, #0
 8000640:	f000 f806 	bl	8000650 <init>
}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000000 	.word	0x20000000

08000650 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	60b9      	str	r1, [r7, #8]
 8000658:	4611      	mov	r1, r2
 800065a:	461a      	mov	r2, r3
 800065c:	4603      	mov	r3, r0
 800065e:	73fb      	strb	r3, [r7, #15]
 8000660:	460b      	mov	r3, r1
 8000662:	81bb      	strh	r3, [r7, #12]
 8000664:	4613      	mov	r3, r2
 8000666:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8000668:	4a1a      	ldr	r2, [pc, #104]	; (80006d4 <init+0x84>)
 800066a:	89bb      	ldrh	r3, [r7, #12]
 800066c:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 800066e:	4a1a      	ldr	r2, [pc, #104]	; (80006d8 <init+0x88>)
 8000670:	88fb      	ldrh	r3, [r7, #6]
 8000672:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000674:	4a19      	ldr	r2, [pc, #100]	; (80006dc <init+0x8c>)
 8000676:	8b3b      	ldrh	r3, [r7, #24]
 8000678:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800067a:	4a19      	ldr	r2, [pc, #100]	; (80006e0 <init+0x90>)
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000680:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <init+0x94>)
 8000682:	8bbb      	ldrh	r3, [r7, #28]
 8000684:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 8000686:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <init+0x94>)
 8000688:	8c3b      	ldrh	r3, [r7, #32]
 800068a:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 800068c:	4a15      	ldr	r2, [pc, #84]	; (80006e4 <init+0x94>)
 800068e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000690:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000692:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <init+0x94>)
 8000694:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000696:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 8000698:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <init+0x94>)
 800069a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800069c:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 800069e:	4a11      	ldr	r2, [pc, #68]	; (80006e4 <init+0x94>)
 80006a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80006a2:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <init+0x94>)
 80006a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80006a8:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 80006aa:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <init+0x94>)
 80006ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80006ae:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d003      	beq.n	80006be <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <init+0x98>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	e002      	b.n	80006c4 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <init+0x98>)
 80006c0:	2210      	movs	r2, #16
 80006c2:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 80006c4:	2102      	movs	r1, #2
 80006c6:	2010      	movs	r0, #16
 80006c8:	f000 f810 	bl	80006ec <begin>
}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200001ce 	.word	0x200001ce
 80006d8:	200001d0 	.word	0x200001d0
 80006dc:	200001d2 	.word	0x200001d2
 80006e0:	200001e4 	.word	0x200001e4
 80006e4:	200001d4 	.word	0x200001d4
 80006e8:	200001e8 	.word	0x200001e8

080006ec <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	4613      	mov	r3, r2
 80006fa:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80006fc:	79bb      	ldrb	r3, [r7, #6]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d906      	bls.n	8000710 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 8000702:	4b77      	ldr	r3, [pc, #476]	; (80008e0 <begin+0x1f4>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	f043 0308 	orr.w	r3, r3, #8
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b74      	ldr	r3, [pc, #464]	; (80008e0 <begin+0x1f4>)
 800070e:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8000710:	4a74      	ldr	r2, [pc, #464]	; (80008e4 <begin+0x1f8>)
 8000712:	79bb      	ldrb	r3, [r7, #6]
 8000714:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 8000716:	79fa      	ldrb	r2, [r7, #7]
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	3340      	adds	r3, #64	; 0x40
 800071c:	2140      	movs	r1, #64	; 0x40
 800071e:	2000      	movs	r0, #0
 8000720:	f000 f98a 	bl	8000a38 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000724:	4b70      	ldr	r3, [pc, #448]	; (80008e8 <begin+0x1fc>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d009      	beq.n	8000740 <begin+0x54>
 800072c:	79bb      	ldrb	r3, [r7, #6]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d106      	bne.n	8000740 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8000732:	4b6b      	ldr	r3, [pc, #428]	; (80008e0 <begin+0x1f4>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	f043 0304 	orr.w	r3, r3, #4
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b68      	ldr	r3, [pc, #416]	; (80008e0 <begin+0x1f4>)
 800073e:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000740:	f000 f8e4 	bl	800090c <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000744:	2302      	movs	r3, #2
 8000746:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 800074c:	4b67      	ldr	r3, [pc, #412]	; (80008ec <begin+0x200>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d01b      	beq.n	800078c <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000754:	4b66      	ldr	r3, [pc, #408]	; (80008f0 <begin+0x204>)
 8000756:	881a      	ldrh	r2, [r3, #0]
 8000758:	4b66      	ldr	r3, [pc, #408]	; (80008f4 <begin+0x208>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	4313      	orrs	r3, r2
 800075e:	b29a      	uxth	r2, r3
 8000760:	4b65      	ldr	r3, [pc, #404]	; (80008f8 <begin+0x20c>)
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	4313      	orrs	r3, r2
 8000766:	b29a      	uxth	r2, r3
 8000768:	4b64      	ldr	r3, [pc, #400]	; (80008fc <begin+0x210>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	4313      	orrs	r3, r2
 800076e:	b29a      	uxth	r2, r3
 8000770:	4b62      	ldr	r3, [pc, #392]	; (80008fc <begin+0x210>)
 8000772:	885b      	ldrh	r3, [r3, #2]
 8000774:	4313      	orrs	r3, r2
 8000776:	b29a      	uxth	r2, r3
 8000778:	4b60      	ldr	r3, [pc, #384]	; (80008fc <begin+0x210>)
 800077a:	889b      	ldrh	r3, [r3, #4]
 800077c:	4313      	orrs	r3, r2
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b5e      	ldr	r3, [pc, #376]	; (80008fc <begin+0x210>)
 8000782:	88db      	ldrh	r3, [r3, #6]
 8000784:	4313      	orrs	r3, r2
 8000786:	b29b      	uxth	r3, r3
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	e02a      	b.n	80007e2 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 800078c:	4b58      	ldr	r3, [pc, #352]	; (80008f0 <begin+0x204>)
 800078e:	881a      	ldrh	r2, [r3, #0]
 8000790:	4b58      	ldr	r3, [pc, #352]	; (80008f4 <begin+0x208>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	4313      	orrs	r3, r2
 8000796:	b29a      	uxth	r2, r3
 8000798:	4b57      	ldr	r3, [pc, #348]	; (80008f8 <begin+0x20c>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	4313      	orrs	r3, r2
 800079e:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80007a0:	4b56      	ldr	r3, [pc, #344]	; (80008fc <begin+0x210>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80007a4:	4313      	orrs	r3, r2
 80007a6:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80007a8:	4b54      	ldr	r3, [pc, #336]	; (80008fc <begin+0x210>)
 80007aa:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80007ac:	4313      	orrs	r3, r2
 80007ae:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80007b0:	4b52      	ldr	r3, [pc, #328]	; (80008fc <begin+0x210>)
 80007b2:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80007b4:	4313      	orrs	r3, r2
 80007b6:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80007b8:	4b50      	ldr	r3, [pc, #320]	; (80008fc <begin+0x210>)
 80007ba:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80007bc:	4313      	orrs	r3, r2
 80007be:	b29a      	uxth	r2, r3
 80007c0:	4b4e      	ldr	r3, [pc, #312]	; (80008fc <begin+0x210>)
 80007c2:	891b      	ldrh	r3, [r3, #8]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b4c      	ldr	r3, [pc, #304]	; (80008fc <begin+0x210>)
 80007ca:	895b      	ldrh	r3, [r3, #10]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	4b4a      	ldr	r3, [pc, #296]	; (80008fc <begin+0x210>)
 80007d2:	899b      	ldrh	r3, [r3, #12]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	4b48      	ldr	r3, [pc, #288]	; (80008fc <begin+0x210>)
 80007da:	89db      	ldrh	r3, [r3, #14]
 80007dc:	4313      	orrs	r3, r2
 80007de:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80007e0:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80007e2:	4b47      	ldr	r3, [pc, #284]	; (8000900 <begin+0x214>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f107 020c 	add.w	r2, r7, #12
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 f973 	bl	8002ad8 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80007f2:	2032      	movs	r0, #50	; 0x32
 80007f4:	f001 fc82 	bl	80020fc <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80007f8:	4b41      	ldr	r3, [pc, #260]	; (8000900 <begin+0x214>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a3c      	ldr	r2, [pc, #240]	; (80008f0 <begin+0x204>)
 80007fe:	8811      	ldrh	r1, [r2, #0]
 8000800:	2200      	movs	r2, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f002 fb2c 	bl	8002e60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000808:	4b3d      	ldr	r3, [pc, #244]	; (8000900 <begin+0x214>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a3a      	ldr	r2, [pc, #232]	; (80008f8 <begin+0x20c>)
 800080e:	8811      	ldrh	r1, [r2, #0]
 8000810:	2200      	movs	r2, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fb24 	bl	8002e60 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 8000818:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <begin+0x208>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	2bff      	cmp	r3, #255	; 0xff
 800081e:	d007      	beq.n	8000830 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000820:	4b37      	ldr	r3, [pc, #220]	; (8000900 <begin+0x214>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a33      	ldr	r2, [pc, #204]	; (80008f4 <begin+0x208>)
 8000826:	8811      	ldrh	r1, [r2, #0]
 8000828:	2200      	movs	r2, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f002 fb18 	bl	8002e60 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000830:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <begin+0x1f4>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	f003 0310 	and.w	r3, r3, #16
 8000838:	2b00      	cmp	r3, #0
 800083a:	d115      	bne.n	8000868 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 800083c:	2003      	movs	r0, #3
 800083e:	f000 fa1d 	bl	8000c7c <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000842:	2005      	movs	r0, #5
 8000844:	f001 fc5a 	bl	80020fc <HAL_Delay>

    // second try
    write4bits(0x03);
 8000848:	2003      	movs	r0, #3
 800084a:	f000 fa17 	bl	8000c7c <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800084e:	2005      	movs	r0, #5
 8000850:	f001 fc54 	bl	80020fc <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000854:	2003      	movs	r0, #3
 8000856:	f000 fa11 	bl	8000c7c <write4bits>
    HAL_Delay(1);
 800085a:	2001      	movs	r0, #1
 800085c:	f001 fc4e 	bl	80020fc <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000860:	2002      	movs	r0, #2
 8000862:	f000 fa0b 	bl	8000c7c <write4bits>
 8000866:	e01d      	b.n	80008a4 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <begin+0x1f4>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	f043 0320 	orr.w	r3, r3, #32
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f97d 	bl	8000b72 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8000878:	2005      	movs	r0, #5
 800087a:	f001 fc3f 	bl	80020fc <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <begin+0x1f4>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	f043 0320 	orr.w	r3, r3, #32
 8000886:	b2db      	uxtb	r3, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f000 f972 	bl	8000b72 <command>
    HAL_Delay(1);
 800088e:	2001      	movs	r0, #1
 8000890:	f001 fc34 	bl	80020fc <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <begin+0x1f4>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	f043 0320 	orr.w	r3, r3, #32
 800089c:	b2db      	uxtb	r3, r3
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 f967 	bl	8000b72 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <begin+0x1f4>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	f043 0320 	orr.w	r3, r3, #32
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f95f 	bl	8000b72 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <begin+0x218>)
 80008b6:	2204      	movs	r2, #4
 80008b8:	701a      	strb	r2, [r3, #0]
  display();
 80008ba:	f000 f919 	bl	8000af0 <display>

  // clear it off
  clear();
 80008be:	f000 f8db 	bl	8000a78 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <begin+0x21c>)
 80008c4:	2202      	movs	r2, #2
 80008c6:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <begin+0x21c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f94d 	bl	8000b72 <command>

}
 80008d8:	bf00      	nop
 80008da:	3720      	adds	r7, #32
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200001e8 	.word	0x200001e8
 80008e4:	200001eb 	.word	0x200001eb
 80008e8:	200001cc 	.word	0x200001cc
 80008ec:	20000000 	.word	0x20000000
 80008f0:	200001ce 	.word	0x200001ce
 80008f4:	200001d0 	.word	0x200001d0
 80008f8:	200001d2 	.word	0x200001d2
 80008fc:	200001d4 	.word	0x200001d4
 8000900:	200001e4 	.word	0x200001e4
 8000904:	200001e9 	.word	0x200001e9
 8000908:	200001ea 	.word	0x200001ea

0800090c <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 800090c:	b480      	push	{r7}
 800090e:	b089      	sub	sp, #36	; 0x24
 8000910:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 8000912:	4b41      	ldr	r3, [pc, #260]	; (8000a18 <enableClock+0x10c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a41      	ldr	r2, [pc, #260]	; (8000a1c <enableClock+0x110>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d10c      	bne.n	8000936 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800091c:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <enableClock+0x114>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	4a3f      	ldr	r2, [pc, #252]	; (8000a20 <enableClock+0x114>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	6313      	str	r3, [r2, #48]	; 0x30
 8000928:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <enableClock+0x114>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	61fb      	str	r3, [r7, #28]
 8000932:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000934:	e06a      	b.n	8000a0c <enableClock+0x100>
  else if(_port == GPIOB)
 8000936:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <enableClock+0x10c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a3a      	ldr	r2, [pc, #232]	; (8000a24 <enableClock+0x118>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d10c      	bne.n	800095a <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000940:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <enableClock+0x114>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a36      	ldr	r2, [pc, #216]	; (8000a20 <enableClock+0x114>)
 8000946:	f043 0302 	orr.w	r3, r3, #2
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
 800094c:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <enableClock+0x114>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	f003 0302 	and.w	r3, r3, #2
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	69bb      	ldr	r3, [r7, #24]
}
 8000958:	e058      	b.n	8000a0c <enableClock+0x100>
  else if(_port == GPIOB)
 800095a:	4b2f      	ldr	r3, [pc, #188]	; (8000a18 <enableClock+0x10c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a31      	ldr	r2, [pc, #196]	; (8000a24 <enableClock+0x118>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d10c      	bne.n	800097e <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000964:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <enableClock+0x114>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	4a2d      	ldr	r2, [pc, #180]	; (8000a20 <enableClock+0x114>)
 800096a:	f043 0302 	orr.w	r3, r3, #2
 800096e:	6313      	str	r3, [r2, #48]	; 0x30
 8000970:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <enableClock+0x114>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	f003 0302 	and.w	r3, r3, #2
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	697b      	ldr	r3, [r7, #20]
}
 800097c:	e046      	b.n	8000a0c <enableClock+0x100>
	else if(_port == GPIOC)
 800097e:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <enableClock+0x10c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a29      	ldr	r2, [pc, #164]	; (8000a28 <enableClock+0x11c>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d10c      	bne.n	80009a2 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <enableClock+0x114>)
 800098a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098c:	4a24      	ldr	r2, [pc, #144]	; (8000a20 <enableClock+0x114>)
 800098e:	f043 0304 	orr.w	r3, r3, #4
 8000992:	6313      	str	r3, [r2, #48]	; 0x30
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <enableClock+0x114>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]
}
 80009a0:	e034      	b.n	8000a0c <enableClock+0x100>
	else if(_port == GPIOD)
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <enableClock+0x10c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a21      	ldr	r2, [pc, #132]	; (8000a2c <enableClock+0x120>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d10c      	bne.n	80009c6 <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <enableClock+0x114>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b0:	4a1b      	ldr	r2, [pc, #108]	; (8000a20 <enableClock+0x114>)
 80009b2:	f043 0308 	orr.w	r3, r3, #8
 80009b6:	6313      	str	r3, [r2, #48]	; 0x30
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <enableClock+0x114>)
 80009ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009bc:	f003 0308 	and.w	r3, r3, #8
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
}
 80009c4:	e022      	b.n	8000a0c <enableClock+0x100>
	else if(_port == GPIOE)
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <enableClock+0x10c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <enableClock+0x124>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d10c      	bne.n	80009ea <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <enableClock+0x114>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <enableClock+0x114>)
 80009d6:	f043 0310 	orr.w	r3, r3, #16
 80009da:	6313      	str	r3, [r2, #48]	; 0x30
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <enableClock+0x114>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	f003 0310 	and.w	r3, r3, #16
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
}
 80009e8:	e010      	b.n	8000a0c <enableClock+0x100>
	else if(_port == GPIOF)
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <enableClock+0x10c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a11      	ldr	r2, [pc, #68]	; (8000a34 <enableClock+0x128>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d10b      	bne.n	8000a0c <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <enableClock+0x114>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f8:	4a09      	ldr	r2, [pc, #36]	; (8000a20 <enableClock+0x114>)
 80009fa:	f043 0320 	orr.w	r3, r3, #32
 80009fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <enableClock+0x114>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	f003 0320 	and.w	r3, r3, #32
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	687b      	ldr	r3, [r7, #4]
}
 8000a0c:	bf00      	nop
 8000a0e:	3724      	adds	r7, #36	; 0x24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	200001e4 	.word	0x200001e4
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020400 	.word	0x40020400
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020c00 	.word	0x40020c00
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40021400 	.word	0x40021400

08000a38 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
 8000a44:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <setRowOffsets+0x3c>)
 8000a4c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <setRowOffsets+0x3c>)
 8000a54:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <setRowOffsets+0x3c>)
 8000a5c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <setRowOffsets+0x3c>)
 8000a64:	70da      	strb	r2, [r3, #3]
}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	200001ec 	.word	0x200001ec

08000a78 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f000 f878 	bl	8000b72 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000a82:	2002      	movs	r0, #2
 8000a84:	f001 fb3a 	bl	80020fc <HAL_Delay>
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	460a      	mov	r2, r1
 8000a96:	71fb      	strb	r3, [r7, #7]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000aa0:	79bb      	ldrb	r3, [r7, #6]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d803      	bhi.n	8000ab0 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	3b01      	subs	r3, #1
 8000aae:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000ab0:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <setCursor+0x5c>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	79ba      	ldrb	r2, [r7, #6]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d303      	bcc.n	8000ac2 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <setCursor+0x5c>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000ac2:	79bb      	ldrb	r3, [r7, #6]
 8000ac4:	4a09      	ldr	r2, [pc, #36]	; (8000aec <setCursor+0x60>)
 8000ac6:	5cd2      	ldrb	r2, [r2, r3]
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	4413      	add	r3, r2
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	b25b      	sxtb	r3, r3
 8000ad0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ad4:	b25b      	sxtb	r3, r3
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 f84a 	bl	8000b72 <command>
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200001eb 	.word	0x200001eb
 8000aec:	200001ec 	.word	0x200001ec

08000af0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <display+0x28>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <display+0x28>)
 8000b00:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <display+0x28>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	f043 0308 	orr.w	r3, r3, #8
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 f830 	bl	8000b72 <command>
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200001e9 	.word	0x200001e9

08000b1c <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <print+0x12>
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e01d      	b.n	8000b6a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff fb6c 	bl	8000210 <strlen>
 8000b38:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8000b3e:	e00c      	b.n	8000b5a <print+0x3e>
    if (write(*buffer++)) n++;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	617a      	str	r2, [r7, #20]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 f820 	bl	8000b8e <write>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d008      	beq.n	8000b66 <print+0x4a>
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	3301      	adds	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	1e5a      	subs	r2, r3, #1
 8000b5e:	613a      	str	r2, [r7, #16]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d1ed      	bne.n	8000b40 <print+0x24>
 8000b64:	e000      	b.n	8000b68 <print+0x4c>
    else break;
 8000b66:	bf00      	nop
  }
  return n;
 8000b68:	68fb      	ldr	r3, [r7, #12]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 f813 	bl	8000bac <send>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <write>:

inline size_t write(uint8_t value) {
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 f805 	bl	8000bac <send>
  return 1; // assume sucess
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	460a      	mov	r2, r1
 8000bb6:	71fb      	strb	r3, [r7, #7]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <send+0x6c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a16      	ldr	r2, [pc, #88]	; (8000c1c <send+0x70>)
 8000bc2:	8811      	ldrh	r1, [r2, #0]
 8000bc4:	79ba      	ldrb	r2, [r7, #6]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f002 f94a 	bl	8002e60 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <send+0x74>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	2bff      	cmp	r3, #255	; 0xff
 8000bd2:	d007      	beq.n	8000be4 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000bd4:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <send+0x6c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <send+0x74>)
 8000bda:	8811      	ldrh	r1, [r2, #0]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f002 f93e 	bl	8002e60 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <send+0x78>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	f003 0310 	and.w	r3, r3, #16
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d004      	beq.n	8000bfa <send+0x4e>
    write8bits(value); 
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f86c 	bl	8000cd0 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8000bf8:	e009      	b.n	8000c0e <send+0x62>
    write4bits(value>>4);
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	091b      	lsrs	r3, r3, #4
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f83b 	bl	8000c7c <write4bits>
    write4bits(value);
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 f837 	bl	8000c7c <write4bits>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200001e4 	.word	0x200001e4
 8000c1c:	200001ce 	.word	0x200001ce
 8000c20:	200001d0 	.word	0x200001d0
 8000c24:	200001e8 	.word	0x200001e8

08000c28 <pulseEnable>:

void pulseEnable(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <pulseEnable+0x4c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a11      	ldr	r2, [pc, #68]	; (8000c78 <pulseEnable+0x50>)
 8000c32:	8811      	ldrh	r1, [r2, #0]
 8000c34:	2200      	movs	r2, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f002 f912 	bl	8002e60 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f001 fa5d 	bl	80020fc <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <pulseEnable+0x4c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a0c      	ldr	r2, [pc, #48]	; (8000c78 <pulseEnable+0x50>)
 8000c48:	8811      	ldrh	r1, [r2, #0]
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f002 f907 	bl	8002e60 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000c52:	2001      	movs	r0, #1
 8000c54:	f001 fa52 	bl	80020fc <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <pulseEnable+0x4c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a06      	ldr	r2, [pc, #24]	; (8000c78 <pulseEnable+0x50>)
 8000c5e:	8811      	ldrh	r1, [r2, #0]
 8000c60:	2200      	movs	r2, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f002 f8fc 	bl	8002e60 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f001 fa47 	bl	80020fc <HAL_Delay>
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200001e4 	.word	0x200001e4
 8000c78:	200001d2 	.word	0x200001d2

08000c7c <write4bits>:

void write4bits(uint8_t value) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	e013      	b.n	8000cb4 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <write4bits+0x4c>)
 8000c8e:	6818      	ldr	r0, [r3, #0]
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <write4bits+0x50>)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000c98:	79fa      	ldrb	r2, [r7, #7]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	fa42 f303 	asr.w	r3, r2, r3
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	461a      	mov	r2, r3
 8000caa:	f002 f8d9 	bl	8002e60 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	dde8      	ble.n	8000c8c <write4bits+0x10>
  }

  pulseEnable();
 8000cba:	f7ff ffb5 	bl	8000c28 <pulseEnable>
}
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200001e4 	.word	0x200001e4
 8000ccc:	200001d4 	.word	0x200001d4

08000cd0 <write8bits>:

void write8bits(uint8_t value) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	e013      	b.n	8000d08 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <write8bits+0x4c>)
 8000ce2:	6818      	ldr	r0, [r3, #0]
 8000ce4:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <write8bits+0x50>)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000cec:	79fa      	ldrb	r2, [r7, #7]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	fa42 f303 	asr.w	r3, r2, r3
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	f002 f8af 	bl	8002e60 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	3301      	adds	r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	2b07      	cmp	r3, #7
 8000d0c:	dde8      	ble.n	8000ce0 <write8bits+0x10>
  }
  
  pulseEnable();
 8000d0e:	f7ff ff8b 	bl	8000c28 <pulseEnable>
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200001e4 	.word	0x200001e4
 8000d20:	200001d4 	.word	0x200001d4

08000d24 <PID_Control>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PID_Control() {
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
	// Odczytaj aktualne RPM wiatraka
	float MAX_INTEGRAL = 40.0f;
 8000d2a:	4b4d      	ldr	r3, [pc, #308]	; (8000e60 <PID_Control+0x13c>)
 8000d2c:	60fb      	str	r3, [r7, #12]
	float MIN_INTEGRAL = 0.0f;
 8000d2e:	f04f 0300 	mov.w	r3, #0
 8000d32:	60bb      	str	r3, [r7, #8]
	float MIN_PWM = 0.0f;
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
	float MAX_PWM = 40.0f;
 8000d3a:	4b49      	ldr	r3, [pc, #292]	; (8000e60 <PID_Control+0x13c>)
 8000d3c:	603b      	str	r3, [r7, #0]

	measuredValue = W_rpm;
 8000d3e:	4b49      	ldr	r3, [pc, #292]	; (8000e64 <PID_Control+0x140>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a49      	ldr	r2, [pc, #292]	; (8000e68 <PID_Control+0x144>)
 8000d44:	6013      	str	r3, [r2, #0]

	// błąd
	error = (float) W_rpm_setpoint - measuredValue;
 8000d46:	4b49      	ldr	r3, [pc, #292]	; (8000e6c <PID_Control+0x148>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	ee07 3a90 	vmov	s15, r3
 8000d4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d52:	4b45      	ldr	r3, [pc, #276]	; (8000e68 <PID_Control+0x144>)
 8000d54:	edd3 7a00 	vldr	s15, [r3]
 8000d58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d5c:	4b44      	ldr	r3, [pc, #272]	; (8000e70 <PID_Control+0x14c>)
 8000d5e:	edc3 7a00 	vstr	s15, [r3]

	// całka z ograniczeniem
	integral += error * Ki;
 8000d62:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <PID_Control+0x14c>)
 8000d64:	ed93 7a00 	vldr	s14, [r3]
 8000d68:	4b42      	ldr	r3, [pc, #264]	; (8000e74 <PID_Control+0x150>)
 8000d6a:	edd3 7a00 	vldr	s15, [r3]
 8000d6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d72:	4b41      	ldr	r3, [pc, #260]	; (8000e78 <PID_Control+0x154>)
 8000d74:	edd3 7a00 	vldr	s15, [r3]
 8000d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d7c:	4b3e      	ldr	r3, [pc, #248]	; (8000e78 <PID_Control+0x154>)
 8000d7e:	edc3 7a00 	vstr	s15, [r3]
	// Ograniczenie całki ANITI_WINDUP (bez tego uklad sie destabilizuje)
	if (integral > MAX_INTEGRAL)
 8000d82:	4b3d      	ldr	r3, [pc, #244]	; (8000e78 <PID_Control+0x154>)
 8000d84:	edd3 7a00 	vldr	s15, [r3]
 8000d88:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d94:	d503      	bpl.n	8000d9e <PID_Control+0x7a>
		integral = MAX_INTEGRAL;
 8000d96:	4a38      	ldr	r2, [pc, #224]	; (8000e78 <PID_Control+0x154>)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	e00c      	b.n	8000db8 <PID_Control+0x94>
	else if (integral < MIN_INTEGRAL)
 8000d9e:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <PID_Control+0x154>)
 8000da0:	edd3 7a00 	vldr	s15, [r3]
 8000da4:	ed97 7a02 	vldr	s14, [r7, #8]
 8000da8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db0:	dd02      	ble.n	8000db8 <PID_Control+0x94>
		integral = MIN_INTEGRAL;
 8000db2:	4a31      	ldr	r2, [pc, #196]	; (8000e78 <PID_Control+0x154>)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	6013      	str	r3, [r2, #0]

	// pochodną
	derivative = (error - prevError) * Kd;
 8000db8:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <PID_Control+0x14c>)
 8000dba:	ed93 7a00 	vldr	s14, [r3]
 8000dbe:	4b2f      	ldr	r3, [pc, #188]	; (8000e7c <PID_Control+0x158>)
 8000dc0:	edd3 7a00 	vldr	s15, [r3]
 8000dc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dc8:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <PID_Control+0x15c>)
 8000dca:	edd3 7a00 	vldr	s15, [r3]
 8000dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd2:	4b2c      	ldr	r3, [pc, #176]	; (8000e84 <PID_Control+0x160>)
 8000dd4:	edc3 7a00 	vstr	s15, [r3]

	// wartość sterowania
	controlValue = Kp * error + integral + derivative;
 8000dd8:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <PID_Control+0x164>)
 8000dda:	ed93 7a00 	vldr	s14, [r3]
 8000dde:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <PID_Control+0x14c>)
 8000de0:	edd3 7a00 	vldr	s15, [r3]
 8000de4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000de8:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <PID_Control+0x154>)
 8000dea:	edd3 7a00 	vldr	s15, [r3]
 8000dee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000df2:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <PID_Control+0x160>)
 8000df4:	edd3 7a00 	vldr	s15, [r3]
 8000df8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dfc:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <PID_Control+0x168>)
 8000dfe:	edc3 7a00 	vstr	s15, [r3]

	// Ograniczenie wartości sterowania do dopuszczalnego zakresu PWM

	if (controlValue < MIN_PWM)
 8000e02:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <PID_Control+0x168>)
 8000e04:	edd3 7a00 	vldr	s15, [r3]
 8000e08:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e14:	dd03      	ble.n	8000e1e <PID_Control+0xfa>
		controlValue = MIN_PWM;
 8000e16:	4a1d      	ldr	r2, [pc, #116]	; (8000e8c <PID_Control+0x168>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	e00c      	b.n	8000e38 <PID_Control+0x114>

	else if (controlValue > MAX_PWM)
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <PID_Control+0x168>)
 8000e20:	edd3 7a00 	vldr	s15, [r3]
 8000e24:	ed97 7a00 	vldr	s14, [r7]
 8000e28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e30:	d502      	bpl.n	8000e38 <PID_Control+0x114>
		controlValue = MAX_PWM;
 8000e32:	4a16      	ldr	r2, [pc, #88]	; (8000e8c <PID_Control+0x168>)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	6013      	str	r3, [r2, #0]

	// Aktualizuj PWM wiatraka
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (uint32_t )controlValue);
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <PID_Control+0x168>)
 8000e3a:	edd3 7a00 	vldr	s15, [r3]
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <PID_Control+0x16c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e46:	ee17 2a90 	vmov	r2, s15
 8000e4a:	63da      	str	r2, [r3, #60]	; 0x3c

	// Zaktualizuj poprzedni błąd
	prevError = error;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <PID_Control+0x14c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <PID_Control+0x158>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	42200000 	.word	0x42200000
 8000e64:	2000099c 	.word	0x2000099c
 8000e68:	200009a8 	.word	0x200009a8
 8000e6c:	200009a0 	.word	0x200009a0
 8000e70:	200009ac 	.word	0x200009ac
 8000e74:	20000008 	.word	0x20000008
 8000e78:	200009b4 	.word	0x200009b4
 8000e7c:	200009b0 	.word	0x200009b0
 8000e80:	2000000c 	.word	0x2000000c
 8000e84:	200009b8 	.word	0x200009b8
 8000e88:	20000004 	.word	0x20000004
 8000e8c:	200009bc 	.word	0x200009bc
 8000e90:	20000324 	.word	0x20000324

08000e94 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d101      	bne.n	8000ea8 <HAL_TIM_PeriodElapsedCallback+0x14>
		PID_Control();
 8000ea4:	f7ff ff3e 	bl	8000d24 <PID_Control>
	}
	//jacek
	if (htim->Instance == TIM5) {
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d106      	bne.n	8000ec0 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	4806      	ldr	r0, [pc, #24]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000eb6:	f001 ffec 	bl	8002e92 <HAL_GPIO_TogglePin>
		tim5_tick = 1;
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	701a      	strb	r2, [r3, #0]

	}
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200002d8 	.word	0x200002d8
 8000ecc:	40000c00 	.word	0x40000c00
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	20000a08 	.word	0x20000a08

08000ed8 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	if (htim == &htim4) // Sprawdź, czy to odpowiedni kanał
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a26      	ldr	r2, [pc, #152]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d145      	bne.n	8000f74 <HAL_TIM_IC_CaptureCallback+0x9c>
			{
		// Odczytaj wartość przechwyconą przez timer
		uint32_t current_capture = HAL_TIM_ReadCapturedValue(htim,
 8000ee8:	2100      	movs	r1, #0
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f004 f984 	bl	80051f8 <HAL_TIM_ReadCapturedValue>
 8000ef0:	6138      	str	r0, [r7, #16]
				TIM_CHANNEL_1);
		float diffCapture = 0.f;
 8000ef2:	f04f 0300 	mov.w	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]

		// Oblicz różnicę czasów między bieżącym a poprzednim impulsem
		if (current_capture > last_capture) {
 8000ef8:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d90a      	bls.n	8000f18 <HAL_TIM_IC_CaptureCallback+0x40>
			diffCapture = current_capture - last_capture;
 8000f02:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	ee07 3a90 	vmov	s15, r3
 8000f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f12:	edc7 7a05 	vstr	s15, [r7, #20]
 8000f16:	e011      	b.n	8000f3c <HAL_TIM_IC_CaptureCallback+0x64>
		}

		else if (current_capture < last_capture) {
 8000f18:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d20c      	bcs.n	8000f3c <HAL_TIM_IC_CaptureCallback+0x64>
			//Obsługa przepełnienia timera (jeśli Timer jest 16-bitowy i przekroczył maksymalną wartość)
			diffCapture = ((0xffff - last_capture) + current_capture);
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	1ad2      	subs	r2, r2, r3
 8000f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f2e:	4413      	add	r3, r2
 8000f30:	ee07 3a90 	vmov	s15, r3
 8000f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f38:	edc7 7a05 	vstr	s15, [r7, #20]
		}
		// Aktualizacja 'last_capture' dla następnego przechwycenia
		last_capture = current_capture;
 8000f3c:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	6013      	str	r3, [r2, #0]

		// czestotliwosc sygnalu(impulsow z wiatraka)
		float k = 1.0f / diffCapture;
 8000f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000f46:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f4e:	edc7 7a03 	vstr	s15, [r7, #12]
		//float k = HAL_RCC_GetPCLK1Freq()/diffCapture; (niepotrzebne)
		//*1000000, bo PSC = 71 f->1[MHz] * 60, bo [rpm] /2,bo dwa impulsy na obrót
		W_rpm = k * 1000000 * 60 / 2;
 8000f52:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f56:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000f84 <HAL_TIM_IC_CaptureCallback+0xac>
 8000f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f5e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000f88 <HAL_TIM_IC_CaptureCallback+0xb0>
 8000f62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f66:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000f6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000f70:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8000f74:	bf00      	nop
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000370 	.word	0x20000370
 8000f80:	20000998 	.word	0x20000998
 8000f84:	49742400 	.word	0x49742400
 8000f88:	42700000 	.word	0x42700000
 8000f8c:	2000099c 	.word	0x2000099c

08000f90 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a27      	ldr	r2, [pc, #156]	; (800103c <HAL_UART_RxCpltCallback+0xac>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d148      	bne.n	8001034 <HAL_UART_RxCpltCallback+0xa4>
		// Sprawdź, czy otrzymano znak końca linii.
		if (rxBuffer[rxIndex] == '\n') {
 8000fa2:	4b27      	ldr	r3, [pc, #156]	; (8001040 <HAL_UART_RxCpltCallback+0xb0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a27      	ldr	r2, [pc, #156]	; (8001044 <HAL_UART_RxCpltCallback+0xb4>)
 8000fa8:	5cd3      	ldrb	r3, [r2, r3]
 8000faa:	2b0a      	cmp	r3, #10
 8000fac:	d130      	bne.n	8001010 <HAL_UART_RxCpltCallback+0x80>
			// Zakończ łańcuch znaków przed znakiem nowej linii, aby utworzyć poprawny string C.
			rxBuffer[rxIndex] = '\0';
 8000fae:	4b24      	ldr	r3, [pc, #144]	; (8001040 <HAL_UART_RxCpltCallback+0xb0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a24      	ldr	r2, [pc, #144]	; (8001044 <HAL_UART_RxCpltCallback+0xb4>)
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	54d1      	strb	r1, [r2, r3]
			// Użyj formatu, który ignoruje niechciane znaki przed liczbą.
			if (sscanf(rxBuffer, "RPM%d", &W_RPM_terminal) == 1) {
 8000fb8:	4a23      	ldr	r2, [pc, #140]	; (8001048 <HAL_UART_RxCpltCallback+0xb8>)
 8000fba:	4924      	ldr	r1, [pc, #144]	; (800104c <HAL_UART_RxCpltCallback+0xbc>)
 8000fbc:	4821      	ldr	r0, [pc, #132]	; (8001044 <HAL_UART_RxCpltCallback+0xb4>)
 8000fbe:	f006 fc7d 	bl	80078bc <siscanf>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d12c      	bne.n	8001022 <HAL_UART_RxCpltCallback+0x92>
				//ograniczenie do bezpiecznego zakresu sterowania
				if (W_RPM_terminal < 2000) {
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <HAL_UART_RxCpltCallback+0xb8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fd0:	da04      	bge.n	8000fdc <HAL_UART_RxCpltCallback+0x4c>
					W_RPM_terminal = 2000;
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <HAL_UART_RxCpltCallback+0xb8>)
 8000fd4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	e009      	b.n	8000ff0 <HAL_UART_RxCpltCallback+0x60>
				} else if (W_RPM_terminal > 15000) {
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <HAL_UART_RxCpltCallback+0xb8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	dd03      	ble.n	8000ff0 <HAL_UART_RxCpltCallback+0x60>
					W_RPM_terminal = 15000;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_UART_RxCpltCallback+0xb8>)
 8000fea:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000fee:	601a      	str	r2, [r3, #0]
				}
				W_rpm_setpoint = W_RPM_terminal;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_UART_RxCpltCallback+0xb8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a16      	ldr	r2, [pc, #88]	; (8001050 <HAL_UART_RxCpltCallback+0xc0>)
 8000ff6:	6013      	str	r3, [r2, #0]
				// Wyczyszczenie bufora po pomyślnym odczycie.
				memset(rxBuffer, 0, sizeof(rxBuffer));
 8000ff8:	2240      	movs	r2, #64	; 0x40
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4811      	ldr	r0, [pc, #68]	; (8001044 <HAL_UART_RxCpltCallback+0xb4>)
 8000ffe:	f006 fc8b 	bl	8007918 <memset>
				// Resetowanie indeksu bufora.
				rxIndex = 0;
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <HAL_UART_RxCpltCallback+0xb0>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
				// Ustaw flagę oznaczającą dostępność nowych danych.
				newDataFlag = 1;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_UART_RxCpltCallback+0xc4>)
 800100a:	2201      	movs	r2, #1
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	e008      	b.n	8001022 <HAL_UART_RxCpltCallback+0x92>
			} else {
				// Obsługa błędów w przypadku niepowodzenia odczytu.
			}
		} else {
			// Upewnij się, że nie przekroczysz rozmiaru bufora.
			if (rxIndex < RX_BUFFER_SIZE - 1) {
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <HAL_UART_RxCpltCallback+0xb0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b3e      	cmp	r3, #62	; 0x3e
 8001016:	dc04      	bgt.n	8001022 <HAL_UART_RxCpltCallback+0x92>
				rxIndex++;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <HAL_UART_RxCpltCallback+0xb0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	4a08      	ldr	r2, [pc, #32]	; (8001040 <HAL_UART_RxCpltCallback+0xb0>)
 8001020:	6013      	str	r3, [r2, #0]
				// Obsługa błędów w przypadku przekroczenia bufora.
			}
		}

		// Ponowne włączenie odbierania przerwań z następnym bajtem w buforze.
		HAL_UART_Receive_IT(&huart3, (uint8_t*) &rxBuffer[rxIndex], 1);
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <HAL_UART_RxCpltCallback+0xb0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_UART_RxCpltCallback+0xb4>)
 8001028:	4413      	add	r3, r2
 800102a:	2201      	movs	r2, #1
 800102c:	4619      	mov	r1, r3
 800102e:	480a      	ldr	r0, [pc, #40]	; (8001058 <HAL_UART_RxCpltCallback+0xc8>)
 8001030:	f004 ff26 	bl	8005e80 <HAL_UART_Receive_IT>
	}
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40004800 	.word	0x40004800
 8001040:	20000a00 	.word	0x20000a00
 8001044:	200009c0 	.word	0x200009c0
 8001048:	200009a4 	.word	0x200009a4
 800104c:	08008b50 	.word	0x08008b50
 8001050:	200009a0 	.word	0x200009a0
 8001054:	20000a04 	.word	0x20000a04
 8001058:	20000408 	.word	0x20000408

0800105c <HAL_GPIO_EXTI_Callback>:

//jacek
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == MODE_Btn_Pin) {
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	2b08      	cmp	r3, #8
 800106a:	d115      	bne.n	8001098 <HAL_GPIO_EXTI_Callback+0x3c>
		if (HAL_GPIO_ReadPin(MODE_Btn_GPIO_Port, MODE_Btn_Pin)) {
 800106c:	2108      	movs	r1, #8
 800106e:	480c      	ldr	r0, [pc, #48]	; (80010a0 <HAL_GPIO_EXTI_Callback+0x44>)
 8001070:	f001 fede 	bl	8002e30 <HAL_GPIO_ReadPin>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00e      	beq.n	8001098 <HAL_GPIO_EXTI_Callback+0x3c>
			screen_number++;
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_GPIO_EXTI_Callback+0x48>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <HAL_GPIO_EXTI_Callback+0x48>)
 8001082:	6013      	str	r3, [r2, #0]
			if (screen_number == 2)
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <HAL_GPIO_EXTI_Callback+0x48>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d102      	bne.n	8001092 <HAL_GPIO_EXTI_Callback+0x36>
				screen_number = 0;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_GPIO_EXTI_Callback+0x48>)
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
			clear_screan_flag = 1;
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001094:	2201      	movs	r2, #1
 8001096:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40021000 	.word	0x40021000
 80010a4:	20000a0c 	.word	0x20000a0c
 80010a8:	20000010 	.word	0x20000010

080010ac <DisplayActualInfo>:

void SysTick_Handler(void);

void DisplayActualInfo(const char line1[], const char line2[]) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	setCursor(0, 0);
 80010b6:	2100      	movs	r1, #0
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff fce7 	bl	8000a8c <setCursor>
	print(line1);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fd2c 	bl	8000b1c <print>
	setCursor(0, 1);
 80010c4:	2101      	movs	r1, #1
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff fce0 	bl	8000a8c <setCursor>
	print(line2);
 80010cc:	6838      	ldr	r0, [r7, #0]
 80010ce:	f7ff fd25 	bl	8000b1c <print>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <ShowInfo>:

void ShowInfo() {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
	static int string_len = 16;

	char rpm[16] = "";
 80010e2:	2300      	movs	r3, #0
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]

	sprintf(rpm, "%i RPM   ", test_rpm);
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <ShowInfo+0x34>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	463b      	mov	r3, r7
 80010f6:	4907      	ldr	r1, [pc, #28]	; (8001114 <ShowInfo+0x38>)
 80010f8:	4618      	mov	r0, r3
 80010fa:	f006 fbbf 	bl	800787c <siprintf>
//	if (strlen(rpm) < string_len) {
//		//string_len = strlen(rpm);
//		//clear();
//	}

	DisplayActualInfo("Speed:", rpm);
 80010fe:	463b      	mov	r3, r7
 8001100:	4619      	mov	r1, r3
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <ShowInfo+0x3c>)
 8001104:	f7ff ffd2 	bl	80010ac <DisplayActualInfo>
}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000a10 	.word	0x20000a10
 8001114:	08008b58 	.word	0x08008b58
 8001118:	08008b64 	.word	0x08008b64

0800111c <Autorzy>:

void Autorzy() {
 800111c:	b580      	push	{r7, lr}
 800111e:	b0a0      	sub	sp, #128	; 0x80
 8001120:	af00      	add	r7, sp, #0
	struct string_pair list[4] = { { "Autorzy", "Projektu" }, { "Mateusz",
 8001122:	4a14      	ldr	r2, [pc, #80]	; (8001174 <Autorzy+0x58>)
 8001124:	463b      	mov	r3, r7
 8001126:	4611      	mov	r1, r2
 8001128:	2280      	movs	r2, #128	; 0x80
 800112a:	4618      	mov	r0, r3
 800112c:	f006 fc28 	bl	8007980 <memcpy>
			"Szumigalski" }, { "Jacek", "Szwed" }, { "Jakub", "Szymczak" } };
	static int num = 0;
	clear();
 8001130:	f7ff fca2 	bl	8000a78 <clear>
	DisplayActualInfo(list[num].line1, list[num].line2);
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <Autorzy+0x5c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	463a      	mov	r2, r7
 800113a:	015b      	lsls	r3, r3, #5
 800113c:	18d0      	adds	r0, r2, r3
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <Autorzy+0x5c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	463a      	mov	r2, r7
 8001144:	015b      	lsls	r3, r3, #5
 8001146:	3310      	adds	r3, #16
 8001148:	4413      	add	r3, r2
 800114a:	4619      	mov	r1, r3
 800114c:	f7ff ffae 	bl	80010ac <DisplayActualInfo>
	if (num == 3)
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <Autorzy+0x5c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b03      	cmp	r3, #3
 8001156:	d103      	bne.n	8001160 <Autorzy+0x44>
		num = 0;
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <Autorzy+0x5c>)
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
	else
		num++;
}
 800115e:	e004      	b.n	800116a <Autorzy+0x4e>
		num++;
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <Autorzy+0x5c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	3301      	adds	r3, #1
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <Autorzy+0x5c>)
 8001168:	6013      	str	r3, [r2, #0]
}
 800116a:	bf00      	nop
 800116c:	3780      	adds	r7, #128	; 0x80
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	08008b6c 	.word	0x08008b6c
 8001178:	20000a14 	.word	0x20000a14

0800117c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001182:	f000 ff5e 	bl	8002042 <HAL_Init>

  /* USER CODE BEGIN Init */
	//jacek
	LiquidCrystal(GPIOD, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3,
 8001186:	2340      	movs	r3, #64	; 0x40
 8001188:	9303      	str	r3, [sp, #12]
 800118a:	2320      	movs	r3, #32
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2310      	movs	r3, #16
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	2308      	movs	r3, #8
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2304      	movs	r3, #4
 8001198:	2202      	movs	r2, #2
 800119a:	2101      	movs	r1, #1
 800119c:	4829      	ldr	r0, [pc, #164]	; (8001244 <main+0xc8>)
 800119e:	f7ff fa0d 	bl	80005bc <LiquidCrystal>
				GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a2:	f000 f869 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a6:	f000 fae3 	bl	8001770 <MX_GPIO_Init>
  MX_ETH_Init();
 80011aa:	f000 f8cd 	bl	8001348 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80011ae:	f000 fa81 	bl	80016b4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80011b2:	f000 faaf 	bl	8001714 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80011b6:	f000 f961 	bl	800147c <MX_TIM3_Init>
  MX_TIM2_Init();
 80011ba:	f000 f913 	bl	80013e4 <MX_TIM2_Init>
  MX_TIM4_Init();
 80011be:	f000 f9b7 	bl	8001530 <MX_TIM4_Init>
  MX_TIM5_Init();
 80011c2:	f000 fa27 	bl	8001614 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80011c6:	2108      	movs	r1, #8
 80011c8:	481f      	ldr	r0, [pc, #124]	; (8001248 <main+0xcc>)
 80011ca:	f003 f9cf 	bl	800456c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 80011ce:	481f      	ldr	r0, [pc, #124]	; (800124c <main+0xd0>)
 80011d0:	f003 f8fc 	bl	80043cc <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80011d4:	2100      	movs	r1, #0
 80011d6:	481e      	ldr	r0, [pc, #120]	; (8001250 <main+0xd4>)
 80011d8:	f003 fb24 	bl	8004824 <HAL_TIM_IC_Start_IT>


	//uruchomienie przerwania od otrzymania wiadomosci z terminala
	HAL_UART_Receive_IT(&huart3, (uint8_t*) &rxBuffer[rxIndex], 1);
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <main+0xd8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <main+0xdc>)
 80011e2:	4413      	add	r3, r2
 80011e4:	2201      	movs	r2, #1
 80011e6:	4619      	mov	r1, r3
 80011e8:	481c      	ldr	r0, [pc, #112]	; (800125c <main+0xe0>)
 80011ea:	f004 fe49 	bl	8005e80 <HAL_UART_Receive_IT>


	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 10);

	//jacek
	HAL_TIM_Base_Start_IT(&htim5);
 80011ee:	481c      	ldr	r0, [pc, #112]	; (8001260 <main+0xe4>)
 80011f0:	f003 f8ec 	bl	80043cc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (tim5_tick) {
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <main+0xe8>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0fb      	beq.n	80011f4 <main+0x78>
					if (clear_screan_flag) {
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <main+0xec>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d004      	beq.n	800120e <main+0x92>
						clear();
 8001204:	f7ff fc38 	bl	8000a78 <clear>
						clear_screan_flag = 0;
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <main+0xec>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
					}

					switch (screen_number) {
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <main+0xf0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d002      	beq.n	800121c <main+0xa0>
 8001216:	2b01      	cmp	r3, #1
 8001218:	d00c      	beq.n	8001234 <main+0xb8>
						break;
					case 1:
						Autorzy();
						break;
					default:
						break;
 800121a:	e00e      	b.n	800123a <main+0xbe>
						test_rpm = (measuredValue);
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <main+0xf4>)
 800121e:	edd3 7a00 	vldr	s15, [r3]
 8001222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001226:	ee17 2a90 	vmov	r2, s15
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <main+0xf8>)
 800122c:	601a      	str	r2, [r3, #0]
						ShowInfo();
 800122e:	f7ff ff55 	bl	80010dc <ShowInfo>
						break;
 8001232:	e002      	b.n	800123a <main+0xbe>
						Autorzy();
 8001234:	f7ff ff72 	bl	800111c <Autorzy>
						break;
 8001238:	bf00      	nop
					}
					tim5_tick = 0;
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <main+0xe8>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
		if (tim5_tick) {
 8001240:	e7d8      	b.n	80011f4 <main+0x78>
 8001242:	bf00      	nop
 8001244:	40020c00 	.word	0x40020c00
 8001248:	20000324 	.word	0x20000324
 800124c:	200002d8 	.word	0x200002d8
 8001250:	20000370 	.word	0x20000370
 8001254:	20000a00 	.word	0x20000a00
 8001258:	200009c0 	.word	0x200009c0
 800125c:	20000408 	.word	0x20000408
 8001260:	200003bc 	.word	0x200003bc
 8001264:	20000a08 	.word	0x20000a08
 8001268:	20000010 	.word	0x20000010
 800126c:	20000a0c 	.word	0x20000a0c
 8001270:	200009a8 	.word	0x200009a8
 8001274:	20000a10 	.word	0x20000a10

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	; 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	2230      	movs	r2, #48	; 0x30
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f006 fb46 	bl	8007918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800129c:	f001 ff74 	bl	8003188 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <SystemClock_Config+0xc8>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	4a26      	ldr	r2, [pc, #152]	; (8001340 <SystemClock_Config+0xc8>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012aa:	6413      	str	r3, [r2, #64]	; 0x40
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <SystemClock_Config+0xc8>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <SystemClock_Config+0xcc>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012c0:	4a20      	ldr	r2, [pc, #128]	; (8001344 <SystemClock_Config+0xcc>)
 80012c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <SystemClock_Config+0xcc>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d4:	2301      	movs	r3, #1
 80012d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012de:	2302      	movs	r3, #2
 80012e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012e8:	2304      	movs	r3, #4
 80012ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80012ec:	2348      	movs	r3, #72	; 0x48
 80012ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f0:	2302      	movs	r3, #2
 80012f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80012f4:	2303      	movs	r3, #3
 80012f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f8:	f107 0320 	add.w	r3, r7, #32
 80012fc:	4618      	mov	r0, r3
 80012fe:	f001 ff53 	bl	80031a8 <HAL_RCC_OscConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001308:	f000 fb1c 	bl	8001944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130c:	230f      	movs	r3, #15
 800130e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001310:	2302      	movs	r3, #2
 8001312:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	2102      	movs	r1, #2
 8001328:	4618      	mov	r0, r3
 800132a:	f002 f9e1 	bl	80036f0 <HAL_RCC_ClockConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001334:	f000 fb06 	bl	8001944 <Error_Handler>
  }
}
 8001338:	bf00      	nop
 800133a:	3750      	adds	r7, #80	; 0x50
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800
 8001344:	40007000 	.word	0x40007000

08001348 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <MX_ETH_Init+0x84>)
 800134e:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <MX_ETH_Init+0x88>)
 8001350:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <MX_ETH_Init+0x8c>)
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001358:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <MX_ETH_Init+0x8c>)
 800135a:	2280      	movs	r2, #128	; 0x80
 800135c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <MX_ETH_Init+0x8c>)
 8001360:	22e1      	movs	r2, #225	; 0xe1
 8001362:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <MX_ETH_Init+0x8c>)
 8001366:	2200      	movs	r2, #0
 8001368:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <MX_ETH_Init+0x8c>)
 800136c:	2200      	movs	r2, #0
 800136e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_ETH_Init+0x8c>)
 8001372:	2200      	movs	r2, #0
 8001374:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_ETH_Init+0x84>)
 8001378:	4a16      	ldr	r2, [pc, #88]	; (80013d4 <MX_ETH_Init+0x8c>)
 800137a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_ETH_Init+0x84>)
 800137e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001382:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_ETH_Init+0x84>)
 8001386:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <MX_ETH_Init+0x90>)
 8001388:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <MX_ETH_Init+0x84>)
 800138c:	4a13      	ldr	r2, [pc, #76]	; (80013dc <MX_ETH_Init+0x94>)
 800138e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_ETH_Init+0x84>)
 8001392:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001396:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <MX_ETH_Init+0x84>)
 800139a:	f001 f877 	bl	800248c <HAL_ETH_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80013a4:	f000 face 	bl	8001944 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80013a8:	2238      	movs	r2, #56	; 0x38
 80013aa:	2100      	movs	r1, #0
 80013ac:	480c      	ldr	r0, [pc, #48]	; (80013e0 <MX_ETH_Init+0x98>)
 80013ae:	f006 fab3 	bl	8007918 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_ETH_Init+0x98>)
 80013b4:	2221      	movs	r2, #33	; 0x21
 80013b6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_ETH_Init+0x98>)
 80013ba:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80013be:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <MX_ETH_Init+0x98>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000228 	.word	0x20000228
 80013d0:	40028000 	.word	0x40028000
 80013d4:	20000a18 	.word	0x20000a18
 80013d8:	20000110 	.word	0x20000110
 80013dc:	20000070 	.word	0x20000070
 80013e0:	200001f0 	.word	0x200001f0

080013e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0310 	add.w	r3, r7, #16
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001402:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <MX_TIM2_Init+0x94>)
 8001404:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001408:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800140a:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <MX_TIM2_Init+0x94>)
 800140c:	2247      	movs	r2, #71	; 0x47
 800140e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <MX_TIM2_Init+0x94>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001416:	4b18      	ldr	r3, [pc, #96]	; (8001478 <MX_TIM2_Init+0x94>)
 8001418:	2263      	movs	r2, #99	; 0x63
 800141a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <MX_TIM2_Init+0x94>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <MX_TIM2_Init+0x94>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001428:	4813      	ldr	r0, [pc, #76]	; (8001478 <MX_TIM2_Init+0x94>)
 800142a:	f002 ff77 	bl	800431c <HAL_TIM_Base_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001434:	f000 fa86 	bl	8001944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	4619      	mov	r1, r3
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <MX_TIM2_Init+0x94>)
 8001446:	f003 fe0d 	bl	8005064 <HAL_TIM_ConfigClockSource>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001450:	f000 fa78 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_TIM2_Init+0x94>)
 8001462:	f004 fc13 	bl	8005c8c <HAL_TIMEx_MasterConfigSynchronization>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800146c:	f000 fa6a 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200002d8 	.word	0x200002d8

0800147c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148e:	463b      	mov	r3, r7
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
 800149c:	615a      	str	r2, [r3, #20]
 800149e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014a0:	4b21      	ldr	r3, [pc, #132]	; (8001528 <MX_TIM3_Init+0xac>)
 80014a2:	4a22      	ldr	r2, [pc, #136]	; (800152c <MX_TIM3_Init+0xb0>)
 80014a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <MX_TIM3_Init+0xac>)
 80014a8:	2247      	movs	r2, #71	; 0x47
 80014aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <MX_TIM3_Init+0xac>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39;
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <MX_TIM3_Init+0xac>)
 80014b4:	2227      	movs	r2, #39	; 0x27
 80014b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <MX_TIM3_Init+0xac>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <MX_TIM3_Init+0xac>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014c4:	4818      	ldr	r0, [pc, #96]	; (8001528 <MX_TIM3_Init+0xac>)
 80014c6:	f002 fff9 	bl	80044bc <HAL_TIM_PWM_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80014d0:	f000 fa38 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	4811      	ldr	r0, [pc, #68]	; (8001528 <MX_TIM3_Init+0xac>)
 80014e4:	f004 fbd2 	bl	8005c8c <HAL_TIMEx_MasterConfigSynchronization>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80014ee:	f000 fa29 	bl	8001944 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f2:	2360      	movs	r3, #96	; 0x60
 80014f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 20;
 80014f6:	2314      	movs	r3, #20
 80014f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001502:	463b      	mov	r3, r7
 8001504:	2208      	movs	r2, #8
 8001506:	4619      	mov	r1, r3
 8001508:	4807      	ldr	r0, [pc, #28]	; (8001528 <MX_TIM3_Init+0xac>)
 800150a:	f003 fc97 	bl	8004e3c <HAL_TIM_PWM_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001514:	f000 fa16 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <MX_TIM3_Init+0xac>)
 800151a:	f000 fb97 	bl	8001c4c <HAL_TIM_MspPostInit>

}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000324 	.word	0x20000324
 800152c:	40000400 	.word	0x40000400

08001530 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08c      	sub	sp, #48	; 0x30
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001536:	f107 0320 	add.w	r3, r7, #32
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800155c:	4b2b      	ldr	r3, [pc, #172]	; (800160c <MX_TIM4_Init+0xdc>)
 800155e:	4a2c      	ldr	r2, [pc, #176]	; (8001610 <MX_TIM4_Init+0xe0>)
 8001560:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001562:	4b2a      	ldr	r3, [pc, #168]	; (800160c <MX_TIM4_Init+0xdc>)
 8001564:	2247      	movs	r2, #71	; 0x47
 8001566:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001568:	4b28      	ldr	r3, [pc, #160]	; (800160c <MX_TIM4_Init+0xdc>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 800156e:	4b27      	ldr	r3, [pc, #156]	; (800160c <MX_TIM4_Init+0xdc>)
 8001570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001574:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001576:	4b25      	ldr	r3, [pc, #148]	; (800160c <MX_TIM4_Init+0xdc>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157c:	4b23      	ldr	r3, [pc, #140]	; (800160c <MX_TIM4_Init+0xdc>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001582:	4822      	ldr	r0, [pc, #136]	; (800160c <MX_TIM4_Init+0xdc>)
 8001584:	f002 feca 	bl	800431c <HAL_TIM_Base_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800158e:	f000 f9d9 	bl	8001944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001596:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001598:	f107 0320 	add.w	r3, r7, #32
 800159c:	4619      	mov	r1, r3
 800159e:	481b      	ldr	r0, [pc, #108]	; (800160c <MX_TIM4_Init+0xdc>)
 80015a0:	f003 fd60 	bl	8005064 <HAL_TIM_ConfigClockSource>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80015aa:	f000 f9cb 	bl	8001944 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80015ae:	4817      	ldr	r0, [pc, #92]	; (800160c <MX_TIM4_Init+0xdc>)
 80015b0:	f003 f8d6 	bl	8004760 <HAL_TIM_IC_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80015ba:	f000 f9c3 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	480f      	ldr	r0, [pc, #60]	; (800160c <MX_TIM4_Init+0xdc>)
 80015ce:	f004 fb5d 	bl	8005c8c <HAL_TIMEx_MasterConfigSynchronization>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80015d8:	f000 f9b4 	bl	8001944 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015e0:	2301      	movs	r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	2200      	movs	r2, #0
 80015f0:	4619      	mov	r1, r3
 80015f2:	4806      	ldr	r0, [pc, #24]	; (800160c <MX_TIM4_Init+0xdc>)
 80015f4:	f003 fb85 	bl	8004d02 <HAL_TIM_IC_ConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80015fe:	f000 f9a1 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	3730      	adds	r7, #48	; 0x30
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000370 	.word	0x20000370
 8001610:	40000800 	.word	0x40000800

08001614 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001632:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <MX_TIM5_Init+0x98>)
 8001634:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <MX_TIM5_Init+0x9c>)
 8001636:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 14399;
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <MX_TIM5_Init+0x98>)
 800163a:	f643 023f 	movw	r2, #14399	; 0x383f
 800163e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <MX_TIM5_Init+0x98>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 7999;
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <MX_TIM5_Init+0x98>)
 8001648:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800164c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <MX_TIM5_Init+0x98>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <MX_TIM5_Init+0x98>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800165a:	4814      	ldr	r0, [pc, #80]	; (80016ac <MX_TIM5_Init+0x98>)
 800165c:	f002 fe5e 	bl	800431c <HAL_TIM_Base_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001666:	f000 f96d 	bl	8001944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	4619      	mov	r1, r3
 8001676:	480d      	ldr	r0, [pc, #52]	; (80016ac <MX_TIM5_Init+0x98>)
 8001678:	f003 fcf4 	bl	8005064 <HAL_TIM_ConfigClockSource>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001682:	f000 f95f 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	4619      	mov	r1, r3
 8001692:	4806      	ldr	r0, [pc, #24]	; (80016ac <MX_TIM5_Init+0x98>)
 8001694:	f004 fafa 	bl	8005c8c <HAL_TIMEx_MasterConfigSynchronization>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800169e:	f000 f951 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	3720      	adds	r7, #32
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200003bc 	.word	0x200003bc
 80016b0:	40000c00 	.word	0x40000c00

080016b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016ba:	4a15      	ldr	r2, [pc, #84]	; (8001710 <MX_USART3_UART_Init+0x5c>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016f8:	f004 fb74 	bl	8005de4 <HAL_UART_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001702:	f000 f91f 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000408 	.word	0x20000408
 8001710:	40004800 	.word	0x40004800

08001714 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800171a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800171e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001722:	2206      	movs	r2, #6
 8001724:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001728:	2202      	movs	r2, #2
 800172a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001734:	2202      	movs	r2, #2
 8001736:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800173a:	2201      	movs	r2, #1
 800173c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800174c:	2201      	movs	r2, #1
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001756:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001758:	f001 fbce 	bl	8002ef8 <HAL_PCD_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001762:	f000 f8ef 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000490 	.word	0x20000490

08001770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	; 0x30
 8001774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001786:	4b6a      	ldr	r3, [pc, #424]	; (8001930 <MX_GPIO_Init+0x1c0>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a69      	ldr	r2, [pc, #420]	; (8001930 <MX_GPIO_Init+0x1c0>)
 800178c:	f043 0310 	orr.w	r3, r3, #16
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b67      	ldr	r3, [pc, #412]	; (8001930 <MX_GPIO_Init+0x1c0>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179e:	4b64      	ldr	r3, [pc, #400]	; (8001930 <MX_GPIO_Init+0x1c0>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a63      	ldr	r2, [pc, #396]	; (8001930 <MX_GPIO_Init+0x1c0>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b61      	ldr	r3, [pc, #388]	; (8001930 <MX_GPIO_Init+0x1c0>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017b6:	4b5e      	ldr	r3, [pc, #376]	; (8001930 <MX_GPIO_Init+0x1c0>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a5d      	ldr	r2, [pc, #372]	; (8001930 <MX_GPIO_Init+0x1c0>)
 80017bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b5b      	ldr	r3, [pc, #364]	; (8001930 <MX_GPIO_Init+0x1c0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	4b58      	ldr	r3, [pc, #352]	; (8001930 <MX_GPIO_Init+0x1c0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a57      	ldr	r2, [pc, #348]	; (8001930 <MX_GPIO_Init+0x1c0>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b55      	ldr	r3, [pc, #340]	; (8001930 <MX_GPIO_Init+0x1c0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	4b52      	ldr	r3, [pc, #328]	; (8001930 <MX_GPIO_Init+0x1c0>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a51      	ldr	r2, [pc, #324]	; (8001930 <MX_GPIO_Init+0x1c0>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b4f      	ldr	r3, [pc, #316]	; (8001930 <MX_GPIO_Init+0x1c0>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017fe:	4b4c      	ldr	r3, [pc, #304]	; (8001930 <MX_GPIO_Init+0x1c0>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a4b      	ldr	r2, [pc, #300]	; (8001930 <MX_GPIO_Init+0x1c0>)
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b49      	ldr	r3, [pc, #292]	; (8001930 <MX_GPIO_Init+0x1c0>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001816:	4b46      	ldr	r3, [pc, #280]	; (8001930 <MX_GPIO_Init+0x1c0>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a45      	ldr	r2, [pc, #276]	; (8001930 <MX_GPIO_Init+0x1c0>)
 800181c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b43      	ldr	r3, [pc, #268]	; (8001930 <MX_GPIO_Init+0x1c0>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	f244 0181 	movw	r1, #16513	; 0x4081
 8001834:	483f      	ldr	r0, [pc, #252]	; (8001934 <MX_GPIO_Init+0x1c4>)
 8001836:	f001 fb13 	bl	8002e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	2140      	movs	r1, #64	; 0x40
 800183e:	483e      	ldr	r0, [pc, #248]	; (8001938 <MX_GPIO_Init+0x1c8>)
 8001840:	f001 fb0e 	bl	8002e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MODE_Btn_Pin */
  GPIO_InitStruct.Pin = MODE_Btn_Pin;
 8001844:	2308      	movs	r3, #8
 8001846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001848:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800184c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800184e:	2302      	movs	r3, #2
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MODE_Btn_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	4619      	mov	r1, r3
 8001858:	4838      	ldr	r0, [pc, #224]	; (800193c <MX_GPIO_Init+0x1cc>)
 800185a:	f001 f93d 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_Btn_Pin RPM_PC0_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin|RPM_PC0_Pin;
 800185e:	f242 0301 	movw	r3, #8193	; 0x2001
 8001862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001864:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186e:	f107 031c 	add.w	r3, r7, #28
 8001872:	4619      	mov	r1, r3
 8001874:	4832      	ldr	r0, [pc, #200]	; (8001940 <MX_GPIO_Init+0x1d0>)
 8001876:	f001 f92f 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800187a:	f244 0381 	movw	r3, #16513	; 0x4081
 800187e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	4619      	mov	r1, r3
 8001892:	4828      	ldr	r0, [pc, #160]	; (8001934 <MX_GPIO_Init+0x1c4>)
 8001894:	f001 f920 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1_RPM_Pin */
  GPIO_InitStruct.Pin = PB1_RPM_Pin;
 8001898:	2302      	movs	r3, #2
 800189a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800189c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PB1_RPM_GPIO_Port, &GPIO_InitStruct);
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	4619      	mov	r1, r3
 80018ac:	4821      	ldr	r0, [pc, #132]	; (8001934 <MX_GPIO_Init+0x1c4>)
 80018ae:	f001 f913 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80018b2:	2340      	movs	r3, #64	; 0x40
 80018b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	4619      	mov	r1, r3
 80018c8:	481b      	ldr	r0, [pc, #108]	; (8001938 <MX_GPIO_Init+0x1c8>)
 80018ca:	f001 f905 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d2:	2300      	movs	r3, #0
 80018d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	4619      	mov	r1, r3
 80018e0:	4815      	ldr	r0, [pc, #84]	; (8001938 <MX_GPIO_Init+0x1c8>)
 80018e2:	f001 f8f9 	bl	8002ad8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	2006      	movs	r0, #6
 80018ec:	f000 fd05 	bl	80022fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018f0:	2006      	movs	r0, #6
 80018f2:	f000 fd1e 	bl	8002332 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	2007      	movs	r0, #7
 80018fc:	f000 fcfd 	bl	80022fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001900:	2007      	movs	r0, #7
 8001902:	f000 fd16 	bl	8002332 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	2009      	movs	r0, #9
 800190c:	f000 fcf5 	bl	80022fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001910:	2009      	movs	r0, #9
 8001912:	f000 fd0e 	bl	8002332 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	2028      	movs	r0, #40	; 0x28
 800191c:	f000 fced 	bl	80022fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001920:	2028      	movs	r0, #40	; 0x28
 8001922:	f000 fd06 	bl	8002332 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001926:	bf00      	nop
 8001928:	3730      	adds	r7, #48	; 0x30
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40020400 	.word	0x40020400
 8001938:	40021800 	.word	0x40021800
 800193c:	40021000 	.word	0x40021000
 8001940:	40020800 	.word	0x40020800

08001944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001948:	b672      	cpsid	i
}
 800194a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800194c:	e7fe      	b.n	800194c <Error_Handler+0x8>
	...

08001950 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_MspInit+0x44>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <HAL_MspInit+0x44>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001960:	6413      	str	r3, [r2, #64]	; 0x40
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_MspInit+0x44>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_MspInit+0x44>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	4a08      	ldr	r2, [pc, #32]	; (8001994 <HAL_MspInit+0x44>)
 8001974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001978:	6453      	str	r3, [r2, #68]	; 0x44
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_MspInit+0x44>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800

08001998 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08e      	sub	sp, #56	; 0x38
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a4e      	ldr	r2, [pc, #312]	; (8001af0 <HAL_ETH_MspInit+0x158>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	f040 8096 	bne.w	8001ae8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80019bc:	4b4d      	ldr	r3, [pc, #308]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	4a4c      	ldr	r2, [pc, #304]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 80019c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019c6:	6313      	str	r3, [r2, #48]	; 0x30
 80019c8:	4b4a      	ldr	r3, [pc, #296]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d0:	623b      	str	r3, [r7, #32]
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	4b47      	ldr	r3, [pc, #284]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	4a46      	ldr	r2, [pc, #280]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 80019da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019de:	6313      	str	r3, [r2, #48]	; 0x30
 80019e0:	4b44      	ldr	r3, [pc, #272]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	4b41      	ldr	r3, [pc, #260]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	4a40      	ldr	r2, [pc, #256]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 80019f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019f6:	6313      	str	r3, [r2, #48]	; 0x30
 80019f8:	4b3e      	ldr	r3, [pc, #248]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a04:	4b3b      	ldr	r3, [pc, #236]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	4a3a      	ldr	r2, [pc, #232]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a10:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1c:	4b35      	ldr	r3, [pc, #212]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	4a34      	ldr	r2, [pc, #208]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6313      	str	r3, [r2, #48]	; 0x30
 8001a28:	4b32      	ldr	r3, [pc, #200]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a34:	4b2f      	ldr	r3, [pc, #188]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	4a2e      	ldr	r2, [pc, #184]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 8001a3a:	f043 0302 	orr.w	r3, r3, #2
 8001a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a40:	4b2c      	ldr	r3, [pc, #176]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a4c:	4b29      	ldr	r3, [pc, #164]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	4a28      	ldr	r2, [pc, #160]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 8001a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a56:	6313      	str	r3, [r2, #48]	; 0x30
 8001a58:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <HAL_ETH_MspInit+0x15c>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001a64:	2332      	movs	r3, #50	; 0x32
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a74:	230b      	movs	r3, #11
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	481e      	ldr	r0, [pc, #120]	; (8001af8 <HAL_ETH_MspInit+0x160>)
 8001a80:	f001 f82a 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001a84:	2386      	movs	r3, #134	; 0x86
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a90:	2303      	movs	r3, #3
 8001a92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a94:	230b      	movs	r3, #11
 8001a96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4817      	ldr	r0, [pc, #92]	; (8001afc <HAL_ETH_MspInit+0x164>)
 8001aa0:	f001 f81a 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ab6:	230b      	movs	r3, #11
 8001ab8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480f      	ldr	r0, [pc, #60]	; (8001b00 <HAL_ETH_MspInit+0x168>)
 8001ac2:	f001 f809 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001ac6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ad8:	230b      	movs	r3, #11
 8001ada:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4808      	ldr	r0, [pc, #32]	; (8001b04 <HAL_ETH_MspInit+0x16c>)
 8001ae4:	f000 fff8 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001ae8:	bf00      	nop
 8001aea:	3738      	adds	r7, #56	; 0x38
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40028000 	.word	0x40028000
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020800 	.word	0x40020800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020400 	.word	0x40020400
 8001b04:	40021800 	.word	0x40021800

08001b08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08c      	sub	sp, #48	; 0x30
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b28:	d114      	bne.n	8001b54 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b2a:	4b34      	ldr	r3, [pc, #208]	; (8001bfc <HAL_TIM_Base_MspInit+0xf4>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	4a33      	ldr	r2, [pc, #204]	; (8001bfc <HAL_TIM_Base_MspInit+0xf4>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6413      	str	r3, [r2, #64]	; 0x40
 8001b36:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <HAL_TIM_Base_MspInit+0xf4>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	61bb      	str	r3, [r7, #24]
 8001b40:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	201c      	movs	r0, #28
 8001b48:	f000 fbd7 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b4c:	201c      	movs	r0, #28
 8001b4e:	f000 fbf0 	bl	8002332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001b52:	e04f      	b.n	8001bf4 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM4)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a29      	ldr	r2, [pc, #164]	; (8001c00 <HAL_TIM_Base_MspInit+0xf8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d131      	bne.n	8001bc2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b5e:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_TIM_Base_MspInit+0xf4>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a26      	ldr	r2, [pc, #152]	; (8001bfc <HAL_TIM_Base_MspInit+0xf4>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6a:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_TIM_Base_MspInit+0xf4>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b76:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_TIM_Base_MspInit+0xf4>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a20      	ldr	r2, [pc, #128]	; (8001bfc <HAL_TIM_Base_MspInit+0xf4>)
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <HAL_TIM_Base_MspInit+0xf4>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4816      	ldr	r0, [pc, #88]	; (8001c04 <HAL_TIM_Base_MspInit+0xfc>)
 8001bac:	f000 ff94 	bl	8002ad8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	201e      	movs	r0, #30
 8001bb6:	f000 fba0 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bba:	201e      	movs	r0, #30
 8001bbc:	f000 fbb9 	bl	8002332 <HAL_NVIC_EnableIRQ>
}
 8001bc0:	e018      	b.n	8001bf4 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM5)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a10      	ldr	r2, [pc, #64]	; (8001c08 <HAL_TIM_Base_MspInit+0x100>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d113      	bne.n	8001bf4 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_TIM_Base_MspInit+0xf4>)
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_TIM_Base_MspInit+0xf4>)
 8001bd2:	f043 0308 	orr.w	r3, r3, #8
 8001bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_TIM_Base_MspInit+0xf4>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	2032      	movs	r0, #50	; 0x32
 8001bea:	f000 fb86 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001bee:	2032      	movs	r0, #50	; 0x32
 8001bf0:	f000 fb9f 	bl	8002332 <HAL_NVIC_EnableIRQ>
}
 8001bf4:	bf00      	nop
 8001bf6:	3730      	adds	r7, #48	; 0x30
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40000800 	.word	0x40000800
 8001c04:	40020c00 	.word	0x40020c00
 8001c08:	40000c00 	.word	0x40000c00

08001c0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <HAL_TIM_PWM_MspInit+0x38>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d10b      	bne.n	8001c36 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40000400 	.word	0x40000400
 8001c48:	40023800 	.word	0x40023800

08001c4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <HAL_TIM_MspPostInit+0x64>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d11c      	bne.n	8001ca8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_TIM_MspPostInit+0x68>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <HAL_TIM_MspPostInit+0x68>)
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <HAL_TIM_MspPostInit+0x68>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <HAL_TIM_MspPostInit+0x6c>)
 8001ca4:	f000 ff18 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ca8:	bf00      	nop
 8001caa:	3720      	adds	r7, #32
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020800 	.word	0x40020800

08001cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b0aa      	sub	sp, #168	; 0xa8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd4:	f107 0310 	add.w	r3, r7, #16
 8001cd8:	2284      	movs	r2, #132	; 0x84
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f005 fe1b 	bl	8007918 <memset>
  if(huart->Instance==USART3)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a26      	ldr	r2, [pc, #152]	; (8001d80 <HAL_UART_MspInit+0xc4>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d144      	bne.n	8001d76 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cf0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cf6:	f107 0310 	add.w	r3, r7, #16
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f001 ff1e 	bl	8003b3c <HAL_RCCEx_PeriphCLKConfig>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d06:	f7ff fe1d 	bl	8001944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <HAL_UART_MspInit+0xc8>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a1d      	ldr	r2, [pc, #116]	; (8001d84 <HAL_UART_MspInit+0xc8>)
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <HAL_UART_MspInit+0xc8>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d22:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <HAL_UART_MspInit+0xc8>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a17      	ldr	r2, [pc, #92]	; (8001d84 <HAL_UART_MspInit+0xc8>)
 8001d28:	f043 0308 	orr.w	r3, r3, #8
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <HAL_UART_MspInit+0xc8>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d54:	2307      	movs	r3, #7
 8001d56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d5a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4809      	ldr	r0, [pc, #36]	; (8001d88 <HAL_UART_MspInit+0xcc>)
 8001d62:	f000 feb9 	bl	8002ad8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2027      	movs	r0, #39	; 0x27
 8001d6c:	f000 fac5 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d70:	2027      	movs	r0, #39	; 0x27
 8001d72:	f000 fade 	bl	8002332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d76:	bf00      	nop
 8001d78:	37a8      	adds	r7, #168	; 0xa8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40004800 	.word	0x40004800
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020c00 	.word	0x40020c00

08001d8c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b0ac      	sub	sp, #176	; 0xb0
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da4:	f107 0318 	add.w	r3, r7, #24
 8001da8:	2284      	movs	r2, #132	; 0x84
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f005 fdb3 	bl	8007918 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dba:	d159      	bne.n	8001e70 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001dbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001dc0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dc8:	f107 0318 	add.w	r3, r7, #24
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f001 feb5 	bl	8003b3c <HAL_RCCEx_PeriphCLKConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001dd8:	f7ff fdb4 	bl	8001944 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ddc:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <HAL_PCD_MspInit+0xec>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	4a25      	ldr	r2, [pc, #148]	; (8001e78 <HAL_PCD_MspInit+0xec>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6313      	str	r3, [r2, #48]	; 0x30
 8001de8:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <HAL_PCD_MspInit+0xec>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001df4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001df8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e0e:	230a      	movs	r3, #10
 8001e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4818      	ldr	r0, [pc, #96]	; (8001e7c <HAL_PCD_MspInit+0xf0>)
 8001e1c:	f000 fe5c 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4810      	ldr	r0, [pc, #64]	; (8001e7c <HAL_PCD_MspInit+0xf0>)
 8001e3c:	f000 fe4c 	bl	8002ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e40:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <HAL_PCD_MspInit+0xec>)
 8001e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e44:	4a0c      	ldr	r2, [pc, #48]	; (8001e78 <HAL_PCD_MspInit+0xec>)
 8001e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4a:	6353      	str	r3, [r2, #52]	; 0x34
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <HAL_PCD_MspInit+0xec>)
 8001e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <HAL_PCD_MspInit+0xec>)
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5c:	4a06      	ldr	r2, [pc, #24]	; (8001e78 <HAL_PCD_MspInit+0xec>)
 8001e5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e62:	6453      	str	r3, [r2, #68]	; 0x44
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <HAL_PCD_MspInit+0xec>)
 8001e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e70:	bf00      	nop
 8001e72:	37b0      	adds	r7, #176	; 0xb0
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020000 	.word	0x40020000

08001e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <NMI_Handler+0x4>

08001e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e8a:	e7fe      	b.n	8001e8a <HardFault_Handler+0x4>

08001e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <MemManage_Handler+0x4>

08001e92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e96:	e7fe      	b.n	8001e96 <BusFault_Handler+0x4>

08001e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <UsageFault_Handler+0x4>

08001e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ecc:	f000 f8f6 	bl	80020bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPM_PC0_Pin);
 8001ed8:	2001      	movs	r0, #1
 8001eda:	f000 fff5 	bl	8002ec8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB1_RPM_Pin);
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	f000 ffee 	bl	8002ec8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_Btn_Pin);
 8001ef4:	2008      	movs	r0, #8
 8001ef6:	f000 ffe7 	bl	8002ec8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <TIM2_IRQHandler+0x10>)
 8001f06:	f002 fddd 	bl	8004ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200002d8 	.word	0x200002d8

08001f14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f18:	4802      	ldr	r0, [pc, #8]	; (8001f24 <TIM4_IRQHandler+0x10>)
 8001f1a:	f002 fdd3 	bl	8004ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000370 	.word	0x20000370

08001f28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <USART3_IRQHandler+0x10>)
 8001f2e:	f003 ffeb 	bl	8005f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000408 	.word	0x20000408

08001f3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001f40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f44:	f000 ffc0 	bl	8002ec8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <TIM5_IRQHandler+0x10>)
 8001f52:	f002 fdb7 	bl	8004ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200003bc 	.word	0x200003bc

08001f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <_sbrk+0x5c>)
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <_sbrk+0x60>)
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <_sbrk+0x64>)
 8001f7e:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <_sbrk+0x68>)
 8001f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <_sbrk+0x64>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d207      	bcs.n	8001fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f90:	f005 fcca 	bl	8007928 <__errno>
 8001f94:	4603      	mov	r3, r0
 8001f96:	220c      	movs	r2, #12
 8001f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	e009      	b.n	8001fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <_sbrk+0x64>)
 8001fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20050000 	.word	0x20050000
 8001fc0:	00000400 	.word	0x00000400
 8001fc4:	20000a20 	.word	0x20000a20
 8001fc8:	20000b70 	.word	0x20000b70

08001fcc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <SystemInit+0x20>)
 8001fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd6:	4a05      	ldr	r2, [pc, #20]	; (8001fec <SystemInit+0x20>)
 8001fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002028 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ff4:	480d      	ldr	r0, [pc, #52]	; (800202c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ff6:	490e      	ldr	r1, [pc, #56]	; (8002030 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ff8:	4a0e      	ldr	r2, [pc, #56]	; (8002034 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ffc:	e002      	b.n	8002004 <LoopCopyDataInit>

08001ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002002:	3304      	adds	r3, #4

08002004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002008:	d3f9      	bcc.n	8001ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800200a:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800200c:	4c0b      	ldr	r4, [pc, #44]	; (800203c <LoopFillZerobss+0x26>)
  movs r3, #0
 800200e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002010:	e001      	b.n	8002016 <LoopFillZerobss>

08002012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002014:	3204      	adds	r2, #4

08002016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002018:	d3fb      	bcc.n	8002012 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800201a:	f7ff ffd7 	bl	8001fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800201e:	f005 fc89 	bl	8007934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002022:	f7ff f8ab 	bl	800117c <main>
  bx  lr    
 8002026:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002028:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800202c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002030:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002034:	08008d70 	.word	0x08008d70
  ldr r2, =_sbss
 8002038:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 800203c:	20000b70 	.word	0x20000b70

08002040 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002040:	e7fe      	b.n	8002040 <ADC_IRQHandler>

08002042 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002046:	2003      	movs	r0, #3
 8002048:	f000 f94c 	bl	80022e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800204c:	2000      	movs	r0, #0
 800204e:	f000 f805 	bl	800205c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002052:	f7ff fc7d 	bl	8001950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_InitTick+0x54>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_InitTick+0x58>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002072:	fbb3 f3f1 	udiv	r3, r3, r1
 8002076:	fbb2 f3f3 	udiv	r3, r2, r3
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f967 	bl	800234e <HAL_SYSTICK_Config>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e00e      	b.n	80020a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b0f      	cmp	r3, #15
 800208e:	d80a      	bhi.n	80020a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002090:	2200      	movs	r2, #0
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f000 f92f 	bl	80022fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800209c:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <HAL_InitTick+0x5c>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e000      	b.n	80020a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000014 	.word	0x20000014
 80020b4:	2000001c 	.word	0x2000001c
 80020b8:	20000018 	.word	0x20000018

080020bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_IncTick+0x20>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_IncTick+0x24>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <HAL_IncTick+0x24>)
 80020ce:	6013      	str	r3, [r2, #0]
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	2000001c 	.word	0x2000001c
 80020e0:	20000a24 	.word	0x20000a24

080020e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return uwTick;
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <HAL_GetTick+0x14>)
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000a24 	.word	0x20000a24

080020fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002104:	f7ff ffee 	bl	80020e4 <HAL_GetTick>
 8002108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d005      	beq.n	8002122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_Delay+0x44>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002122:	bf00      	nop
 8002124:	f7ff ffde 	bl	80020e4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	429a      	cmp	r2, r3
 8002132:	d8f7      	bhi.n	8002124 <HAL_Delay+0x28>
  {
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	2000001c 	.word	0x2000001c

08002144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <__NVIC_SetPriorityGrouping+0x40>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002160:	4013      	ands	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 800216e:	4313      	orrs	r3, r2
 8002170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002172:	4a04      	ldr	r2, [pc, #16]	; (8002184 <__NVIC_SetPriorityGrouping+0x40>)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	60d3      	str	r3, [r2, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00
 8002188:	05fa0000 	.word	0x05fa0000

0800218c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0307 	and.w	r3, r3, #7
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	db0b      	blt.n	80021d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	f003 021f 	and.w	r2, r3, #31
 80021c0:	4907      	ldr	r1, [pc, #28]	; (80021e0 <__NVIC_EnableIRQ+0x38>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	2001      	movs	r0, #1
 80021ca:	fa00 f202 	lsl.w	r2, r0, r2
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000e100 	.word	0xe000e100

080021e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	db0a      	blt.n	800220e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	490c      	ldr	r1, [pc, #48]	; (8002230 <__NVIC_SetPriority+0x4c>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	0112      	lsls	r2, r2, #4
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	440b      	add	r3, r1
 8002208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800220c:	e00a      	b.n	8002224 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4908      	ldr	r1, [pc, #32]	; (8002234 <__NVIC_SetPriority+0x50>)
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	3b04      	subs	r3, #4
 800221c:	0112      	lsls	r2, r2, #4
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	440b      	add	r3, r1
 8002222:	761a      	strb	r2, [r3, #24]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000e100 	.word	0xe000e100
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	; 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f1c3 0307 	rsb	r3, r3, #7
 8002252:	2b04      	cmp	r3, #4
 8002254:	bf28      	it	cs
 8002256:	2304      	movcs	r3, #4
 8002258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3304      	adds	r3, #4
 800225e:	2b06      	cmp	r3, #6
 8002260:	d902      	bls.n	8002268 <NVIC_EncodePriority+0x30>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3b03      	subs	r3, #3
 8002266:	e000      	b.n	800226a <NVIC_EncodePriority+0x32>
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	f04f 32ff 	mov.w	r2, #4294967295
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	401a      	ands	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002280:	f04f 31ff 	mov.w	r1, #4294967295
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	43d9      	mvns	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	4313      	orrs	r3, r2
         );
}
 8002292:	4618      	mov	r0, r3
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b0:	d301      	bcc.n	80022b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00f      	b.n	80022d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <SysTick_Config+0x40>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022be:	210f      	movs	r1, #15
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f7ff ff8e 	bl	80021e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <SysTick_Config+0x40>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ce:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <SysTick_Config+0x40>)
 80022d0:	2207      	movs	r2, #7
 80022d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	e000e010 	.word	0xe000e010

080022e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff29 	bl	8002144 <__NVIC_SetPriorityGrouping>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4603      	mov	r3, r0
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800230c:	f7ff ff3e 	bl	800218c <__NVIC_GetPriorityGrouping>
 8002310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	6978      	ldr	r0, [r7, #20]
 8002318:	f7ff ff8e 	bl	8002238 <NVIC_EncodePriority>
 800231c:	4602      	mov	r2, r0
 800231e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff5d 	bl	80021e4 <__NVIC_SetPriority>
}
 800232a:	bf00      	nop
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800233c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff31 	bl	80021a8 <__NVIC_EnableIRQ>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff ffa2 	bl	80022a0 <SysTick_Config>
 800235c:	4603      	mov	r3, r0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002372:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002374:	f7ff feb6 	bl	80020e4 <HAL_GetTick>
 8002378:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d008      	beq.n	8002398 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2280      	movs	r2, #128	; 0x80
 800238a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e052      	b.n	800243e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0216 	bic.w	r2, r2, #22
 80023a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d103      	bne.n	80023c8 <HAL_DMA_Abort+0x62>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d007      	beq.n	80023d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0208 	bic.w	r2, r2, #8
 80023d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0201 	bic.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e8:	e013      	b.n	8002412 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ea:	f7ff fe7b 	bl	80020e4 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b05      	cmp	r3, #5
 80023f6:	d90c      	bls.n	8002412 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2220      	movs	r2, #32
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2203      	movs	r2, #3
 8002402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e015      	b.n	800243e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1e4      	bne.n	80023ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	223f      	movs	r2, #63	; 0x3f
 8002426:	409a      	lsls	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d004      	beq.n	8002464 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2280      	movs	r2, #128	; 0x80
 800245e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e00c      	b.n	800247e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2205      	movs	r2, #5
 8002468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0201 	bic.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e06a      	b.n	8002574 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d106      	bne.n	80024b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2223      	movs	r2, #35	; 0x23
 80024ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff fa71 	bl	8001998 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b6:	4b31      	ldr	r3, [pc, #196]	; (800257c <HAL_ETH_Init+0xf0>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	4a30      	ldr	r2, [pc, #192]	; (800257c <HAL_ETH_Init+0xf0>)
 80024bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c0:	6453      	str	r3, [r2, #68]	; 0x44
 80024c2:	4b2e      	ldr	r3, [pc, #184]	; (800257c <HAL_ETH_Init+0xf0>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80024ce:	4b2c      	ldr	r3, [pc, #176]	; (8002580 <HAL_ETH_Init+0xf4>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4a2b      	ldr	r2, [pc, #172]	; (8002580 <HAL_ETH_Init+0xf4>)
 80024d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024d8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80024da:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_ETH_Init+0xf4>)
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	4927      	ldr	r1, [pc, #156]	; (8002580 <HAL_ETH_Init+0xf4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80024e8:	4b25      	ldr	r3, [pc, #148]	; (8002580 <HAL_ETH_Init+0xf4>)
 80024ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002502:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002504:	f7ff fdee 	bl	80020e4 <HAL_GetTick>
 8002508:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800250a:	e011      	b.n	8002530 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800250c:	f7ff fdea 	bl	80020e4 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800251a:	d909      	bls.n	8002530 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2204      	movs	r2, #4
 8002520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	22e0      	movs	r2, #224	; 0xe0
 8002528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e021      	b.n	8002574 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1e4      	bne.n	800250c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f958 	bl	80027f8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f9ff 	bl	800294c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fa55 	bl	80029fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	461a      	mov	r2, r3
 800255a:	2100      	movs	r1, #0
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f9bd 	bl	80028dc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2210      	movs	r2, #16
 800256e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40023800 	.word	0x40023800
 8002580:	40013800 	.word	0x40013800

08002584 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4b51      	ldr	r3, [pc, #324]	; (80026e0 <ETH_SetMACConfig+0x15c>)
 800259a:	4013      	ands	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	7c1b      	ldrb	r3, [r3, #16]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d102      	bne.n	80025ac <ETH_SetMACConfig+0x28>
 80025a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80025aa:	e000      	b.n	80025ae <ETH_SetMACConfig+0x2a>
 80025ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	7c5b      	ldrb	r3, [r3, #17]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d102      	bne.n	80025bc <ETH_SetMACConfig+0x38>
 80025b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025ba:	e000      	b.n	80025be <ETH_SetMACConfig+0x3a>
 80025bc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025be:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	7fdb      	ldrb	r3, [r3, #31]
 80025ca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80025cc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	7f92      	ldrb	r2, [r2, #30]
 80025d8:	2a00      	cmp	r2, #0
 80025da:	d102      	bne.n	80025e2 <ETH_SetMACConfig+0x5e>
 80025dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025e0:	e000      	b.n	80025e4 <ETH_SetMACConfig+0x60>
 80025e2:	2200      	movs	r2, #0
                        macconf->Speed |
 80025e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	7f1b      	ldrb	r3, [r3, #28]
 80025ea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80025ec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80025f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	791b      	ldrb	r3, [r3, #4]
 80025f8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80025fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002602:	2a00      	cmp	r2, #0
 8002604:	d102      	bne.n	800260c <ETH_SetMACConfig+0x88>
 8002606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800260a:	e000      	b.n	800260e <ETH_SetMACConfig+0x8a>
 800260c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800260e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	7bdb      	ldrb	r3, [r3, #15]
 8002614:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002616:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800261c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002624:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002626:	4313      	orrs	r3, r2
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800263e:	2001      	movs	r0, #1
 8002640:	f7ff fd5c 	bl	80020fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	f64f 7341 	movw	r3, #65345	; 0xff41
 800265a:	4013      	ands	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002662:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800266a:	2a00      	cmp	r2, #0
 800266c:	d101      	bne.n	8002672 <ETH_SetMACConfig+0xee>
 800266e:	2280      	movs	r2, #128	; 0x80
 8002670:	e000      	b.n	8002674 <ETH_SetMACConfig+0xf0>
 8002672:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002674:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800267a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002682:	2a01      	cmp	r2, #1
 8002684:	d101      	bne.n	800268a <ETH_SetMACConfig+0x106>
 8002686:	2208      	movs	r2, #8
 8002688:	e000      	b.n	800268c <ETH_SetMACConfig+0x108>
 800268a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800268c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002694:	2a01      	cmp	r2, #1
 8002696:	d101      	bne.n	800269c <ETH_SetMACConfig+0x118>
 8002698:	2204      	movs	r2, #4
 800269a:	e000      	b.n	800269e <ETH_SetMACConfig+0x11a>
 800269c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800269e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80026a6:	2a01      	cmp	r2, #1
 80026a8:	d101      	bne.n	80026ae <ETH_SetMACConfig+0x12a>
 80026aa:	2202      	movs	r2, #2
 80026ac:	e000      	b.n	80026b0 <ETH_SetMACConfig+0x12c>
 80026ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026b0:	4313      	orrs	r3, r2
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026c8:	2001      	movs	r0, #1
 80026ca:	f7ff fd17 	bl	80020fc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	619a      	str	r2, [r3, #24]
}
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	ff20810f 	.word	0xff20810f

080026e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4b3d      	ldr	r3, [pc, #244]	; (80027f4 <ETH_SetDMAConfig+0x110>)
 80026fe:	4013      	ands	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	7b1b      	ldrb	r3, [r3, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <ETH_SetDMAConfig+0x2c>
 800270a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800270e:	e000      	b.n	8002712 <ETH_SetDMAConfig+0x2e>
 8002710:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	7b5b      	ldrb	r3, [r3, #13]
 8002716:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002718:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	7f52      	ldrb	r2, [r2, #29]
 800271e:	2a00      	cmp	r2, #0
 8002720:	d102      	bne.n	8002728 <ETH_SetDMAConfig+0x44>
 8002722:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002726:	e000      	b.n	800272a <ETH_SetDMAConfig+0x46>
 8002728:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800272a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	7b9b      	ldrb	r3, [r3, #14]
 8002730:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002732:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002738:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	7f1b      	ldrb	r3, [r3, #28]
 800273e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002740:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	7f9b      	ldrb	r3, [r3, #30]
 8002746:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002748:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800274e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002756:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002758:	4313      	orrs	r3, r2
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4313      	orrs	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002768:	461a      	mov	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800277a:	2001      	movs	r0, #1
 800277c:	f7ff fcbe 	bl	80020fc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002788:	461a      	mov	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	791b      	ldrb	r3, [r3, #4]
 8002792:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002798:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800279e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027a4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027ac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80027ae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027b6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027bc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027ca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027d8:	2001      	movs	r0, #1
 80027da:	f7ff fc8f 	bl	80020fc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e6:	461a      	mov	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	f8de3f23 	.word	0xf8de3f23

080027f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b0a6      	sub	sp, #152	; 0x98
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002800:	2301      	movs	r3, #1
 8002802:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002806:	2301      	movs	r3, #1
 8002808:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800280c:	2300      	movs	r3, #0
 800280e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002810:	2300      	movs	r3, #0
 8002812:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002816:	2301      	movs	r3, #1
 8002818:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800281c:	2300      	movs	r3, #0
 800281e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002822:	2301      	movs	r3, #1
 8002824:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002828:	2300      	movs	r3, #0
 800282a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800282e:	2300      	movs	r3, #0
 8002830:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002834:	2300      	movs	r3, #0
 8002836:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002838:	2300      	movs	r3, #0
 800283a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800283e:	2300      	movs	r3, #0
 8002840:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002842:	2300      	movs	r3, #0
 8002844:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002848:	2300      	movs	r3, #0
 800284a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800284e:	2300      	movs	r3, #0
 8002850:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002854:	2300      	movs	r3, #0
 8002856:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800285a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800285e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002860:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002864:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002866:	2300      	movs	r3, #0
 8002868:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800286c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002870:	4619      	mov	r1, r3
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff fe86 	bl	8002584 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002878:	2301      	movs	r3, #1
 800287a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800287c:	2301      	movs	r3, #1
 800287e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002880:	2301      	movs	r3, #1
 8002882:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002886:	2301      	movs	r3, #1
 8002888:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800288e:	2300      	movs	r3, #0
 8002890:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002894:	2300      	movs	r3, #0
 8002896:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800289a:	2300      	movs	r3, #0
 800289c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800289e:	2301      	movs	r3, #1
 80028a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028a4:	2301      	movs	r3, #1
 80028a6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028ac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028b2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028b8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80028ba:	2301      	movs	r3, #1
 80028bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80028c8:	f107 0308 	add.w	r3, r7, #8
 80028cc:	4619      	mov	r1, r3
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ff08 	bl	80026e4 <ETH_SetDMAConfig>
}
 80028d4:	bf00      	nop
 80028d6:	3798      	adds	r7, #152	; 0x98
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3305      	adds	r3, #5
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	021b      	lsls	r3, r3, #8
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	3204      	adds	r2, #4
 80028f4:	7812      	ldrb	r2, [r2, #0]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	4b11      	ldr	r3, [pc, #68]	; (8002944 <ETH_MACAddressConfig+0x68>)
 80028fe:	4413      	add	r3, r2
 8002900:	461a      	mov	r2, r3
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3303      	adds	r3, #3
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	061a      	lsls	r2, r3, #24
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3302      	adds	r3, #2
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	041b      	lsls	r3, r3, #16
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3301      	adds	r3, #1
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	4313      	orrs	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	7812      	ldrb	r2, [r2, #0]
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <ETH_MACAddressConfig+0x6c>)
 800292e:	4413      	add	r3, r2
 8002930:	461a      	mov	r2, r3
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	6013      	str	r3, [r2, #0]
}
 8002936:	bf00      	nop
 8002938:	371c      	adds	r7, #28
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40028040 	.word	0x40028040
 8002948:	40028044 	.word	0x40028044

0800294c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	e03e      	b.n	80029d8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68d9      	ldr	r1, [r3, #12]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	440b      	add	r3, r1
 800296a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2200      	movs	r2, #0
 8002976:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2200      	movs	r2, #0
 8002982:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	3206      	adds	r2, #6
 800298c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d80c      	bhi.n	80029bc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68d9      	ldr	r1, [r3, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	440b      	add	r3, r1
 80029b4:	461a      	mov	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	e004      	b.n	80029c6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	461a      	mov	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	3301      	adds	r3, #1
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d9bd      	bls.n	800295a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f0:	611a      	str	r2, [r3, #16]
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	e046      	b.n	8002a9a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6919      	ldr	r1, [r3, #16]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	440b      	add	r3, r1
 8002a1c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2200      	movs	r2, #0
 8002a28:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a48:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002a50:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	3212      	adds	r2, #18
 8002a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d80c      	bhi.n	8002a8a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6919      	ldr	r1, [r3, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	440b      	add	r3, r1
 8002a82:	461a      	mov	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	60da      	str	r2, [r3, #12]
 8002a88:	e004      	b.n	8002a94 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	3301      	adds	r3, #1
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d9b5      	bls.n	8002a0c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aca:	60da      	str	r2, [r3, #12]
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	; 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	e175      	b.n	8002de4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002af8:	2201      	movs	r2, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	f040 8164 	bne.w	8002dde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d005      	beq.n	8002b2e <HAL_GPIO_Init+0x56>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d130      	bne.n	8002b90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	2203      	movs	r2, #3
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b64:	2201      	movs	r2, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 0201 	and.w	r2, r3, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d017      	beq.n	8002bcc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d123      	bne.n	8002c20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	08da      	lsrs	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3208      	adds	r2, #8
 8002be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	220f      	movs	r2, #15
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	08da      	lsrs	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3208      	adds	r2, #8
 8002c1a:	69b9      	ldr	r1, [r7, #24]
 8002c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0203 	and.w	r2, r3, #3
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80be 	beq.w	8002dde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c62:	4b66      	ldr	r3, [pc, #408]	; (8002dfc <HAL_GPIO_Init+0x324>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	4a65      	ldr	r2, [pc, #404]	; (8002dfc <HAL_GPIO_Init+0x324>)
 8002c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6e:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <HAL_GPIO_Init+0x324>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c7a:	4a61      	ldr	r2, [pc, #388]	; (8002e00 <HAL_GPIO_Init+0x328>)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3302      	adds	r3, #2
 8002c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	220f      	movs	r2, #15
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a58      	ldr	r2, [pc, #352]	; (8002e04 <HAL_GPIO_Init+0x32c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d037      	beq.n	8002d16 <HAL_GPIO_Init+0x23e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a57      	ldr	r2, [pc, #348]	; (8002e08 <HAL_GPIO_Init+0x330>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d031      	beq.n	8002d12 <HAL_GPIO_Init+0x23a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a56      	ldr	r2, [pc, #344]	; (8002e0c <HAL_GPIO_Init+0x334>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d02b      	beq.n	8002d0e <HAL_GPIO_Init+0x236>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a55      	ldr	r2, [pc, #340]	; (8002e10 <HAL_GPIO_Init+0x338>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d025      	beq.n	8002d0a <HAL_GPIO_Init+0x232>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a54      	ldr	r2, [pc, #336]	; (8002e14 <HAL_GPIO_Init+0x33c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01f      	beq.n	8002d06 <HAL_GPIO_Init+0x22e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a53      	ldr	r2, [pc, #332]	; (8002e18 <HAL_GPIO_Init+0x340>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d019      	beq.n	8002d02 <HAL_GPIO_Init+0x22a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a52      	ldr	r2, [pc, #328]	; (8002e1c <HAL_GPIO_Init+0x344>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_GPIO_Init+0x226>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a51      	ldr	r2, [pc, #324]	; (8002e20 <HAL_GPIO_Init+0x348>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <HAL_GPIO_Init+0x222>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a50      	ldr	r2, [pc, #320]	; (8002e24 <HAL_GPIO_Init+0x34c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <HAL_GPIO_Init+0x21e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4f      	ldr	r2, [pc, #316]	; (8002e28 <HAL_GPIO_Init+0x350>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_GPIO_Init+0x21a>
 8002cee:	2309      	movs	r3, #9
 8002cf0:	e012      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002cf2:	230a      	movs	r3, #10
 8002cf4:	e010      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002cf6:	2308      	movs	r3, #8
 8002cf8:	e00e      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002cfa:	2307      	movs	r3, #7
 8002cfc:	e00c      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002cfe:	2306      	movs	r3, #6
 8002d00:	e00a      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d02:	2305      	movs	r3, #5
 8002d04:	e008      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d06:	2304      	movs	r3, #4
 8002d08:	e006      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e004      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e002      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d16:	2300      	movs	r3, #0
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	f002 0203 	and.w	r2, r2, #3
 8002d1e:	0092      	lsls	r2, r2, #2
 8002d20:	4093      	lsls	r3, r2
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d28:	4935      	ldr	r1, [pc, #212]	; (8002e00 <HAL_GPIO_Init+0x328>)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	3302      	adds	r3, #2
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d36:	4b3d      	ldr	r3, [pc, #244]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d5a:	4a34      	ldr	r2, [pc, #208]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d60:	4b32      	ldr	r3, [pc, #200]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d84:	4a29      	ldr	r2, [pc, #164]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d8a:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dae:	4a1f      	ldr	r2, [pc, #124]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db4:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dd8:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3301      	adds	r3, #1
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	2b0f      	cmp	r3, #15
 8002de8:	f67f ae86 	bls.w	8002af8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	3724      	adds	r7, #36	; 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40013800 	.word	0x40013800
 8002e04:	40020000 	.word	0x40020000
 8002e08:	40020400 	.word	0x40020400
 8002e0c:	40020800 	.word	0x40020800
 8002e10:	40020c00 	.word	0x40020c00
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40021400 	.word	0x40021400
 8002e1c:	40021800 	.word	0x40021800
 8002e20:	40021c00 	.word	0x40021c00
 8002e24:	40022000 	.word	0x40022000
 8002e28:	40022400 	.word	0x40022400
 8002e2c:	40013c00 	.word	0x40013c00

08002e30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	887b      	ldrh	r3, [r7, #2]
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
 8002e4c:	e001      	b.n	8002e52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	807b      	strh	r3, [r7, #2]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e70:	787b      	ldrb	r3, [r7, #1]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e76:	887a      	ldrh	r2, [r7, #2]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e7c:	e003      	b.n	8002e86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e7e:	887b      	ldrh	r3, [r7, #2]
 8002e80:	041a      	lsls	r2, r3, #16
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	619a      	str	r2, [r3, #24]
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b085      	sub	sp, #20
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ea4:	887a      	ldrh	r2, [r7, #2]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	041a      	lsls	r2, r3, #16
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	43d9      	mvns	r1, r3
 8002eb0:	887b      	ldrh	r3, [r7, #2]
 8002eb2:	400b      	ands	r3, r1
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	619a      	str	r2, [r3, #24]
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ede:	4a05      	ldr	r2, [pc, #20]	; (8002ef4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe f8b8 	bl	800105c <HAL_GPIO_EXTI_Callback>
  }
}
 8002eec:	bf00      	nop
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40013c00 	.word	0x40013c00

08002ef8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002efa:	b08f      	sub	sp, #60	; 0x3c
 8002efc:	af0a      	add	r7, sp, #40	; 0x28
 8002efe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e116      	b.n	8003138 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d106      	bne.n	8002f2a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7fe ff31 	bl	8001d8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d102      	bne.n	8002f44 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f004 f9fb 	bl	8007344 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	687e      	ldr	r6, [r7, #4]
 8002f56:	466d      	mov	r5, sp
 8002f58:	f106 0410 	add.w	r4, r6, #16
 8002f5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f68:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f6c:	1d33      	adds	r3, r6, #4
 8002f6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f70:	6838      	ldr	r0, [r7, #0]
 8002f72:	f004 f98f 	bl	8007294 <USB_CoreInit>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0d7      	b.n	8003138 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f004 f9e9 	bl	8007366 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f94:	2300      	movs	r3, #0
 8002f96:	73fb      	strb	r3, [r7, #15]
 8002f98:	e04a      	b.n	8003030 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f9a:	7bfa      	ldrb	r2, [r7, #15]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	333d      	adds	r3, #61	; 0x3d
 8002faa:	2201      	movs	r2, #1
 8002fac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fae:	7bfa      	ldrb	r2, [r7, #15]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	333c      	adds	r3, #60	; 0x3c
 8002fbe:	7bfa      	ldrb	r2, [r7, #15]
 8002fc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fc2:	7bfa      	ldrb	r2, [r7, #15]
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	b298      	uxth	r0, r3
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3344      	adds	r3, #68	; 0x44
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fda:	7bfa      	ldrb	r2, [r7, #15]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	3340      	adds	r3, #64	; 0x40
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fee:	7bfa      	ldrb	r2, [r7, #15]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3348      	adds	r3, #72	; 0x48
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003002:	7bfa      	ldrb	r2, [r7, #15]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	334c      	adds	r3, #76	; 0x4c
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003016:	7bfa      	ldrb	r2, [r7, #15]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	3354      	adds	r3, #84	; 0x54
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	3301      	adds	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
 8003030:	7bfa      	ldrb	r2, [r7, #15]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	429a      	cmp	r2, r3
 8003038:	d3af      	bcc.n	8002f9a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]
 800303e:	e044      	b.n	80030ca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003068:	7bfa      	ldrb	r2, [r7, #15]
 800306a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800306c:	7bfa      	ldrb	r2, [r7, #15]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003082:	7bfa      	ldrb	r2, [r7, #15]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003098:	7bfa      	ldrb	r2, [r7, #15]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030ae:	7bfa      	ldrb	r2, [r7, #15]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	3301      	adds	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
 80030ca:	7bfa      	ldrb	r2, [r7, #15]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d3b5      	bcc.n	8003040 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	603b      	str	r3, [r7, #0]
 80030da:	687e      	ldr	r6, [r7, #4]
 80030dc:	466d      	mov	r5, sp
 80030de:	f106 0410 	add.w	r4, r6, #16
 80030e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80030f2:	1d33      	adds	r3, r6, #4
 80030f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030f6:	6838      	ldr	r0, [r7, #0]
 80030f8:	f004 f982 	bl	8007400 <USB_DevInit>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2202      	movs	r2, #2
 8003106:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e014      	b.n	8003138 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	2b01      	cmp	r3, #1
 8003124:	d102      	bne.n	800312c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f80a 	bl	8003140 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f004 fb40 	bl	80077b6 <USB_DevDisconnect>

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003140 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800316e:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_PCDEx_ActivateLPM+0x44>)
 8003170:	4313      	orrs	r3, r2
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	10000003 	.word	0x10000003

08003188 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a04      	ldr	r2, [pc, #16]	; (80031a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003196:	6013      	str	r3, [r2, #0]
}
 8003198:	bf00      	nop
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40007000 	.word	0x40007000

080031a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031b0:	2300      	movs	r3, #0
 80031b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e291      	b.n	80036e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8087 	beq.w	80032da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031cc:	4b96      	ldr	r3, [pc, #600]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d00c      	beq.n	80031f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d8:	4b93      	ldr	r3, [pc, #588]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d112      	bne.n	800320a <HAL_RCC_OscConfig+0x62>
 80031e4:	4b90      	ldr	r3, [pc, #576]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f0:	d10b      	bne.n	800320a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f2:	4b8d      	ldr	r3, [pc, #564]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d06c      	beq.n	80032d8 <HAL_RCC_OscConfig+0x130>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d168      	bne.n	80032d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e26b      	b.n	80036e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003212:	d106      	bne.n	8003222 <HAL_RCC_OscConfig+0x7a>
 8003214:	4b84      	ldr	r3, [pc, #528]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a83      	ldr	r2, [pc, #524]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 800321a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	e02e      	b.n	8003280 <HAL_RCC_OscConfig+0xd8>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0x9c>
 800322a:	4b7f      	ldr	r3, [pc, #508]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a7e      	ldr	r2, [pc, #504]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 8003230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b7c      	ldr	r3, [pc, #496]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a7b      	ldr	r2, [pc, #492]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 800323c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e01d      	b.n	8003280 <HAL_RCC_OscConfig+0xd8>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800324c:	d10c      	bne.n	8003268 <HAL_RCC_OscConfig+0xc0>
 800324e:	4b76      	ldr	r3, [pc, #472]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a75      	ldr	r2, [pc, #468]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 8003254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	4b73      	ldr	r3, [pc, #460]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a72      	ldr	r2, [pc, #456]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 8003260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e00b      	b.n	8003280 <HAL_RCC_OscConfig+0xd8>
 8003268:	4b6f      	ldr	r3, [pc, #444]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a6e      	ldr	r2, [pc, #440]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 800326e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b6c      	ldr	r3, [pc, #432]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a6b      	ldr	r2, [pc, #428]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 800327a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d013      	beq.n	80032b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003288:	f7fe ff2c 	bl	80020e4 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003290:	f7fe ff28 	bl	80020e4 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e21f      	b.n	80036e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a2:	4b61      	ldr	r3, [pc, #388]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0xe8>
 80032ae:	e014      	b.n	80032da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7fe ff18 	bl	80020e4 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b8:	f7fe ff14 	bl	80020e4 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	; 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e20b      	b.n	80036e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ca:	4b57      	ldr	r3, [pc, #348]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x110>
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d069      	beq.n	80033ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032e6:	4b50      	ldr	r3, [pc, #320]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032f2:	4b4d      	ldr	r3, [pc, #308]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 030c 	and.w	r3, r3, #12
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d11c      	bne.n	8003338 <HAL_RCC_OscConfig+0x190>
 80032fe:	4b4a      	ldr	r3, [pc, #296]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d116      	bne.n	8003338 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330a:	4b47      	ldr	r3, [pc, #284]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <HAL_RCC_OscConfig+0x17a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d001      	beq.n	8003322 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e1df      	b.n	80036e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003322:	4b41      	ldr	r3, [pc, #260]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	493d      	ldr	r1, [pc, #244]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003336:	e040      	b.n	80033ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d023      	beq.n	8003388 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003340:	4b39      	ldr	r3, [pc, #228]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a38      	ldr	r2, [pc, #224]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fe feca 	bl	80020e4 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003354:	f7fe fec6 	bl	80020e4 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e1bd      	b.n	80036e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003366:	4b30      	ldr	r3, [pc, #192]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003372:	4b2d      	ldr	r3, [pc, #180]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4929      	ldr	r1, [pc, #164]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]
 8003386:	e018      	b.n	80033ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003388:	4b27      	ldr	r3, [pc, #156]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a26      	ldr	r2, [pc, #152]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 800338e:	f023 0301 	bic.w	r3, r3, #1
 8003392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fe fea6 	bl	80020e4 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339c:	f7fe fea2 	bl	80020e4 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e199      	b.n	80036e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ae:	4b1e      	ldr	r3, [pc, #120]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d038      	beq.n	8003438 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d019      	beq.n	8003402 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ce:	4b16      	ldr	r3, [pc, #88]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 80033d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d2:	4a15      	ldr	r2, [pc, #84]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033da:	f7fe fe83 	bl	80020e4 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e2:	f7fe fe7f 	bl	80020e4 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e176      	b.n	80036e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 80033f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0x23a>
 8003400:	e01a      	b.n	8003438 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 8003404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003406:	4a08      	ldr	r2, [pc, #32]	; (8003428 <HAL_RCC_OscConfig+0x280>)
 8003408:	f023 0301 	bic.w	r3, r3, #1
 800340c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340e:	f7fe fe69 	bl	80020e4 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003414:	e00a      	b.n	800342c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003416:	f7fe fe65 	bl	80020e4 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d903      	bls.n	800342c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e15c      	b.n	80036e2 <HAL_RCC_OscConfig+0x53a>
 8003428:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800342c:	4b91      	ldr	r3, [pc, #580]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 800342e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1ee      	bne.n	8003416 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 80a4 	beq.w	800358e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003446:	4b8b      	ldr	r3, [pc, #556]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10d      	bne.n	800346e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003452:	4b88      	ldr	r3, [pc, #544]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	4a87      	ldr	r2, [pc, #540]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345c:	6413      	str	r3, [r2, #64]	; 0x40
 800345e:	4b85      	ldr	r3, [pc, #532]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800346a:	2301      	movs	r3, #1
 800346c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800346e:	4b82      	ldr	r3, [pc, #520]	; (8003678 <HAL_RCC_OscConfig+0x4d0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003476:	2b00      	cmp	r3, #0
 8003478:	d118      	bne.n	80034ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800347a:	4b7f      	ldr	r3, [pc, #508]	; (8003678 <HAL_RCC_OscConfig+0x4d0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a7e      	ldr	r2, [pc, #504]	; (8003678 <HAL_RCC_OscConfig+0x4d0>)
 8003480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003486:	f7fe fe2d 	bl	80020e4 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348e:	f7fe fe29 	bl	80020e4 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b64      	cmp	r3, #100	; 0x64
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e120      	b.n	80036e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034a0:	4b75      	ldr	r3, [pc, #468]	; (8003678 <HAL_RCC_OscConfig+0x4d0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d106      	bne.n	80034c2 <HAL_RCC_OscConfig+0x31a>
 80034b4:	4b6f      	ldr	r3, [pc, #444]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 80034b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b8:	4a6e      	ldr	r2, [pc, #440]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	6713      	str	r3, [r2, #112]	; 0x70
 80034c0:	e02d      	b.n	800351e <HAL_RCC_OscConfig+0x376>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10c      	bne.n	80034e4 <HAL_RCC_OscConfig+0x33c>
 80034ca:	4b6a      	ldr	r3, [pc, #424]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	4a69      	ldr	r2, [pc, #420]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	6713      	str	r3, [r2, #112]	; 0x70
 80034d6:	4b67      	ldr	r3, [pc, #412]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	4a66      	ldr	r2, [pc, #408]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 80034dc:	f023 0304 	bic.w	r3, r3, #4
 80034e0:	6713      	str	r3, [r2, #112]	; 0x70
 80034e2:	e01c      	b.n	800351e <HAL_RCC_OscConfig+0x376>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b05      	cmp	r3, #5
 80034ea:	d10c      	bne.n	8003506 <HAL_RCC_OscConfig+0x35e>
 80034ec:	4b61      	ldr	r3, [pc, #388]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 80034ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f0:	4a60      	ldr	r2, [pc, #384]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 80034f2:	f043 0304 	orr.w	r3, r3, #4
 80034f6:	6713      	str	r3, [r2, #112]	; 0x70
 80034f8:	4b5e      	ldr	r3, [pc, #376]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	4a5d      	ldr	r2, [pc, #372]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	6713      	str	r3, [r2, #112]	; 0x70
 8003504:	e00b      	b.n	800351e <HAL_RCC_OscConfig+0x376>
 8003506:	4b5b      	ldr	r3, [pc, #364]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	4a5a      	ldr	r2, [pc, #360]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 800350c:	f023 0301 	bic.w	r3, r3, #1
 8003510:	6713      	str	r3, [r2, #112]	; 0x70
 8003512:	4b58      	ldr	r3, [pc, #352]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	4a57      	ldr	r2, [pc, #348]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003518:	f023 0304 	bic.w	r3, r3, #4
 800351c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d015      	beq.n	8003552 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003526:	f7fe fddd 	bl	80020e4 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352c:	e00a      	b.n	8003544 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352e:	f7fe fdd9 	bl	80020e4 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	f241 3288 	movw	r2, #5000	; 0x1388
 800353c:	4293      	cmp	r3, r2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e0ce      	b.n	80036e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003544:	4b4b      	ldr	r3, [pc, #300]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0ee      	beq.n	800352e <HAL_RCC_OscConfig+0x386>
 8003550:	e014      	b.n	800357c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003552:	f7fe fdc7 	bl	80020e4 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003558:	e00a      	b.n	8003570 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355a:	f7fe fdc3 	bl	80020e4 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f241 3288 	movw	r2, #5000	; 0x1388
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e0b8      	b.n	80036e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003570:	4b40      	ldr	r3, [pc, #256]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1ee      	bne.n	800355a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800357c:	7dfb      	ldrb	r3, [r7, #23]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d105      	bne.n	800358e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003582:	4b3c      	ldr	r3, [pc, #240]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	4a3b      	ldr	r2, [pc, #236]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80a4 	beq.w	80036e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003598:	4b36      	ldr	r3, [pc, #216]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 030c 	and.w	r3, r3, #12
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d06b      	beq.n	800367c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d149      	bne.n	8003640 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ac:	4b31      	ldr	r3, [pc, #196]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a30      	ldr	r2, [pc, #192]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 80035b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fe fd94 	bl	80020e4 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c0:	f7fe fd90 	bl	80020e4 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e087      	b.n	80036e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d2:	4b28      	ldr	r3, [pc, #160]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69da      	ldr	r2, [r3, #28]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	019b      	lsls	r3, r3, #6
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	085b      	lsrs	r3, r3, #1
 80035f6:	3b01      	subs	r3, #1
 80035f8:	041b      	lsls	r3, r3, #16
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	061b      	lsls	r3, r3, #24
 8003602:	4313      	orrs	r3, r2
 8003604:	4a1b      	ldr	r2, [pc, #108]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003606:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800360a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a18      	ldr	r2, [pc, #96]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7fe fd64 	bl	80020e4 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003620:	f7fe fd60 	bl	80020e4 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e057      	b.n	80036e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0x478>
 800363e:	e04f      	b.n	80036e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003640:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a0b      	ldr	r2, [pc, #44]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800364a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364c:	f7fe fd4a 	bl	80020e4 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003654:	f7fe fd46 	bl	80020e4 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e03d      	b.n	80036e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003666:	4b03      	ldr	r3, [pc, #12]	; (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x4ac>
 8003672:	e035      	b.n	80036e0 <HAL_RCC_OscConfig+0x538>
 8003674:	40023800 	.word	0x40023800
 8003678:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800367c:	4b1b      	ldr	r3, [pc, #108]	; (80036ec <HAL_RCC_OscConfig+0x544>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d028      	beq.n	80036dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d121      	bne.n	80036dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d11a      	bne.n	80036dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036ac:	4013      	ands	r3, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d111      	bne.n	80036dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	085b      	lsrs	r3, r3, #1
 80036c4:	3b01      	subs	r3, #1
 80036c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d107      	bne.n	80036dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40023800 	.word	0x40023800

080036f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0d0      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003708:	4b6a      	ldr	r3, [pc, #424]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d910      	bls.n	8003738 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003716:	4b67      	ldr	r3, [pc, #412]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 020f 	bic.w	r2, r3, #15
 800371e:	4965      	ldr	r1, [pc, #404]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	4313      	orrs	r3, r2
 8003724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003726:	4b63      	ldr	r3, [pc, #396]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0b8      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d020      	beq.n	8003786 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003750:	4b59      	ldr	r3, [pc, #356]	; (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4a58      	ldr	r2, [pc, #352]	; (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800375a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003768:	4b53      	ldr	r3, [pc, #332]	; (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4a52      	ldr	r2, [pc, #328]	; (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 800376e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003772:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003774:	4b50      	ldr	r3, [pc, #320]	; (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	494d      	ldr	r1, [pc, #308]	; (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003782:	4313      	orrs	r3, r2
 8003784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d040      	beq.n	8003814 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d107      	bne.n	80037aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379a:	4b47      	ldr	r3, [pc, #284]	; (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d115      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e07f      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d107      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b2:	4b41      	ldr	r3, [pc, #260]	; (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d109      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e073      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c2:	4b3d      	ldr	r3, [pc, #244]	; (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e06b      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037d2:	4b39      	ldr	r3, [pc, #228]	; (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f023 0203 	bic.w	r2, r3, #3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	4936      	ldr	r1, [pc, #216]	; (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e4:	f7fe fc7e 	bl	80020e4 <HAL_GetTick>
 80037e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ea:	e00a      	b.n	8003802 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ec:	f7fe fc7a 	bl	80020e4 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e053      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003802:	4b2d      	ldr	r3, [pc, #180]	; (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 020c 	and.w	r2, r3, #12
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	429a      	cmp	r2, r3
 8003812:	d1eb      	bne.n	80037ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003814:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d210      	bcs.n	8003844 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003822:	4b24      	ldr	r3, [pc, #144]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f023 020f 	bic.w	r2, r3, #15
 800382a:	4922      	ldr	r1, [pc, #136]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	4313      	orrs	r3, r2
 8003830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003832:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d001      	beq.n	8003844 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e032      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003850:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	4916      	ldr	r1, [pc, #88]	; (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 800385e:	4313      	orrs	r3, r2
 8003860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d009      	beq.n	8003882 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800386e:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	490e      	ldr	r1, [pc, #56]	; (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003882:	f000 f821 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 8003886:	4602      	mov	r2, r0
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	490a      	ldr	r1, [pc, #40]	; (80038bc <HAL_RCC_ClockConfig+0x1cc>)
 8003894:	5ccb      	ldrb	r3, [r1, r3]
 8003896:	fa22 f303 	lsr.w	r3, r2, r3
 800389a:	4a09      	ldr	r2, [pc, #36]	; (80038c0 <HAL_RCC_ClockConfig+0x1d0>)
 800389c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800389e:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <HAL_RCC_ClockConfig+0x1d4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fbda 	bl	800205c <HAL_InitTick>

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40023c00 	.word	0x40023c00
 80038b8:	40023800 	.word	0x40023800
 80038bc:	08008bf8 	.word	0x08008bf8
 80038c0:	20000014 	.word	0x20000014
 80038c4:	20000018 	.word	0x20000018

080038c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038cc:	b094      	sub	sp, #80	; 0x50
 80038ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	647b      	str	r3, [r7, #68]	; 0x44
 80038d4:	2300      	movs	r3, #0
 80038d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d8:	2300      	movs	r3, #0
 80038da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038e0:	4b79      	ldr	r3, [pc, #484]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 030c 	and.w	r3, r3, #12
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d00d      	beq.n	8003908 <HAL_RCC_GetSysClockFreq+0x40>
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	f200 80e1 	bhi.w	8003ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_RCC_GetSysClockFreq+0x34>
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d003      	beq.n	8003902 <HAL_RCC_GetSysClockFreq+0x3a>
 80038fa:	e0db      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038fc:	4b73      	ldr	r3, [pc, #460]	; (8003acc <HAL_RCC_GetSysClockFreq+0x204>)
 80038fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003900:	e0db      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003902:	4b73      	ldr	r3, [pc, #460]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003904:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003906:	e0d8      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003908:	4b6f      	ldr	r3, [pc, #444]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003910:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003912:	4b6d      	ldr	r3, [pc, #436]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d063      	beq.n	80039e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800391e:	4b6a      	ldr	r3, [pc, #424]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	099b      	lsrs	r3, r3, #6
 8003924:	2200      	movs	r2, #0
 8003926:	63bb      	str	r3, [r7, #56]	; 0x38
 8003928:	63fa      	str	r2, [r7, #60]	; 0x3c
 800392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003930:	633b      	str	r3, [r7, #48]	; 0x30
 8003932:	2300      	movs	r3, #0
 8003934:	637b      	str	r3, [r7, #52]	; 0x34
 8003936:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800393a:	4622      	mov	r2, r4
 800393c:	462b      	mov	r3, r5
 800393e:	f04f 0000 	mov.w	r0, #0
 8003942:	f04f 0100 	mov.w	r1, #0
 8003946:	0159      	lsls	r1, r3, #5
 8003948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800394c:	0150      	lsls	r0, r2, #5
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4621      	mov	r1, r4
 8003954:	1a51      	subs	r1, r2, r1
 8003956:	6139      	str	r1, [r7, #16]
 8003958:	4629      	mov	r1, r5
 800395a:	eb63 0301 	sbc.w	r3, r3, r1
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800396c:	4659      	mov	r1, fp
 800396e:	018b      	lsls	r3, r1, #6
 8003970:	4651      	mov	r1, sl
 8003972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003976:	4651      	mov	r1, sl
 8003978:	018a      	lsls	r2, r1, #6
 800397a:	4651      	mov	r1, sl
 800397c:	ebb2 0801 	subs.w	r8, r2, r1
 8003980:	4659      	mov	r1, fp
 8003982:	eb63 0901 	sbc.w	r9, r3, r1
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800399a:	4690      	mov	r8, r2
 800399c:	4699      	mov	r9, r3
 800399e:	4623      	mov	r3, r4
 80039a0:	eb18 0303 	adds.w	r3, r8, r3
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	462b      	mov	r3, r5
 80039a8:	eb49 0303 	adc.w	r3, r9, r3
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039ba:	4629      	mov	r1, r5
 80039bc:	024b      	lsls	r3, r1, #9
 80039be:	4621      	mov	r1, r4
 80039c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039c4:	4621      	mov	r1, r4
 80039c6:	024a      	lsls	r2, r1, #9
 80039c8:	4610      	mov	r0, r2
 80039ca:	4619      	mov	r1, r3
 80039cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ce:	2200      	movs	r2, #0
 80039d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039d8:	f7fc fc72 	bl	80002c0 <__aeabi_uldivmod>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4613      	mov	r3, r2
 80039e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039e4:	e058      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e6:	4b38      	ldr	r3, [pc, #224]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	099b      	lsrs	r3, r3, #6
 80039ec:	2200      	movs	r2, #0
 80039ee:	4618      	mov	r0, r3
 80039f0:	4611      	mov	r1, r2
 80039f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039f6:	623b      	str	r3, [r7, #32]
 80039f8:	2300      	movs	r3, #0
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
 80039fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a00:	4642      	mov	r2, r8
 8003a02:	464b      	mov	r3, r9
 8003a04:	f04f 0000 	mov.w	r0, #0
 8003a08:	f04f 0100 	mov.w	r1, #0
 8003a0c:	0159      	lsls	r1, r3, #5
 8003a0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a12:	0150      	lsls	r0, r2, #5
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4641      	mov	r1, r8
 8003a1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a1e:	4649      	mov	r1, r9
 8003a20:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a38:	ebb2 040a 	subs.w	r4, r2, sl
 8003a3c:	eb63 050b 	sbc.w	r5, r3, fp
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	00eb      	lsls	r3, r5, #3
 8003a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a4e:	00e2      	lsls	r2, r4, #3
 8003a50:	4614      	mov	r4, r2
 8003a52:	461d      	mov	r5, r3
 8003a54:	4643      	mov	r3, r8
 8003a56:	18e3      	adds	r3, r4, r3
 8003a58:	603b      	str	r3, [r7, #0]
 8003a5a:	464b      	mov	r3, r9
 8003a5c:	eb45 0303 	adc.w	r3, r5, r3
 8003a60:	607b      	str	r3, [r7, #4]
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a6e:	4629      	mov	r1, r5
 8003a70:	028b      	lsls	r3, r1, #10
 8003a72:	4621      	mov	r1, r4
 8003a74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a78:	4621      	mov	r1, r4
 8003a7a:	028a      	lsls	r2, r1, #10
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	4619      	mov	r1, r3
 8003a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a82:	2200      	movs	r2, #0
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	61fa      	str	r2, [r7, #28]
 8003a88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a8c:	f7fc fc18 	bl	80002c0 <__aeabi_uldivmod>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4613      	mov	r3, r2
 8003a96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	0c1b      	lsrs	r3, r3, #16
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003aa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ab2:	e002      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <HAL_RCC_GetSysClockFreq+0x204>)
 8003ab6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3750      	adds	r7, #80	; 0x50
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	00f42400 	.word	0x00f42400
 8003ad0:	007a1200 	.word	0x007a1200

08003ad4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad8:	4b03      	ldr	r3, [pc, #12]	; (8003ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ada:	681b      	ldr	r3, [r3, #0]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	20000014 	.word	0x20000014

08003aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003af0:	f7ff fff0 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003af4:	4602      	mov	r2, r0
 8003af6:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	0a9b      	lsrs	r3, r3, #10
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	4903      	ldr	r1, [pc, #12]	; (8003b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b02:	5ccb      	ldrb	r3, [r1, r3]
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	08008c08 	.word	0x08008c08

08003b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b18:	f7ff ffdc 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	0b5b      	lsrs	r3, r3, #13
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4903      	ldr	r1, [pc, #12]	; (8003b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b2a:	5ccb      	ldrb	r3, [r1, r3]
 8003b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40023800 	.word	0x40023800
 8003b38:	08008c08 	.word	0x08008c08

08003b3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d012      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b64:	4b69      	ldr	r3, [pc, #420]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	4a68      	ldr	r2, [pc, #416]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b6e:	6093      	str	r3, [r2, #8]
 8003b70:	4b66      	ldr	r3, [pc, #408]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b78:	4964      	ldr	r1, [pc, #400]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b86:	2301      	movs	r3, #1
 8003b88:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d017      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b96:	4b5d      	ldr	r3, [pc, #372]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba4:	4959      	ldr	r1, [pc, #356]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bb4:	d101      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d017      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bd2:	4b4e      	ldr	r3, [pc, #312]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	494a      	ldr	r1, [pc, #296]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 808b 	beq.w	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c20:	4b3a      	ldr	r3, [pc, #232]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	4a39      	ldr	r2, [pc, #228]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c2c:	4b37      	ldr	r3, [pc, #220]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c38:	4b35      	ldr	r3, [pc, #212]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a34      	ldr	r2, [pc, #208]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c44:	f7fe fa4e 	bl	80020e4 <HAL_GetTick>
 8003c48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c4c:	f7fe fa4a 	bl	80020e4 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b64      	cmp	r3, #100	; 0x64
 8003c58:	d901      	bls.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e357      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c5e:	4b2c      	ldr	r3, [pc, #176]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c6a:	4b28      	ldr	r3, [pc, #160]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d035      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d02e      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c88:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c92:	4b1e      	ldr	r3, [pc, #120]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	4a1d      	ldr	r2, [pc, #116]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c9e:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	4a1a      	ldr	r2, [pc, #104]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003caa:	4a18      	ldr	r2, [pc, #96]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cb0:	4b16      	ldr	r3, [pc, #88]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d114      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fe fa12 	bl	80020e4 <HAL_GetTick>
 8003cc0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc2:	e00a      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc4:	f7fe fa0e 	bl	80020e4 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e319      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cda:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0ee      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cf2:	d111      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d02:	400b      	ands	r3, r1
 8003d04:	4901      	ldr	r1, [pc, #4]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	608b      	str	r3, [r1, #8]
 8003d0a:	e00b      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	40007000 	.word	0x40007000
 8003d14:	0ffffcff 	.word	0x0ffffcff
 8003d18:	4baa      	ldr	r3, [pc, #680]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	4aa9      	ldr	r2, [pc, #676]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d1e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d22:	6093      	str	r3, [r2, #8]
 8003d24:	4ba7      	ldr	r3, [pc, #668]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d30:	49a4      	ldr	r1, [pc, #656]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d010      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d42:	4ba0      	ldr	r3, [pc, #640]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d48:	4a9e      	ldr	r2, [pc, #632]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d52:	4b9c      	ldr	r3, [pc, #624]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d54:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	4999      	ldr	r1, [pc, #612]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d70:	4b94      	ldr	r3, [pc, #592]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d7e:	4991      	ldr	r1, [pc, #580]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d92:	4b8c      	ldr	r3, [pc, #560]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003da0:	4988      	ldr	r1, [pc, #544]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003db4:	4b83      	ldr	r3, [pc, #524]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dc2:	4980      	ldr	r1, [pc, #512]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dd6:	4b7b      	ldr	r3, [pc, #492]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	4977      	ldr	r1, [pc, #476]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003df8:	4b72      	ldr	r3, [pc, #456]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfe:	f023 0203 	bic.w	r2, r3, #3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	496f      	ldr	r1, [pc, #444]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e1a:	4b6a      	ldr	r3, [pc, #424]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e20:	f023 020c 	bic.w	r2, r3, #12
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e28:	4966      	ldr	r1, [pc, #408]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e3c:	4b61      	ldr	r3, [pc, #388]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4a:	495e      	ldr	r1, [pc, #376]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e5e:	4b59      	ldr	r3, [pc, #356]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6c:	4955      	ldr	r1, [pc, #340]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e80:	4b50      	ldr	r3, [pc, #320]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8e:	494d      	ldr	r1, [pc, #308]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003ea2:	4b48      	ldr	r3, [pc, #288]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb0:	4944      	ldr	r1, [pc, #272]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ec4:	4b3f      	ldr	r3, [pc, #252]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed2:	493c      	ldr	r1, [pc, #240]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003ee6:	4b37      	ldr	r3, [pc, #220]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef4:	4933      	ldr	r1, [pc, #204]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f08:	4b2e      	ldr	r3, [pc, #184]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f16:	492b      	ldr	r1, [pc, #172]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d011      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f2a:	4b26      	ldr	r3, [pc, #152]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f38:	4922      	ldr	r1, [pc, #136]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f48:	d101      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f6a:	4b16      	ldr	r3, [pc, #88]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f70:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f78:	4912      	ldr	r1, [pc, #72]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00b      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f8c:	4b0d      	ldr	r3, [pc, #52]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f9c:	4909      	ldr	r1, [pc, #36]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d006      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 80d9 	beq.w	800416a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fb8:	4b02      	ldr	r3, [pc, #8]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a01      	ldr	r2, [pc, #4]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fc2:	e001      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fca:	f7fe f88b 	bl	80020e4 <HAL_GetTick>
 8003fce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fd2:	f7fe f887 	bl	80020e4 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b64      	cmp	r3, #100	; 0x64
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e194      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fe4:	4b6c      	ldr	r3, [pc, #432]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f0      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d021      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004000:	2b00      	cmp	r3, #0
 8004002:	d11d      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004004:	4b64      	ldr	r3, [pc, #400]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400a:	0c1b      	lsrs	r3, r3, #16
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004012:	4b61      	ldr	r3, [pc, #388]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004018:	0e1b      	lsrs	r3, r3, #24
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	019a      	lsls	r2, r3, #6
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	041b      	lsls	r3, r3, #16
 800402a:	431a      	orrs	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	061b      	lsls	r3, r3, #24
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	071b      	lsls	r3, r3, #28
 8004038:	4957      	ldr	r1, [pc, #348]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d004      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004054:	d00a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800405e:	2b00      	cmp	r3, #0
 8004060:	d02e      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800406a:	d129      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800406c:	4b4a      	ldr	r3, [pc, #296]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800406e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004072:	0c1b      	lsrs	r3, r3, #16
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800407a:	4b47      	ldr	r3, [pc, #284]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800407c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004080:	0f1b      	lsrs	r3, r3, #28
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	019a      	lsls	r2, r3, #6
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	041b      	lsls	r3, r3, #16
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	061b      	lsls	r3, r3, #24
 800409a:	431a      	orrs	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	071b      	lsls	r3, r3, #28
 80040a0:	493d      	ldr	r1, [pc, #244]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040a8:	4b3b      	ldr	r3, [pc, #236]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ae:	f023 021f 	bic.w	r2, r3, #31
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	3b01      	subs	r3, #1
 80040b8:	4937      	ldr	r1, [pc, #220]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d01d      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040cc:	4b32      	ldr	r3, [pc, #200]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d2:	0e1b      	lsrs	r3, r3, #24
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040da:	4b2f      	ldr	r3, [pc, #188]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e0:	0f1b      	lsrs	r3, r3, #28
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	019a      	lsls	r2, r3, #6
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	041b      	lsls	r3, r3, #16
 80040f4:	431a      	orrs	r2, r3
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	061b      	lsls	r3, r3, #24
 80040fa:	431a      	orrs	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	071b      	lsls	r3, r3, #28
 8004100:	4925      	ldr	r1, [pc, #148]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d011      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	019a      	lsls	r2, r3, #6
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	041b      	lsls	r3, r3, #16
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	061b      	lsls	r3, r3, #24
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	071b      	lsls	r3, r3, #28
 8004130:	4919      	ldr	r1, [pc, #100]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004138:	4b17      	ldr	r3, [pc, #92]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a16      	ldr	r2, [pc, #88]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800413e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004144:	f7fd ffce 	bl	80020e4 <HAL_GetTick>
 8004148:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800414a:	e008      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800414c:	f7fd ffca 	bl	80020e4 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b64      	cmp	r3, #100	; 0x64
 8004158:	d901      	bls.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e0d7      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800415e:	4b0e      	ldr	r3, [pc, #56]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	2b01      	cmp	r3, #1
 800416e:	f040 80cd 	bne.w	800430c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004172:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a08      	ldr	r2, [pc, #32]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800417c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800417e:	f7fd ffb1 	bl	80020e4 <HAL_GetTick>
 8004182:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004184:	e00a      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004186:	f7fd ffad 	bl	80020e4 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b64      	cmp	r3, #100	; 0x64
 8004192:	d903      	bls.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e0ba      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004198:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800419c:	4b5e      	ldr	r3, [pc, #376]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041a8:	d0ed      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x682>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d009      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d02e      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d12a      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041d2:	4b51      	ldr	r3, [pc, #324]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d8:	0c1b      	lsrs	r3, r3, #16
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041e0:	4b4d      	ldr	r3, [pc, #308]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e6:	0f1b      	lsrs	r3, r3, #28
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	019a      	lsls	r2, r3, #6
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	041b      	lsls	r3, r3, #16
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	061b      	lsls	r3, r3, #24
 8004200:	431a      	orrs	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	071b      	lsls	r3, r3, #28
 8004206:	4944      	ldr	r1, [pc, #272]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800420e:	4b42      	ldr	r3, [pc, #264]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004214:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421c:	3b01      	subs	r3, #1
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	493d      	ldr	r1, [pc, #244]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d022      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004238:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800423c:	d11d      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800423e:	4b36      	ldr	r3, [pc, #216]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	0e1b      	lsrs	r3, r3, #24
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800424c:	4b32      	ldr	r3, [pc, #200]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004252:	0f1b      	lsrs	r3, r3, #28
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	019a      	lsls	r2, r3, #6
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	041b      	lsls	r3, r3, #16
 8004266:	431a      	orrs	r2, r3
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	061b      	lsls	r3, r3, #24
 800426c:	431a      	orrs	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	071b      	lsls	r3, r3, #28
 8004272:	4929      	ldr	r1, [pc, #164]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d028      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004286:	4b24      	ldr	r3, [pc, #144]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428c:	0e1b      	lsrs	r3, r3, #24
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004294:	4b20      	ldr	r3, [pc, #128]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	0c1b      	lsrs	r3, r3, #16
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	019a      	lsls	r2, r3, #6
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	041b      	lsls	r3, r3, #16
 80042ac:	431a      	orrs	r2, r3
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	061b      	lsls	r3, r3, #24
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	071b      	lsls	r3, r3, #28
 80042ba:	4917      	ldr	r1, [pc, #92]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042c2:	4b15      	ldr	r3, [pc, #84]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	4911      	ldr	r1, [pc, #68]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042d8:	4b0f      	ldr	r3, [pc, #60]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a0e      	ldr	r2, [pc, #56]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e4:	f7fd fefe 	bl	80020e4 <HAL_GetTick>
 80042e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042ec:	f7fd fefa 	bl	80020e4 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b64      	cmp	r3, #100	; 0x64
 80042f8:	d901      	bls.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e007      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042fe:	4b06      	ldr	r3, [pc, #24]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800430a:	d1ef      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3720      	adds	r7, #32
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40023800 	.word	0x40023800

0800431c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e049      	b.n	80043c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fd fbe0 	bl	8001b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3304      	adds	r3, #4
 8004358:	4619      	mov	r1, r3
 800435a:	4610      	mov	r0, r2
 800435c:	f000 ffae 	bl	80052bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d001      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e054      	b.n	800448e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a26      	ldr	r2, [pc, #152]	; (800449c <HAL_TIM_Base_Start_IT+0xd0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d022      	beq.n	800444c <HAL_TIM_Base_Start_IT+0x80>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440e:	d01d      	beq.n	800444c <HAL_TIM_Base_Start_IT+0x80>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a22      	ldr	r2, [pc, #136]	; (80044a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d018      	beq.n	800444c <HAL_TIM_Base_Start_IT+0x80>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a21      	ldr	r2, [pc, #132]	; (80044a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d013      	beq.n	800444c <HAL_TIM_Base_Start_IT+0x80>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a1f      	ldr	r2, [pc, #124]	; (80044a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00e      	beq.n	800444c <HAL_TIM_Base_Start_IT+0x80>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a1e      	ldr	r2, [pc, #120]	; (80044ac <HAL_TIM_Base_Start_IT+0xe0>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d009      	beq.n	800444c <HAL_TIM_Base_Start_IT+0x80>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1c      	ldr	r2, [pc, #112]	; (80044b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d004      	beq.n	800444c <HAL_TIM_Base_Start_IT+0x80>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1b      	ldr	r2, [pc, #108]	; (80044b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d115      	bne.n	8004478 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <HAL_TIM_Base_Start_IT+0xec>)
 8004454:	4013      	ands	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b06      	cmp	r3, #6
 800445c:	d015      	beq.n	800448a <HAL_TIM_Base_Start_IT+0xbe>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004464:	d011      	beq.n	800448a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0201 	orr.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004476:	e008      	b.n	800448a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	e000      	b.n	800448c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40010000 	.word	0x40010000
 80044a0:	40000400 	.word	0x40000400
 80044a4:	40000800 	.word	0x40000800
 80044a8:	40000c00 	.word	0x40000c00
 80044ac:	40010400 	.word	0x40010400
 80044b0:	40014000 	.word	0x40014000
 80044b4:	40001800 	.word	0x40001800
 80044b8:	00010007 	.word	0x00010007

080044bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e049      	b.n	8004562 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fd fb92 	bl	8001c0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3304      	adds	r3, #4
 80044f8:	4619      	mov	r1, r3
 80044fa:	4610      	mov	r0, r2
 80044fc:	f000 fede 	bl	80052bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d109      	bne.n	8004590 <HAL_TIM_PWM_Start+0x24>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b01      	cmp	r3, #1
 8004586:	bf14      	ite	ne
 8004588:	2301      	movne	r3, #1
 800458a:	2300      	moveq	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	e03c      	b.n	800460a <HAL_TIM_PWM_Start+0x9e>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b04      	cmp	r3, #4
 8004594:	d109      	bne.n	80045aa <HAL_TIM_PWM_Start+0x3e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b01      	cmp	r3, #1
 80045a0:	bf14      	ite	ne
 80045a2:	2301      	movne	r3, #1
 80045a4:	2300      	moveq	r3, #0
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	e02f      	b.n	800460a <HAL_TIM_PWM_Start+0x9e>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d109      	bne.n	80045c4 <HAL_TIM_PWM_Start+0x58>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	bf14      	ite	ne
 80045bc:	2301      	movne	r3, #1
 80045be:	2300      	moveq	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	e022      	b.n	800460a <HAL_TIM_PWM_Start+0x9e>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2b0c      	cmp	r3, #12
 80045c8:	d109      	bne.n	80045de <HAL_TIM_PWM_Start+0x72>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	bf14      	ite	ne
 80045d6:	2301      	movne	r3, #1
 80045d8:	2300      	moveq	r3, #0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	e015      	b.n	800460a <HAL_TIM_PWM_Start+0x9e>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d109      	bne.n	80045f8 <HAL_TIM_PWM_Start+0x8c>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	bf14      	ite	ne
 80045f0:	2301      	movne	r3, #1
 80045f2:	2300      	moveq	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	e008      	b.n	800460a <HAL_TIM_PWM_Start+0x9e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	bf14      	ite	ne
 8004604:	2301      	movne	r3, #1
 8004606:	2300      	moveq	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e092      	b.n	8004738 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d104      	bne.n	8004622 <HAL_TIM_PWM_Start+0xb6>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004620:	e023      	b.n	800466a <HAL_TIM_PWM_Start+0xfe>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b04      	cmp	r3, #4
 8004626:	d104      	bne.n	8004632 <HAL_TIM_PWM_Start+0xc6>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004630:	e01b      	b.n	800466a <HAL_TIM_PWM_Start+0xfe>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b08      	cmp	r3, #8
 8004636:	d104      	bne.n	8004642 <HAL_TIM_PWM_Start+0xd6>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004640:	e013      	b.n	800466a <HAL_TIM_PWM_Start+0xfe>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b0c      	cmp	r3, #12
 8004646:	d104      	bne.n	8004652 <HAL_TIM_PWM_Start+0xe6>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004650:	e00b      	b.n	800466a <HAL_TIM_PWM_Start+0xfe>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b10      	cmp	r3, #16
 8004656:	d104      	bne.n	8004662 <HAL_TIM_PWM_Start+0xf6>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004660:	e003      	b.n	800466a <HAL_TIM_PWM_Start+0xfe>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2202      	movs	r2, #2
 8004666:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2201      	movs	r2, #1
 8004670:	6839      	ldr	r1, [r7, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f001 fae4 	bl	8005c40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a30      	ldr	r2, [pc, #192]	; (8004740 <HAL_TIM_PWM_Start+0x1d4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d004      	beq.n	800468c <HAL_TIM_PWM_Start+0x120>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a2f      	ldr	r2, [pc, #188]	; (8004744 <HAL_TIM_PWM_Start+0x1d8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d101      	bne.n	8004690 <HAL_TIM_PWM_Start+0x124>
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <HAL_TIM_PWM_Start+0x126>
 8004690:	2300      	movs	r3, #0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d007      	beq.n	80046a6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a25      	ldr	r2, [pc, #148]	; (8004740 <HAL_TIM_PWM_Start+0x1d4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d022      	beq.n	80046f6 <HAL_TIM_PWM_Start+0x18a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b8:	d01d      	beq.n	80046f6 <HAL_TIM_PWM_Start+0x18a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a22      	ldr	r2, [pc, #136]	; (8004748 <HAL_TIM_PWM_Start+0x1dc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d018      	beq.n	80046f6 <HAL_TIM_PWM_Start+0x18a>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a20      	ldr	r2, [pc, #128]	; (800474c <HAL_TIM_PWM_Start+0x1e0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d013      	beq.n	80046f6 <HAL_TIM_PWM_Start+0x18a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a1f      	ldr	r2, [pc, #124]	; (8004750 <HAL_TIM_PWM_Start+0x1e4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00e      	beq.n	80046f6 <HAL_TIM_PWM_Start+0x18a>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a19      	ldr	r2, [pc, #100]	; (8004744 <HAL_TIM_PWM_Start+0x1d8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d009      	beq.n	80046f6 <HAL_TIM_PWM_Start+0x18a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a1b      	ldr	r2, [pc, #108]	; (8004754 <HAL_TIM_PWM_Start+0x1e8>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d004      	beq.n	80046f6 <HAL_TIM_PWM_Start+0x18a>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a19      	ldr	r2, [pc, #100]	; (8004758 <HAL_TIM_PWM_Start+0x1ec>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d115      	bne.n	8004722 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	4b17      	ldr	r3, [pc, #92]	; (800475c <HAL_TIM_PWM_Start+0x1f0>)
 80046fe:	4013      	ands	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b06      	cmp	r3, #6
 8004706:	d015      	beq.n	8004734 <HAL_TIM_PWM_Start+0x1c8>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470e:	d011      	beq.n	8004734 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004720:	e008      	b.n	8004734 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0201 	orr.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	e000      	b.n	8004736 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004734:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40010000 	.word	0x40010000
 8004744:	40010400 	.word	0x40010400
 8004748:	40000400 	.word	0x40000400
 800474c:	40000800 	.word	0x40000800
 8004750:	40000c00 	.word	0x40000c00
 8004754:	40014000 	.word	0x40014000
 8004758:	40001800 	.word	0x40001800
 800475c:	00010007 	.word	0x00010007

08004760 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e049      	b.n	8004806 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f841 	bl	800480e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3304      	adds	r3, #4
 800479c:	4619      	mov	r1, r3
 800479e:	4610      	mov	r0, r2
 80047a0:	f000 fd8c 	bl	80052bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
	...

08004824 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d104      	bne.n	8004842 <HAL_TIM_IC_Start_IT+0x1e>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800483e:	b2db      	uxtb	r3, r3
 8004840:	e023      	b.n	800488a <HAL_TIM_IC_Start_IT+0x66>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b04      	cmp	r3, #4
 8004846:	d104      	bne.n	8004852 <HAL_TIM_IC_Start_IT+0x2e>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800484e:	b2db      	uxtb	r3, r3
 8004850:	e01b      	b.n	800488a <HAL_TIM_IC_Start_IT+0x66>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b08      	cmp	r3, #8
 8004856:	d104      	bne.n	8004862 <HAL_TIM_IC_Start_IT+0x3e>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800485e:	b2db      	uxtb	r3, r3
 8004860:	e013      	b.n	800488a <HAL_TIM_IC_Start_IT+0x66>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b0c      	cmp	r3, #12
 8004866:	d104      	bne.n	8004872 <HAL_TIM_IC_Start_IT+0x4e>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800486e:	b2db      	uxtb	r3, r3
 8004870:	e00b      	b.n	800488a <HAL_TIM_IC_Start_IT+0x66>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b10      	cmp	r3, #16
 8004876:	d104      	bne.n	8004882 <HAL_TIM_IC_Start_IT+0x5e>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800487e:	b2db      	uxtb	r3, r3
 8004880:	e003      	b.n	800488a <HAL_TIM_IC_Start_IT+0x66>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004888:	b2db      	uxtb	r3, r3
 800488a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d104      	bne.n	800489c <HAL_TIM_IC_Start_IT+0x78>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004898:	b2db      	uxtb	r3, r3
 800489a:	e013      	b.n	80048c4 <HAL_TIM_IC_Start_IT+0xa0>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d104      	bne.n	80048ac <HAL_TIM_IC_Start_IT+0x88>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	e00b      	b.n	80048c4 <HAL_TIM_IC_Start_IT+0xa0>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d104      	bne.n	80048bc <HAL_TIM_IC_Start_IT+0x98>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	e003      	b.n	80048c4 <HAL_TIM_IC_Start_IT+0xa0>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80048c6:	7bbb      	ldrb	r3, [r7, #14]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d102      	bne.n	80048d2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80048cc:	7b7b      	ldrb	r3, [r7, #13]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d001      	beq.n	80048d6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e0e2      	b.n	8004a9c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d104      	bne.n	80048e6 <HAL_TIM_IC_Start_IT+0xc2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e4:	e023      	b.n	800492e <HAL_TIM_IC_Start_IT+0x10a>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d104      	bne.n	80048f6 <HAL_TIM_IC_Start_IT+0xd2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f4:	e01b      	b.n	800492e <HAL_TIM_IC_Start_IT+0x10a>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d104      	bne.n	8004906 <HAL_TIM_IC_Start_IT+0xe2>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004904:	e013      	b.n	800492e <HAL_TIM_IC_Start_IT+0x10a>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b0c      	cmp	r3, #12
 800490a:	d104      	bne.n	8004916 <HAL_TIM_IC_Start_IT+0xf2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004914:	e00b      	b.n	800492e <HAL_TIM_IC_Start_IT+0x10a>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b10      	cmp	r3, #16
 800491a:	d104      	bne.n	8004926 <HAL_TIM_IC_Start_IT+0x102>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004924:	e003      	b.n	800492e <HAL_TIM_IC_Start_IT+0x10a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d104      	bne.n	800493e <HAL_TIM_IC_Start_IT+0x11a>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800493c:	e013      	b.n	8004966 <HAL_TIM_IC_Start_IT+0x142>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b04      	cmp	r3, #4
 8004942:	d104      	bne.n	800494e <HAL_TIM_IC_Start_IT+0x12a>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800494c:	e00b      	b.n	8004966 <HAL_TIM_IC_Start_IT+0x142>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b08      	cmp	r3, #8
 8004952:	d104      	bne.n	800495e <HAL_TIM_IC_Start_IT+0x13a>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800495c:	e003      	b.n	8004966 <HAL_TIM_IC_Start_IT+0x142>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2202      	movs	r2, #2
 8004962:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b0c      	cmp	r3, #12
 800496a:	d841      	bhi.n	80049f0 <HAL_TIM_IC_Start_IT+0x1cc>
 800496c:	a201      	add	r2, pc, #4	; (adr r2, 8004974 <HAL_TIM_IC_Start_IT+0x150>)
 800496e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004972:	bf00      	nop
 8004974:	080049a9 	.word	0x080049a9
 8004978:	080049f1 	.word	0x080049f1
 800497c:	080049f1 	.word	0x080049f1
 8004980:	080049f1 	.word	0x080049f1
 8004984:	080049bb 	.word	0x080049bb
 8004988:	080049f1 	.word	0x080049f1
 800498c:	080049f1 	.word	0x080049f1
 8004990:	080049f1 	.word	0x080049f1
 8004994:	080049cd 	.word	0x080049cd
 8004998:	080049f1 	.word	0x080049f1
 800499c:	080049f1 	.word	0x080049f1
 80049a0:	080049f1 	.word	0x080049f1
 80049a4:	080049df 	.word	0x080049df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0202 	orr.w	r2, r2, #2
 80049b6:	60da      	str	r2, [r3, #12]
      break;
 80049b8:	e01d      	b.n	80049f6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0204 	orr.w	r2, r2, #4
 80049c8:	60da      	str	r2, [r3, #12]
      break;
 80049ca:	e014      	b.n	80049f6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0208 	orr.w	r2, r2, #8
 80049da:	60da      	str	r2, [r3, #12]
      break;
 80049dc:	e00b      	b.n	80049f6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0210 	orr.w	r2, r2, #16
 80049ec:	60da      	str	r2, [r3, #12]
      break;
 80049ee:	e002      	b.n	80049f6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
      break;
 80049f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d14e      	bne.n	8004a9a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2201      	movs	r2, #1
 8004a02:	6839      	ldr	r1, [r7, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f001 f91b 	bl	8005c40 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a25      	ldr	r2, [pc, #148]	; (8004aa4 <HAL_TIM_IC_Start_IT+0x280>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d022      	beq.n	8004a5a <HAL_TIM_IC_Start_IT+0x236>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a1c:	d01d      	beq.n	8004a5a <HAL_TIM_IC_Start_IT+0x236>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a21      	ldr	r2, [pc, #132]	; (8004aa8 <HAL_TIM_IC_Start_IT+0x284>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d018      	beq.n	8004a5a <HAL_TIM_IC_Start_IT+0x236>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a1f      	ldr	r2, [pc, #124]	; (8004aac <HAL_TIM_IC_Start_IT+0x288>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <HAL_TIM_IC_Start_IT+0x236>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1e      	ldr	r2, [pc, #120]	; (8004ab0 <HAL_TIM_IC_Start_IT+0x28c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00e      	beq.n	8004a5a <HAL_TIM_IC_Start_IT+0x236>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a1c      	ldr	r2, [pc, #112]	; (8004ab4 <HAL_TIM_IC_Start_IT+0x290>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d009      	beq.n	8004a5a <HAL_TIM_IC_Start_IT+0x236>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1b      	ldr	r2, [pc, #108]	; (8004ab8 <HAL_TIM_IC_Start_IT+0x294>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d004      	beq.n	8004a5a <HAL_TIM_IC_Start_IT+0x236>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a19      	ldr	r2, [pc, #100]	; (8004abc <HAL_TIM_IC_Start_IT+0x298>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d115      	bne.n	8004a86 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	4b17      	ldr	r3, [pc, #92]	; (8004ac0 <HAL_TIM_IC_Start_IT+0x29c>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b06      	cmp	r3, #6
 8004a6a:	d015      	beq.n	8004a98 <HAL_TIM_IC_Start_IT+0x274>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a72:	d011      	beq.n	8004a98 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a84:	e008      	b.n	8004a98 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0201 	orr.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	e000      	b.n	8004a9a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a98:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40010000 	.word	0x40010000
 8004aa8:	40000400 	.word	0x40000400
 8004aac:	40000800 	.word	0x40000800
 8004ab0:	40000c00 	.word	0x40000c00
 8004ab4:	40010400 	.word	0x40010400
 8004ab8:	40014000 	.word	0x40014000
 8004abc:	40001800 	.word	0x40001800
 8004ac0:	00010007 	.word	0x00010007

08004ac4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d122      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d11b      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0202 	mvn.w	r2, #2
 8004af0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7fc f9e6 	bl	8000ed8 <HAL_TIM_IC_CaptureCallback>
 8004b0c:	e005      	b.n	8004b1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fbb6 	bl	8005280 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fbbd 	bl	8005294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d122      	bne.n	8004b74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d11b      	bne.n	8004b74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0204 	mvn.w	r2, #4
 8004b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fc f9bc 	bl	8000ed8 <HAL_TIM_IC_CaptureCallback>
 8004b60:	e005      	b.n	8004b6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fb8c 	bl	8005280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fb93 	bl	8005294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d122      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d11b      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0208 	mvn.w	r2, #8
 8004b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2204      	movs	r2, #4
 8004b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fc f992 	bl	8000ed8 <HAL_TIM_IC_CaptureCallback>
 8004bb4:	e005      	b.n	8004bc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fb62 	bl	8005280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fb69 	bl	8005294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0310 	and.w	r3, r3, #16
 8004bd2:	2b10      	cmp	r3, #16
 8004bd4:	d122      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b10      	cmp	r3, #16
 8004be2:	d11b      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0210 	mvn.w	r2, #16
 8004bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2208      	movs	r2, #8
 8004bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fc f968 	bl	8000ed8 <HAL_TIM_IC_CaptureCallback>
 8004c08:	e005      	b.n	8004c16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fb38 	bl	8005280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 fb3f 	bl	8005294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d10e      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d107      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0201 	mvn.w	r2, #1
 8004c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fc f926 	bl	8000e94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c52:	2b80      	cmp	r3, #128	; 0x80
 8004c54:	d10e      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c60:	2b80      	cmp	r3, #128	; 0x80
 8004c62:	d107      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f001 f8a4 	bl	8005dbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c82:	d10e      	bne.n	8004ca2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8e:	2b80      	cmp	r3, #128	; 0x80
 8004c90:	d107      	bne.n	8004ca2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f001 f897 	bl	8005dd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cac:	2b40      	cmp	r3, #64	; 0x40
 8004cae:	d10e      	bne.n	8004cce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cba:	2b40      	cmp	r3, #64	; 0x40
 8004cbc:	d107      	bne.n	8004cce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 faed 	bl	80052a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	d10e      	bne.n	8004cfa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	d107      	bne.n	8004cfa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f06f 0220 	mvn.w	r2, #32
 8004cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f001 f857 	bl	8005da8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cfa:	bf00      	nop
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b086      	sub	sp, #24
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e088      	b.n	8004e32 <HAL_TIM_IC_ConfigChannel+0x130>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d11b      	bne.n	8004d66 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004d3e:	f000 fdbb 	bl	80058b8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	699a      	ldr	r2, [r3, #24]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 020c 	bic.w	r2, r2, #12
 8004d50:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6999      	ldr	r1, [r3, #24]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	619a      	str	r2, [r3, #24]
 8004d64:	e060      	b.n	8004e28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d11c      	bne.n	8004da6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004d7c:	f000 fe3f 	bl	80059fe <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d8e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6999      	ldr	r1, [r3, #24]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	021a      	lsls	r2, r3, #8
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	619a      	str	r2, [r3, #24]
 8004da4:	e040      	b.n	8004e28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d11b      	bne.n	8004de4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004dbc:	f000 fe8c 	bl	8005ad8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69da      	ldr	r2, [r3, #28]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 020c 	bic.w	r2, r2, #12
 8004dce:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69d9      	ldr	r1, [r3, #28]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	61da      	str	r2, [r3, #28]
 8004de2:	e021      	b.n	8004e28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b0c      	cmp	r3, #12
 8004de8:	d11c      	bne.n	8004e24 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004dfa:	f000 fea9 	bl	8005b50 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e0c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69d9      	ldr	r1, [r3, #28]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	021a      	lsls	r2, r3, #8
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	61da      	str	r2, [r3, #28]
 8004e22:	e001      	b.n	8004e28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e0ff      	b.n	800505a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b14      	cmp	r3, #20
 8004e66:	f200 80f0 	bhi.w	800504a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e6a:	a201      	add	r2, pc, #4	; (adr r2, 8004e70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e70:	08004ec5 	.word	0x08004ec5
 8004e74:	0800504b 	.word	0x0800504b
 8004e78:	0800504b 	.word	0x0800504b
 8004e7c:	0800504b 	.word	0x0800504b
 8004e80:	08004f05 	.word	0x08004f05
 8004e84:	0800504b 	.word	0x0800504b
 8004e88:	0800504b 	.word	0x0800504b
 8004e8c:	0800504b 	.word	0x0800504b
 8004e90:	08004f47 	.word	0x08004f47
 8004e94:	0800504b 	.word	0x0800504b
 8004e98:	0800504b 	.word	0x0800504b
 8004e9c:	0800504b 	.word	0x0800504b
 8004ea0:	08004f87 	.word	0x08004f87
 8004ea4:	0800504b 	.word	0x0800504b
 8004ea8:	0800504b 	.word	0x0800504b
 8004eac:	0800504b 	.word	0x0800504b
 8004eb0:	08004fc9 	.word	0x08004fc9
 8004eb4:	0800504b 	.word	0x0800504b
 8004eb8:	0800504b 	.word	0x0800504b
 8004ebc:	0800504b 	.word	0x0800504b
 8004ec0:	08005009 	.word	0x08005009
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fa96 	bl	80053fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0208 	orr.w	r2, r2, #8
 8004ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0204 	bic.w	r2, r2, #4
 8004eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6999      	ldr	r1, [r3, #24]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	691a      	ldr	r2, [r3, #16]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	619a      	str	r2, [r3, #24]
      break;
 8004f02:	e0a5      	b.n	8005050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fae8 	bl	80054e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6999      	ldr	r1, [r3, #24]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	021a      	lsls	r2, r3, #8
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	619a      	str	r2, [r3, #24]
      break;
 8004f44:	e084      	b.n	8005050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fb3f 	bl	80055d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69da      	ldr	r2, [r3, #28]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0208 	orr.w	r2, r2, #8
 8004f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69da      	ldr	r2, [r3, #28]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0204 	bic.w	r2, r2, #4
 8004f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69d9      	ldr	r1, [r3, #28]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	61da      	str	r2, [r3, #28]
      break;
 8004f84:	e064      	b.n	8005050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68b9      	ldr	r1, [r7, #8]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 fb95 	bl	80056bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69da      	ldr	r2, [r3, #28]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69da      	ldr	r2, [r3, #28]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69d9      	ldr	r1, [r3, #28]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	021a      	lsls	r2, r3, #8
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	61da      	str	r2, [r3, #28]
      break;
 8004fc6:	e043      	b.n	8005050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68b9      	ldr	r1, [r7, #8]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fbcc 	bl	800576c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0208 	orr.w	r2, r2, #8
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0204 	bic.w	r2, r2, #4
 8004ff2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005006:	e023      	b.n	8005050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68b9      	ldr	r1, [r7, #8]
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fbfe 	bl	8005810 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005022:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005032:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	021a      	lsls	r2, r3, #8
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005048:	e002      	b.n	8005050 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	75fb      	strb	r3, [r7, #23]
      break;
 800504e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005058:	7dfb      	ldrb	r3, [r7, #23]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop

08005064 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_TIM_ConfigClockSource+0x1c>
 800507c:	2302      	movs	r3, #2
 800507e:	e0b4      	b.n	80051ea <HAL_TIM_ConfigClockSource+0x186>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	4b56      	ldr	r3, [pc, #344]	; (80051f4 <HAL_TIM_ConfigClockSource+0x190>)
 800509c:	4013      	ands	r3, r2
 800509e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050b8:	d03e      	beq.n	8005138 <HAL_TIM_ConfigClockSource+0xd4>
 80050ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050be:	f200 8087 	bhi.w	80051d0 <HAL_TIM_ConfigClockSource+0x16c>
 80050c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c6:	f000 8086 	beq.w	80051d6 <HAL_TIM_ConfigClockSource+0x172>
 80050ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ce:	d87f      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x16c>
 80050d0:	2b70      	cmp	r3, #112	; 0x70
 80050d2:	d01a      	beq.n	800510a <HAL_TIM_ConfigClockSource+0xa6>
 80050d4:	2b70      	cmp	r3, #112	; 0x70
 80050d6:	d87b      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x16c>
 80050d8:	2b60      	cmp	r3, #96	; 0x60
 80050da:	d050      	beq.n	800517e <HAL_TIM_ConfigClockSource+0x11a>
 80050dc:	2b60      	cmp	r3, #96	; 0x60
 80050de:	d877      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x16c>
 80050e0:	2b50      	cmp	r3, #80	; 0x50
 80050e2:	d03c      	beq.n	800515e <HAL_TIM_ConfigClockSource+0xfa>
 80050e4:	2b50      	cmp	r3, #80	; 0x50
 80050e6:	d873      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x16c>
 80050e8:	2b40      	cmp	r3, #64	; 0x40
 80050ea:	d058      	beq.n	800519e <HAL_TIM_ConfigClockSource+0x13a>
 80050ec:	2b40      	cmp	r3, #64	; 0x40
 80050ee:	d86f      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x16c>
 80050f0:	2b30      	cmp	r3, #48	; 0x30
 80050f2:	d064      	beq.n	80051be <HAL_TIM_ConfigClockSource+0x15a>
 80050f4:	2b30      	cmp	r3, #48	; 0x30
 80050f6:	d86b      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x16c>
 80050f8:	2b20      	cmp	r3, #32
 80050fa:	d060      	beq.n	80051be <HAL_TIM_ConfigClockSource+0x15a>
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d867      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x16c>
 8005100:	2b00      	cmp	r3, #0
 8005102:	d05c      	beq.n	80051be <HAL_TIM_ConfigClockSource+0x15a>
 8005104:	2b10      	cmp	r3, #16
 8005106:	d05a      	beq.n	80051be <HAL_TIM_ConfigClockSource+0x15a>
 8005108:	e062      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800511a:	f000 fd71 	bl	8005c00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800512c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	609a      	str	r2, [r3, #8]
      break;
 8005136:	e04f      	b.n	80051d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005148:	f000 fd5a 	bl	8005c00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800515a:	609a      	str	r2, [r3, #8]
      break;
 800515c:	e03c      	b.n	80051d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800516a:	461a      	mov	r2, r3
 800516c:	f000 fc18 	bl	80059a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2150      	movs	r1, #80	; 0x50
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fd27 	bl	8005bca <TIM_ITRx_SetConfig>
      break;
 800517c:	e02c      	b.n	80051d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800518a:	461a      	mov	r2, r3
 800518c:	f000 fc74 	bl	8005a78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2160      	movs	r1, #96	; 0x60
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fd17 	bl	8005bca <TIM_ITRx_SetConfig>
      break;
 800519c:	e01c      	b.n	80051d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051aa:	461a      	mov	r2, r3
 80051ac:	f000 fbf8 	bl	80059a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2140      	movs	r1, #64	; 0x40
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fd07 	bl	8005bca <TIM_ITRx_SetConfig>
      break;
 80051bc:	e00c      	b.n	80051d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4619      	mov	r1, r3
 80051c8:	4610      	mov	r0, r2
 80051ca:	f000 fcfe 	bl	8005bca <TIM_ITRx_SetConfig>
      break;
 80051ce:	e003      	b.n	80051d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	73fb      	strb	r3, [r7, #15]
      break;
 80051d4:	e000      	b.n	80051d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	fffeff88 	.word	0xfffeff88

080051f8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b0c      	cmp	r3, #12
 800520a:	d831      	bhi.n	8005270 <HAL_TIM_ReadCapturedValue+0x78>
 800520c:	a201      	add	r2, pc, #4	; (adr r2, 8005214 <HAL_TIM_ReadCapturedValue+0x1c>)
 800520e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005212:	bf00      	nop
 8005214:	08005249 	.word	0x08005249
 8005218:	08005271 	.word	0x08005271
 800521c:	08005271 	.word	0x08005271
 8005220:	08005271 	.word	0x08005271
 8005224:	08005253 	.word	0x08005253
 8005228:	08005271 	.word	0x08005271
 800522c:	08005271 	.word	0x08005271
 8005230:	08005271 	.word	0x08005271
 8005234:	0800525d 	.word	0x0800525d
 8005238:	08005271 	.word	0x08005271
 800523c:	08005271 	.word	0x08005271
 8005240:	08005271 	.word	0x08005271
 8005244:	08005267 	.word	0x08005267
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524e:	60fb      	str	r3, [r7, #12]

      break;
 8005250:	e00f      	b.n	8005272 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	60fb      	str	r3, [r7, #12]

      break;
 800525a:	e00a      	b.n	8005272 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005262:	60fb      	str	r3, [r7, #12]

      break;
 8005264:	e005      	b.n	8005272 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	60fb      	str	r3, [r7, #12]

      break;
 800526e:	e000      	b.n	8005272 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005270:	bf00      	nop
  }

  return tmpreg;
 8005272:	68fb      	ldr	r3, [r7, #12]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a40      	ldr	r2, [pc, #256]	; (80053d0 <TIM_Base_SetConfig+0x114>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d013      	beq.n	80052fc <TIM_Base_SetConfig+0x40>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052da:	d00f      	beq.n	80052fc <TIM_Base_SetConfig+0x40>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a3d      	ldr	r2, [pc, #244]	; (80053d4 <TIM_Base_SetConfig+0x118>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00b      	beq.n	80052fc <TIM_Base_SetConfig+0x40>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a3c      	ldr	r2, [pc, #240]	; (80053d8 <TIM_Base_SetConfig+0x11c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d007      	beq.n	80052fc <TIM_Base_SetConfig+0x40>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a3b      	ldr	r2, [pc, #236]	; (80053dc <TIM_Base_SetConfig+0x120>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_Base_SetConfig+0x40>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a3a      	ldr	r2, [pc, #232]	; (80053e0 <TIM_Base_SetConfig+0x124>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d108      	bne.n	800530e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a2f      	ldr	r2, [pc, #188]	; (80053d0 <TIM_Base_SetConfig+0x114>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d02b      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531c:	d027      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a2c      	ldr	r2, [pc, #176]	; (80053d4 <TIM_Base_SetConfig+0x118>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d023      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a2b      	ldr	r2, [pc, #172]	; (80053d8 <TIM_Base_SetConfig+0x11c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d01f      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a2a      	ldr	r2, [pc, #168]	; (80053dc <TIM_Base_SetConfig+0x120>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d01b      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a29      	ldr	r2, [pc, #164]	; (80053e0 <TIM_Base_SetConfig+0x124>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d017      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a28      	ldr	r2, [pc, #160]	; (80053e4 <TIM_Base_SetConfig+0x128>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a27      	ldr	r2, [pc, #156]	; (80053e8 <TIM_Base_SetConfig+0x12c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00f      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a26      	ldr	r2, [pc, #152]	; (80053ec <TIM_Base_SetConfig+0x130>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00b      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a25      	ldr	r2, [pc, #148]	; (80053f0 <TIM_Base_SetConfig+0x134>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d007      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a24      	ldr	r2, [pc, #144]	; (80053f4 <TIM_Base_SetConfig+0x138>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d003      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a23      	ldr	r2, [pc, #140]	; (80053f8 <TIM_Base_SetConfig+0x13c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d108      	bne.n	8005380 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a0a      	ldr	r2, [pc, #40]	; (80053d0 <TIM_Base_SetConfig+0x114>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d003      	beq.n	80053b4 <TIM_Base_SetConfig+0xf8>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a0c      	ldr	r2, [pc, #48]	; (80053e0 <TIM_Base_SetConfig+0x124>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d103      	bne.n	80053bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	615a      	str	r2, [r3, #20]
}
 80053c2:	bf00      	nop
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40010000 	.word	0x40010000
 80053d4:	40000400 	.word	0x40000400
 80053d8:	40000800 	.word	0x40000800
 80053dc:	40000c00 	.word	0x40000c00
 80053e0:	40010400 	.word	0x40010400
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40014400 	.word	0x40014400
 80053ec:	40014800 	.word	0x40014800
 80053f0:	40001800 	.word	0x40001800
 80053f4:	40001c00 	.word	0x40001c00
 80053f8:	40002000 	.word	0x40002000

080053fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f023 0201 	bic.w	r2, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4b2b      	ldr	r3, [pc, #172]	; (80054d4 <TIM_OC1_SetConfig+0xd8>)
 8005428:	4013      	ands	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0303 	bic.w	r3, r3, #3
 8005432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f023 0302 	bic.w	r3, r3, #2
 8005444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a21      	ldr	r2, [pc, #132]	; (80054d8 <TIM_OC1_SetConfig+0xdc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d003      	beq.n	8005460 <TIM_OC1_SetConfig+0x64>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a20      	ldr	r2, [pc, #128]	; (80054dc <TIM_OC1_SetConfig+0xe0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d10c      	bne.n	800547a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f023 0308 	bic.w	r3, r3, #8
 8005466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f023 0304 	bic.w	r3, r3, #4
 8005478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a16      	ldr	r2, [pc, #88]	; (80054d8 <TIM_OC1_SetConfig+0xdc>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d003      	beq.n	800548a <TIM_OC1_SetConfig+0x8e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a15      	ldr	r2, [pc, #84]	; (80054dc <TIM_OC1_SetConfig+0xe0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d111      	bne.n	80054ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	621a      	str	r2, [r3, #32]
}
 80054c8:	bf00      	nop
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	fffeff8f 	.word	0xfffeff8f
 80054d8:	40010000 	.word	0x40010000
 80054dc:	40010400 	.word	0x40010400

080054e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	f023 0210 	bic.w	r2, r3, #16
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	4b2e      	ldr	r3, [pc, #184]	; (80055c4 <TIM_OC2_SetConfig+0xe4>)
 800550c:	4013      	ands	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	021b      	lsls	r3, r3, #8
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	4313      	orrs	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f023 0320 	bic.w	r3, r3, #32
 800552a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	4313      	orrs	r3, r2
 8005536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a23      	ldr	r2, [pc, #140]	; (80055c8 <TIM_OC2_SetConfig+0xe8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d003      	beq.n	8005548 <TIM_OC2_SetConfig+0x68>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a22      	ldr	r2, [pc, #136]	; (80055cc <TIM_OC2_SetConfig+0xec>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d10d      	bne.n	8005564 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800554e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005562:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a18      	ldr	r2, [pc, #96]	; (80055c8 <TIM_OC2_SetConfig+0xe8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d003      	beq.n	8005574 <TIM_OC2_SetConfig+0x94>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a17      	ldr	r2, [pc, #92]	; (80055cc <TIM_OC2_SetConfig+0xec>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d113      	bne.n	800559c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800557a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005582:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	4313      	orrs	r3, r2
 800559a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	621a      	str	r2, [r3, #32]
}
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	feff8fff 	.word	0xfeff8fff
 80055c8:	40010000 	.word	0x40010000
 80055cc:	40010400 	.word	0x40010400

080055d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4b2d      	ldr	r3, [pc, #180]	; (80056b0 <TIM_OC3_SetConfig+0xe0>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0303 	bic.w	r3, r3, #3
 8005606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	021b      	lsls	r3, r3, #8
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	4313      	orrs	r3, r2
 8005624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a22      	ldr	r2, [pc, #136]	; (80056b4 <TIM_OC3_SetConfig+0xe4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d003      	beq.n	8005636 <TIM_OC3_SetConfig+0x66>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a21      	ldr	r2, [pc, #132]	; (80056b8 <TIM_OC3_SetConfig+0xe8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d10d      	bne.n	8005652 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800563c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	021b      	lsls	r3, r3, #8
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a17      	ldr	r2, [pc, #92]	; (80056b4 <TIM_OC3_SetConfig+0xe4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d003      	beq.n	8005662 <TIM_OC3_SetConfig+0x92>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a16      	ldr	r2, [pc, #88]	; (80056b8 <TIM_OC3_SetConfig+0xe8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d113      	bne.n	800568a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	621a      	str	r2, [r3, #32]
}
 80056a4:	bf00      	nop
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	fffeff8f 	.word	0xfffeff8f
 80056b4:	40010000 	.word	0x40010000
 80056b8:	40010400 	.word	0x40010400

080056bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4b1e      	ldr	r3, [pc, #120]	; (8005760 <TIM_OC4_SetConfig+0xa4>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	031b      	lsls	r3, r3, #12
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a13      	ldr	r2, [pc, #76]	; (8005764 <TIM_OC4_SetConfig+0xa8>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d003      	beq.n	8005724 <TIM_OC4_SetConfig+0x68>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a12      	ldr	r2, [pc, #72]	; (8005768 <TIM_OC4_SetConfig+0xac>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d109      	bne.n	8005738 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800572a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	019b      	lsls	r3, r3, #6
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	feff8fff 	.word	0xfeff8fff
 8005764:	40010000 	.word	0x40010000
 8005768:	40010400 	.word	0x40010400

0800576c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4b1b      	ldr	r3, [pc, #108]	; (8005804 <TIM_OC5_SetConfig+0x98>)
 8005798:	4013      	ands	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80057ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	041b      	lsls	r3, r3, #16
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a12      	ldr	r2, [pc, #72]	; (8005808 <TIM_OC5_SetConfig+0x9c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d003      	beq.n	80057ca <TIM_OC5_SetConfig+0x5e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a11      	ldr	r2, [pc, #68]	; (800580c <TIM_OC5_SetConfig+0xa0>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d109      	bne.n	80057de <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	621a      	str	r2, [r3, #32]
}
 80057f8:	bf00      	nop
 80057fa:	371c      	adds	r7, #28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	fffeff8f 	.word	0xfffeff8f
 8005808:	40010000 	.word	0x40010000
 800580c:	40010400 	.word	0x40010400

08005810 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4b1c      	ldr	r3, [pc, #112]	; (80058ac <TIM_OC6_SetConfig+0x9c>)
 800583c:	4013      	ands	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4313      	orrs	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005852:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	051b      	lsls	r3, r3, #20
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a13      	ldr	r2, [pc, #76]	; (80058b0 <TIM_OC6_SetConfig+0xa0>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d003      	beq.n	8005870 <TIM_OC6_SetConfig+0x60>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a12      	ldr	r2, [pc, #72]	; (80058b4 <TIM_OC6_SetConfig+0xa4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d109      	bne.n	8005884 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005876:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	029b      	lsls	r3, r3, #10
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	4313      	orrs	r3, r2
 8005882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	621a      	str	r2, [r3, #32]
}
 800589e:	bf00      	nop
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	feff8fff 	.word	0xfeff8fff
 80058b0:	40010000 	.word	0x40010000
 80058b4:	40010400 	.word	0x40010400

080058b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	f023 0201 	bic.w	r2, r3, #1
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4a28      	ldr	r2, [pc, #160]	; (8005984 <TIM_TI1_SetConfig+0xcc>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d01b      	beq.n	800591e <TIM_TI1_SetConfig+0x66>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ec:	d017      	beq.n	800591e <TIM_TI1_SetConfig+0x66>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4a25      	ldr	r2, [pc, #148]	; (8005988 <TIM_TI1_SetConfig+0xd0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d013      	beq.n	800591e <TIM_TI1_SetConfig+0x66>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4a24      	ldr	r2, [pc, #144]	; (800598c <TIM_TI1_SetConfig+0xd4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00f      	beq.n	800591e <TIM_TI1_SetConfig+0x66>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4a23      	ldr	r2, [pc, #140]	; (8005990 <TIM_TI1_SetConfig+0xd8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00b      	beq.n	800591e <TIM_TI1_SetConfig+0x66>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4a22      	ldr	r2, [pc, #136]	; (8005994 <TIM_TI1_SetConfig+0xdc>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d007      	beq.n	800591e <TIM_TI1_SetConfig+0x66>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4a21      	ldr	r2, [pc, #132]	; (8005998 <TIM_TI1_SetConfig+0xe0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d003      	beq.n	800591e <TIM_TI1_SetConfig+0x66>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4a20      	ldr	r2, [pc, #128]	; (800599c <TIM_TI1_SetConfig+0xe4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d101      	bne.n	8005922 <TIM_TI1_SetConfig+0x6a>
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <TIM_TI1_SetConfig+0x6c>
 8005922:	2300      	movs	r3, #0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f023 0303 	bic.w	r3, r3, #3
 800592e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4313      	orrs	r3, r2
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	e003      	b.n	8005942 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f043 0301 	orr.w	r3, r3, #1
 8005940:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005948:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	b2db      	uxtb	r3, r3
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	4313      	orrs	r3, r2
 8005954:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f023 030a 	bic.w	r3, r3, #10
 800595c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f003 030a 	and.w	r3, r3, #10
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	4313      	orrs	r3, r2
 8005968:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	621a      	str	r2, [r3, #32]
}
 8005976:	bf00      	nop
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40010000 	.word	0x40010000
 8005988:	40000400 	.word	0x40000400
 800598c:	40000800 	.word	0x40000800
 8005990:	40000c00 	.word	0x40000c00
 8005994:	40010400 	.word	0x40010400
 8005998:	40014000 	.word	0x40014000
 800599c:	40001800 	.word	0x40001800

080059a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	f023 0201 	bic.w	r2, r3, #1
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f023 030a 	bic.w	r3, r3, #10
 80059dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	621a      	str	r2, [r3, #32]
}
 80059f2:	bf00      	nop
 80059f4:	371c      	adds	r7, #28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b087      	sub	sp, #28
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	607a      	str	r2, [r7, #4]
 8005a0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	f023 0210 	bic.w	r2, r3, #16
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	021b      	lsls	r3, r3, #8
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	031b      	lsls	r3, r3, #12
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	621a      	str	r2, [r3, #32]
}
 8005a6c:	bf00      	nop
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	f023 0210 	bic.w	r2, r3, #16
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005aa2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	031b      	lsls	r3, r3, #12
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ab4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	011b      	lsls	r3, r3, #4
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	621a      	str	r2, [r3, #32]
}
 8005acc:	bf00      	nop
 8005ace:	371c      	adds	r7, #28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
 8005ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f023 0303 	bic.w	r3, r3, #3
 8005b04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005b28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	021b      	lsls	r3, r3, #8
 8005b2e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	621a      	str	r2, [r3, #32]
}
 8005b44:	bf00      	nop
 8005b46:	371c      	adds	r7, #28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	021b      	lsls	r3, r3, #8
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b8e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	031b      	lsls	r3, r3, #12
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005ba2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	031b      	lsls	r3, r3, #12
 8005ba8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b085      	sub	sp, #20
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f043 0307 	orr.w	r3, r3, #7
 8005bec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	609a      	str	r2, [r3, #8]
}
 8005bf4:	bf00      	nop
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	021a      	lsls	r2, r3, #8
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	609a      	str	r2, [r3, #8]
}
 8005c34:	bf00      	nop
 8005c36:	371c      	adds	r7, #28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f003 031f 	and.w	r3, r3, #31
 8005c52:	2201      	movs	r2, #1
 8005c54:	fa02 f303 	lsl.w	r3, r2, r3
 8005c58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a1a      	ldr	r2, [r3, #32]
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	43db      	mvns	r3, r3
 8005c62:	401a      	ands	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6a1a      	ldr	r2, [r3, #32]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f003 031f 	and.w	r3, r3, #31
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	fa01 f303 	lsl.w	r3, r1, r3
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	621a      	str	r2, [r3, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
	...

08005c8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e06d      	b.n	8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a30      	ldr	r2, [pc, #192]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a2f      	ldr	r2, [pc, #188]	; (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d108      	bne.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a20      	ldr	r2, [pc, #128]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d022      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d16:	d01d      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a1d      	ldr	r2, [pc, #116]	; (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d018      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a1c      	ldr	r2, [pc, #112]	; (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d013      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a1a      	ldr	r2, [pc, #104]	; (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d00e      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d009      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a16      	ldr	r2, [pc, #88]	; (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d004      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a15      	ldr	r2, [pc, #84]	; (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d10c      	bne.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	40010000 	.word	0x40010000
 8005d90:	40010400 	.word	0x40010400
 8005d94:	40000400 	.word	0x40000400
 8005d98:	40000800 	.word	0x40000800
 8005d9c:	40000c00 	.word	0x40000c00
 8005da0:	40014000 	.word	0x40014000
 8005da4:	40001800 	.word	0x40001800

08005da8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e040      	b.n	8005e78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d106      	bne.n	8005e0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7fb ff58 	bl	8001cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2224      	movs	r2, #36	; 0x24
 8005e10:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0201 	bic.w	r2, r2, #1
 8005e20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fb62 	bl	80064ec <UART_SetConfig>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d101      	bne.n	8005e32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e022      	b.n	8005e78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fdba 	bl	80069b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689a      	ldr	r2, [r3, #8]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0201 	orr.w	r2, r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fe41 	bl	8006af8 <UART_CheckIdleState>
 8005e76:	4603      	mov	r3, r0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08a      	sub	sp, #40	; 0x28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e94:	2b20      	cmp	r3, #32
 8005e96:	d132      	bne.n	8005efe <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <HAL_UART_Receive_IT+0x24>
 8005e9e:	88fb      	ldrh	r3, [r7, #6]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e02b      	b.n	8005f00 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d018      	beq.n	8005eee <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	623b      	str	r3, [r7, #32]
 8005edc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	69f9      	ldr	r1, [r7, #28]
 8005ee0:	6a3a      	ldr	r2, [r7, #32]
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e6      	bne.n	8005ebc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005eee:	88fb      	ldrh	r3, [r7, #6]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 fefd 	bl	8006cf4 <UART_Start_Receive_IT>
 8005efa:	4603      	mov	r3, r0
 8005efc:	e000      	b.n	8005f00 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005efe:	2302      	movs	r3, #2
  }
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3728      	adds	r7, #40	; 0x28
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b0ba      	sub	sp, #232	; 0xe8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005f32:	f640 030f 	movw	r3, #2063	; 0x80f
 8005f36:	4013      	ands	r3, r2
 8005f38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005f3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d115      	bne.n	8005f70 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f48:	f003 0320 	and.w	r3, r3, #32
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00f      	beq.n	8005f70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f54:	f003 0320 	and.w	r3, r3, #32
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d009      	beq.n	8005f70 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8297 	beq.w	8006494 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	4798      	blx	r3
      }
      return;
 8005f6e:	e291      	b.n	8006494 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 8117 	beq.w	80061a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005f86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005f8a:	4b85      	ldr	r3, [pc, #532]	; (80061a0 <HAL_UART_IRQHandler+0x298>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 810a 	beq.w	80061a8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d011      	beq.n	8005fc4 <HAL_UART_IRQHandler+0xbc>
 8005fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00b      	beq.n	8005fc4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fba:	f043 0201 	orr.w	r2, r3, #1
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d011      	beq.n	8005ff4 <HAL_UART_IRQHandler+0xec>
 8005fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00b      	beq.n	8005ff4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fea:	f043 0204 	orr.w	r2, r3, #4
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d011      	beq.n	8006024 <HAL_UART_IRQHandler+0x11c>
 8006000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00b      	beq.n	8006024 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2204      	movs	r2, #4
 8006012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800601a:	f043 0202 	orr.w	r2, r3, #2
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006028:	f003 0308 	and.w	r3, r3, #8
 800602c:	2b00      	cmp	r3, #0
 800602e:	d017      	beq.n	8006060 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	d105      	bne.n	8006048 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800603c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006040:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00b      	beq.n	8006060 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2208      	movs	r2, #8
 800604e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006056:	f043 0208 	orr.w	r2, r3, #8
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006068:	2b00      	cmp	r3, #0
 800606a:	d012      	beq.n	8006092 <HAL_UART_IRQHandler+0x18a>
 800606c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006070:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00c      	beq.n	8006092 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006080:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006088:	f043 0220 	orr.w	r2, r3, #32
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 81fd 	beq.w	8006498 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800609e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a2:	f003 0320 	and.w	r3, r3, #32
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00d      	beq.n	80060c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80060aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d007      	beq.n	80060c6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060da:	2b40      	cmp	r3, #64	; 0x40
 80060dc:	d005      	beq.n	80060ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80060de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d04f      	beq.n	800618a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fec8 	bl	8006e80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fa:	2b40      	cmp	r3, #64	; 0x40
 80060fc:	d141      	bne.n	8006182 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3308      	adds	r3, #8
 8006104:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006108:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800610c:	e853 3f00 	ldrex	r3, [r3]
 8006110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006114:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800611c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3308      	adds	r3, #8
 8006126:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800612a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800612e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006132:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006136:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1d9      	bne.n	80060fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800614e:	2b00      	cmp	r3, #0
 8006150:	d013      	beq.n	800617a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006156:	4a13      	ldr	r2, [pc, #76]	; (80061a4 <HAL_UART_IRQHandler+0x29c>)
 8006158:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800615e:	4618      	mov	r0, r3
 8006160:	f7fc f971 	bl	8002446 <HAL_DMA_Abort_IT>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d017      	beq.n	800619a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800616e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006174:	4610      	mov	r0, r2
 8006176:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006178:	e00f      	b.n	800619a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f9a0 	bl	80064c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006180:	e00b      	b.n	800619a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f99c 	bl	80064c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006188:	e007      	b.n	800619a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f998 	bl	80064c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006198:	e17e      	b.n	8006498 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800619a:	bf00      	nop
    return;
 800619c:	e17c      	b.n	8006498 <HAL_UART_IRQHandler+0x590>
 800619e:	bf00      	nop
 80061a0:	04000120 	.word	0x04000120
 80061a4:	08006f49 	.word	0x08006f49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	f040 814c 	bne.w	800644a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80061b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b6:	f003 0310 	and.w	r3, r3, #16
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 8145 	beq.w	800644a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80061c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c4:	f003 0310 	and.w	r3, r3, #16
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 813e 	beq.w	800644a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2210      	movs	r2, #16
 80061d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e0:	2b40      	cmp	r3, #64	; 0x40
 80061e2:	f040 80b6 	bne.w	8006352 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 8150 	beq.w	800649c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006206:	429a      	cmp	r2, r3
 8006208:	f080 8148 	bcs.w	800649c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006212:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800621a:	69db      	ldr	r3, [r3, #28]
 800621c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006220:	f000 8086 	beq.w	8006330 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006230:	e853 3f00 	ldrex	r3, [r3]
 8006234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006238:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800623c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006240:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800624e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006252:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006256:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800625a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800625e:	e841 2300 	strex	r3, r2, [r1]
 8006262:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1da      	bne.n	8006224 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3308      	adds	r3, #8
 8006274:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006278:	e853 3f00 	ldrex	r3, [r3]
 800627c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800627e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006280:	f023 0301 	bic.w	r3, r3, #1
 8006284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3308      	adds	r3, #8
 800628e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006292:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006296:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006298:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800629a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800629e:	e841 2300 	strex	r3, r2, [r1]
 80062a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80062a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1e1      	bne.n	800626e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3308      	adds	r3, #8
 80062b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062b4:	e853 3f00 	ldrex	r3, [r3]
 80062b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3308      	adds	r3, #8
 80062ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062d6:	e841 2300 	strex	r3, r2, [r1]
 80062da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1e3      	bne.n	80062aa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006300:	f023 0310 	bic.w	r3, r3, #16
 8006304:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
 800630e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006312:	65bb      	str	r3, [r7, #88]	; 0x58
 8006314:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006318:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e4      	bne.n	80062f0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800632a:	4618      	mov	r0, r3
 800632c:	f7fc f81b 	bl	8002366 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006342:	b29b      	uxth	r3, r3
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	b29b      	uxth	r3, r3
 8006348:	4619      	mov	r1, r3
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f8c2 	bl	80064d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006350:	e0a4      	b.n	800649c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800635e:	b29b      	uxth	r3, r3
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	f000 8096 	beq.w	80064a0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006374:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8091 	beq.w	80064a0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006386:	e853 3f00 	ldrex	r3, [r3]
 800638a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800638c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006392:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063a0:	647b      	str	r3, [r7, #68]	; 0x44
 80063a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063a8:	e841 2300 	strex	r3, r2, [r1]
 80063ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1e4      	bne.n	800637e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3308      	adds	r3, #8
 80063ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	e853 3f00 	ldrex	r3, [r3]
 80063c2:	623b      	str	r3, [r7, #32]
   return(result);
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	f023 0301 	bic.w	r3, r3, #1
 80063ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3308      	adds	r3, #8
 80063d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80063d8:	633a      	str	r2, [r7, #48]	; 0x30
 80063da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063e0:	e841 2300 	strex	r3, r2, [r1]
 80063e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e3      	bne.n	80063b4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	e853 3f00 	ldrex	r3, [r3]
 800640c:	60fb      	str	r3, [r7, #12]
   return(result);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f023 0310 	bic.w	r3, r3, #16
 8006414:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	461a      	mov	r2, r3
 800641e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006422:	61fb      	str	r3, [r7, #28]
 8006424:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006426:	69b9      	ldr	r1, [r7, #24]
 8006428:	69fa      	ldr	r2, [r7, #28]
 800642a:	e841 2300 	strex	r3, r2, [r1]
 800642e:	617b      	str	r3, [r7, #20]
   return(result);
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1e4      	bne.n	8006400 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2202      	movs	r2, #2
 800643a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800643c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006440:	4619      	mov	r1, r3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f846 	bl	80064d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006448:	e02a      	b.n	80064a0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800644a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800644e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00e      	beq.n	8006474 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800645a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800645e:	2b00      	cmp	r3, #0
 8006460:	d008      	beq.n	8006474 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006466:	2b00      	cmp	r3, #0
 8006468:	d01c      	beq.n	80064a4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	4798      	blx	r3
    }
    return;
 8006472:	e017      	b.n	80064a4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647c:	2b00      	cmp	r3, #0
 800647e:	d012      	beq.n	80064a6 <HAL_UART_IRQHandler+0x59e>
 8006480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00c      	beq.n	80064a6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fd71 	bl	8006f74 <UART_EndTransmit_IT>
    return;
 8006492:	e008      	b.n	80064a6 <HAL_UART_IRQHandler+0x59e>
      return;
 8006494:	bf00      	nop
 8006496:	e006      	b.n	80064a6 <HAL_UART_IRQHandler+0x59e>
    return;
 8006498:	bf00      	nop
 800649a:	e004      	b.n	80064a6 <HAL_UART_IRQHandler+0x59e>
      return;
 800649c:	bf00      	nop
 800649e:	e002      	b.n	80064a6 <HAL_UART_IRQHandler+0x59e>
      return;
 80064a0:	bf00      	nop
 80064a2:	e000      	b.n	80064a6 <HAL_UART_IRQHandler+0x59e>
    return;
 80064a4:	bf00      	nop
  }

}
 80064a6:	37e8      	adds	r7, #232	; 0xe8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	460b      	mov	r3, r1
 80064de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	431a      	orrs	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	4313      	orrs	r3, r2
 800650e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	4ba6      	ldr	r3, [pc, #664]	; (80067b0 <UART_SetConfig+0x2c4>)
 8006518:	4013      	ands	r3, r2
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	6812      	ldr	r2, [r2, #0]
 800651e:	6979      	ldr	r1, [r7, #20]
 8006520:	430b      	orrs	r3, r1
 8006522:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	4313      	orrs	r3, r2
 8006548:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	430a      	orrs	r2, r1
 800655c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a94      	ldr	r2, [pc, #592]	; (80067b4 <UART_SetConfig+0x2c8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d120      	bne.n	80065aa <UART_SetConfig+0xbe>
 8006568:	4b93      	ldr	r3, [pc, #588]	; (80067b8 <UART_SetConfig+0x2cc>)
 800656a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800656e:	f003 0303 	and.w	r3, r3, #3
 8006572:	2b03      	cmp	r3, #3
 8006574:	d816      	bhi.n	80065a4 <UART_SetConfig+0xb8>
 8006576:	a201      	add	r2, pc, #4	; (adr r2, 800657c <UART_SetConfig+0x90>)
 8006578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657c:	0800658d 	.word	0x0800658d
 8006580:	08006599 	.word	0x08006599
 8006584:	08006593 	.word	0x08006593
 8006588:	0800659f 	.word	0x0800659f
 800658c:	2301      	movs	r3, #1
 800658e:	77fb      	strb	r3, [r7, #31]
 8006590:	e150      	b.n	8006834 <UART_SetConfig+0x348>
 8006592:	2302      	movs	r3, #2
 8006594:	77fb      	strb	r3, [r7, #31]
 8006596:	e14d      	b.n	8006834 <UART_SetConfig+0x348>
 8006598:	2304      	movs	r3, #4
 800659a:	77fb      	strb	r3, [r7, #31]
 800659c:	e14a      	b.n	8006834 <UART_SetConfig+0x348>
 800659e:	2308      	movs	r3, #8
 80065a0:	77fb      	strb	r3, [r7, #31]
 80065a2:	e147      	b.n	8006834 <UART_SetConfig+0x348>
 80065a4:	2310      	movs	r3, #16
 80065a6:	77fb      	strb	r3, [r7, #31]
 80065a8:	e144      	b.n	8006834 <UART_SetConfig+0x348>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a83      	ldr	r2, [pc, #524]	; (80067bc <UART_SetConfig+0x2d0>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d132      	bne.n	800661a <UART_SetConfig+0x12e>
 80065b4:	4b80      	ldr	r3, [pc, #512]	; (80067b8 <UART_SetConfig+0x2cc>)
 80065b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ba:	f003 030c 	and.w	r3, r3, #12
 80065be:	2b0c      	cmp	r3, #12
 80065c0:	d828      	bhi.n	8006614 <UART_SetConfig+0x128>
 80065c2:	a201      	add	r2, pc, #4	; (adr r2, 80065c8 <UART_SetConfig+0xdc>)
 80065c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c8:	080065fd 	.word	0x080065fd
 80065cc:	08006615 	.word	0x08006615
 80065d0:	08006615 	.word	0x08006615
 80065d4:	08006615 	.word	0x08006615
 80065d8:	08006609 	.word	0x08006609
 80065dc:	08006615 	.word	0x08006615
 80065e0:	08006615 	.word	0x08006615
 80065e4:	08006615 	.word	0x08006615
 80065e8:	08006603 	.word	0x08006603
 80065ec:	08006615 	.word	0x08006615
 80065f0:	08006615 	.word	0x08006615
 80065f4:	08006615 	.word	0x08006615
 80065f8:	0800660f 	.word	0x0800660f
 80065fc:	2300      	movs	r3, #0
 80065fe:	77fb      	strb	r3, [r7, #31]
 8006600:	e118      	b.n	8006834 <UART_SetConfig+0x348>
 8006602:	2302      	movs	r3, #2
 8006604:	77fb      	strb	r3, [r7, #31]
 8006606:	e115      	b.n	8006834 <UART_SetConfig+0x348>
 8006608:	2304      	movs	r3, #4
 800660a:	77fb      	strb	r3, [r7, #31]
 800660c:	e112      	b.n	8006834 <UART_SetConfig+0x348>
 800660e:	2308      	movs	r3, #8
 8006610:	77fb      	strb	r3, [r7, #31]
 8006612:	e10f      	b.n	8006834 <UART_SetConfig+0x348>
 8006614:	2310      	movs	r3, #16
 8006616:	77fb      	strb	r3, [r7, #31]
 8006618:	e10c      	b.n	8006834 <UART_SetConfig+0x348>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a68      	ldr	r2, [pc, #416]	; (80067c0 <UART_SetConfig+0x2d4>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d120      	bne.n	8006666 <UART_SetConfig+0x17a>
 8006624:	4b64      	ldr	r3, [pc, #400]	; (80067b8 <UART_SetConfig+0x2cc>)
 8006626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800662a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800662e:	2b30      	cmp	r3, #48	; 0x30
 8006630:	d013      	beq.n	800665a <UART_SetConfig+0x16e>
 8006632:	2b30      	cmp	r3, #48	; 0x30
 8006634:	d814      	bhi.n	8006660 <UART_SetConfig+0x174>
 8006636:	2b20      	cmp	r3, #32
 8006638:	d009      	beq.n	800664e <UART_SetConfig+0x162>
 800663a:	2b20      	cmp	r3, #32
 800663c:	d810      	bhi.n	8006660 <UART_SetConfig+0x174>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <UART_SetConfig+0x15c>
 8006642:	2b10      	cmp	r3, #16
 8006644:	d006      	beq.n	8006654 <UART_SetConfig+0x168>
 8006646:	e00b      	b.n	8006660 <UART_SetConfig+0x174>
 8006648:	2300      	movs	r3, #0
 800664a:	77fb      	strb	r3, [r7, #31]
 800664c:	e0f2      	b.n	8006834 <UART_SetConfig+0x348>
 800664e:	2302      	movs	r3, #2
 8006650:	77fb      	strb	r3, [r7, #31]
 8006652:	e0ef      	b.n	8006834 <UART_SetConfig+0x348>
 8006654:	2304      	movs	r3, #4
 8006656:	77fb      	strb	r3, [r7, #31]
 8006658:	e0ec      	b.n	8006834 <UART_SetConfig+0x348>
 800665a:	2308      	movs	r3, #8
 800665c:	77fb      	strb	r3, [r7, #31]
 800665e:	e0e9      	b.n	8006834 <UART_SetConfig+0x348>
 8006660:	2310      	movs	r3, #16
 8006662:	77fb      	strb	r3, [r7, #31]
 8006664:	e0e6      	b.n	8006834 <UART_SetConfig+0x348>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a56      	ldr	r2, [pc, #344]	; (80067c4 <UART_SetConfig+0x2d8>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d120      	bne.n	80066b2 <UART_SetConfig+0x1c6>
 8006670:	4b51      	ldr	r3, [pc, #324]	; (80067b8 <UART_SetConfig+0x2cc>)
 8006672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006676:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800667a:	2bc0      	cmp	r3, #192	; 0xc0
 800667c:	d013      	beq.n	80066a6 <UART_SetConfig+0x1ba>
 800667e:	2bc0      	cmp	r3, #192	; 0xc0
 8006680:	d814      	bhi.n	80066ac <UART_SetConfig+0x1c0>
 8006682:	2b80      	cmp	r3, #128	; 0x80
 8006684:	d009      	beq.n	800669a <UART_SetConfig+0x1ae>
 8006686:	2b80      	cmp	r3, #128	; 0x80
 8006688:	d810      	bhi.n	80066ac <UART_SetConfig+0x1c0>
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <UART_SetConfig+0x1a8>
 800668e:	2b40      	cmp	r3, #64	; 0x40
 8006690:	d006      	beq.n	80066a0 <UART_SetConfig+0x1b4>
 8006692:	e00b      	b.n	80066ac <UART_SetConfig+0x1c0>
 8006694:	2300      	movs	r3, #0
 8006696:	77fb      	strb	r3, [r7, #31]
 8006698:	e0cc      	b.n	8006834 <UART_SetConfig+0x348>
 800669a:	2302      	movs	r3, #2
 800669c:	77fb      	strb	r3, [r7, #31]
 800669e:	e0c9      	b.n	8006834 <UART_SetConfig+0x348>
 80066a0:	2304      	movs	r3, #4
 80066a2:	77fb      	strb	r3, [r7, #31]
 80066a4:	e0c6      	b.n	8006834 <UART_SetConfig+0x348>
 80066a6:	2308      	movs	r3, #8
 80066a8:	77fb      	strb	r3, [r7, #31]
 80066aa:	e0c3      	b.n	8006834 <UART_SetConfig+0x348>
 80066ac:	2310      	movs	r3, #16
 80066ae:	77fb      	strb	r3, [r7, #31]
 80066b0:	e0c0      	b.n	8006834 <UART_SetConfig+0x348>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a44      	ldr	r2, [pc, #272]	; (80067c8 <UART_SetConfig+0x2dc>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d125      	bne.n	8006708 <UART_SetConfig+0x21c>
 80066bc:	4b3e      	ldr	r3, [pc, #248]	; (80067b8 <UART_SetConfig+0x2cc>)
 80066be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066ca:	d017      	beq.n	80066fc <UART_SetConfig+0x210>
 80066cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066d0:	d817      	bhi.n	8006702 <UART_SetConfig+0x216>
 80066d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066d6:	d00b      	beq.n	80066f0 <UART_SetConfig+0x204>
 80066d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066dc:	d811      	bhi.n	8006702 <UART_SetConfig+0x216>
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <UART_SetConfig+0x1fe>
 80066e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e6:	d006      	beq.n	80066f6 <UART_SetConfig+0x20a>
 80066e8:	e00b      	b.n	8006702 <UART_SetConfig+0x216>
 80066ea:	2300      	movs	r3, #0
 80066ec:	77fb      	strb	r3, [r7, #31]
 80066ee:	e0a1      	b.n	8006834 <UART_SetConfig+0x348>
 80066f0:	2302      	movs	r3, #2
 80066f2:	77fb      	strb	r3, [r7, #31]
 80066f4:	e09e      	b.n	8006834 <UART_SetConfig+0x348>
 80066f6:	2304      	movs	r3, #4
 80066f8:	77fb      	strb	r3, [r7, #31]
 80066fa:	e09b      	b.n	8006834 <UART_SetConfig+0x348>
 80066fc:	2308      	movs	r3, #8
 80066fe:	77fb      	strb	r3, [r7, #31]
 8006700:	e098      	b.n	8006834 <UART_SetConfig+0x348>
 8006702:	2310      	movs	r3, #16
 8006704:	77fb      	strb	r3, [r7, #31]
 8006706:	e095      	b.n	8006834 <UART_SetConfig+0x348>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a2f      	ldr	r2, [pc, #188]	; (80067cc <UART_SetConfig+0x2e0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d125      	bne.n	800675e <UART_SetConfig+0x272>
 8006712:	4b29      	ldr	r3, [pc, #164]	; (80067b8 <UART_SetConfig+0x2cc>)
 8006714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006718:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800671c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006720:	d017      	beq.n	8006752 <UART_SetConfig+0x266>
 8006722:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006726:	d817      	bhi.n	8006758 <UART_SetConfig+0x26c>
 8006728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800672c:	d00b      	beq.n	8006746 <UART_SetConfig+0x25a>
 800672e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006732:	d811      	bhi.n	8006758 <UART_SetConfig+0x26c>
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <UART_SetConfig+0x254>
 8006738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800673c:	d006      	beq.n	800674c <UART_SetConfig+0x260>
 800673e:	e00b      	b.n	8006758 <UART_SetConfig+0x26c>
 8006740:	2301      	movs	r3, #1
 8006742:	77fb      	strb	r3, [r7, #31]
 8006744:	e076      	b.n	8006834 <UART_SetConfig+0x348>
 8006746:	2302      	movs	r3, #2
 8006748:	77fb      	strb	r3, [r7, #31]
 800674a:	e073      	b.n	8006834 <UART_SetConfig+0x348>
 800674c:	2304      	movs	r3, #4
 800674e:	77fb      	strb	r3, [r7, #31]
 8006750:	e070      	b.n	8006834 <UART_SetConfig+0x348>
 8006752:	2308      	movs	r3, #8
 8006754:	77fb      	strb	r3, [r7, #31]
 8006756:	e06d      	b.n	8006834 <UART_SetConfig+0x348>
 8006758:	2310      	movs	r3, #16
 800675a:	77fb      	strb	r3, [r7, #31]
 800675c:	e06a      	b.n	8006834 <UART_SetConfig+0x348>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a1b      	ldr	r2, [pc, #108]	; (80067d0 <UART_SetConfig+0x2e4>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d138      	bne.n	80067da <UART_SetConfig+0x2ee>
 8006768:	4b13      	ldr	r3, [pc, #76]	; (80067b8 <UART_SetConfig+0x2cc>)
 800676a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006772:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006776:	d017      	beq.n	80067a8 <UART_SetConfig+0x2bc>
 8006778:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800677c:	d82a      	bhi.n	80067d4 <UART_SetConfig+0x2e8>
 800677e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006782:	d00b      	beq.n	800679c <UART_SetConfig+0x2b0>
 8006784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006788:	d824      	bhi.n	80067d4 <UART_SetConfig+0x2e8>
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <UART_SetConfig+0x2aa>
 800678e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006792:	d006      	beq.n	80067a2 <UART_SetConfig+0x2b6>
 8006794:	e01e      	b.n	80067d4 <UART_SetConfig+0x2e8>
 8006796:	2300      	movs	r3, #0
 8006798:	77fb      	strb	r3, [r7, #31]
 800679a:	e04b      	b.n	8006834 <UART_SetConfig+0x348>
 800679c:	2302      	movs	r3, #2
 800679e:	77fb      	strb	r3, [r7, #31]
 80067a0:	e048      	b.n	8006834 <UART_SetConfig+0x348>
 80067a2:	2304      	movs	r3, #4
 80067a4:	77fb      	strb	r3, [r7, #31]
 80067a6:	e045      	b.n	8006834 <UART_SetConfig+0x348>
 80067a8:	2308      	movs	r3, #8
 80067aa:	77fb      	strb	r3, [r7, #31]
 80067ac:	e042      	b.n	8006834 <UART_SetConfig+0x348>
 80067ae:	bf00      	nop
 80067b0:	efff69f3 	.word	0xefff69f3
 80067b4:	40011000 	.word	0x40011000
 80067b8:	40023800 	.word	0x40023800
 80067bc:	40004400 	.word	0x40004400
 80067c0:	40004800 	.word	0x40004800
 80067c4:	40004c00 	.word	0x40004c00
 80067c8:	40005000 	.word	0x40005000
 80067cc:	40011400 	.word	0x40011400
 80067d0:	40007800 	.word	0x40007800
 80067d4:	2310      	movs	r3, #16
 80067d6:	77fb      	strb	r3, [r7, #31]
 80067d8:	e02c      	b.n	8006834 <UART_SetConfig+0x348>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a72      	ldr	r2, [pc, #456]	; (80069a8 <UART_SetConfig+0x4bc>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d125      	bne.n	8006830 <UART_SetConfig+0x344>
 80067e4:	4b71      	ldr	r3, [pc, #452]	; (80069ac <UART_SetConfig+0x4c0>)
 80067e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80067ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067f2:	d017      	beq.n	8006824 <UART_SetConfig+0x338>
 80067f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067f8:	d817      	bhi.n	800682a <UART_SetConfig+0x33e>
 80067fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067fe:	d00b      	beq.n	8006818 <UART_SetConfig+0x32c>
 8006800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006804:	d811      	bhi.n	800682a <UART_SetConfig+0x33e>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <UART_SetConfig+0x326>
 800680a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800680e:	d006      	beq.n	800681e <UART_SetConfig+0x332>
 8006810:	e00b      	b.n	800682a <UART_SetConfig+0x33e>
 8006812:	2300      	movs	r3, #0
 8006814:	77fb      	strb	r3, [r7, #31]
 8006816:	e00d      	b.n	8006834 <UART_SetConfig+0x348>
 8006818:	2302      	movs	r3, #2
 800681a:	77fb      	strb	r3, [r7, #31]
 800681c:	e00a      	b.n	8006834 <UART_SetConfig+0x348>
 800681e:	2304      	movs	r3, #4
 8006820:	77fb      	strb	r3, [r7, #31]
 8006822:	e007      	b.n	8006834 <UART_SetConfig+0x348>
 8006824:	2308      	movs	r3, #8
 8006826:	77fb      	strb	r3, [r7, #31]
 8006828:	e004      	b.n	8006834 <UART_SetConfig+0x348>
 800682a:	2310      	movs	r3, #16
 800682c:	77fb      	strb	r3, [r7, #31]
 800682e:	e001      	b.n	8006834 <UART_SetConfig+0x348>
 8006830:	2310      	movs	r3, #16
 8006832:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800683c:	d15b      	bne.n	80068f6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800683e:	7ffb      	ldrb	r3, [r7, #31]
 8006840:	2b08      	cmp	r3, #8
 8006842:	d828      	bhi.n	8006896 <UART_SetConfig+0x3aa>
 8006844:	a201      	add	r2, pc, #4	; (adr r2, 800684c <UART_SetConfig+0x360>)
 8006846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684a:	bf00      	nop
 800684c:	08006871 	.word	0x08006871
 8006850:	08006879 	.word	0x08006879
 8006854:	08006881 	.word	0x08006881
 8006858:	08006897 	.word	0x08006897
 800685c:	08006887 	.word	0x08006887
 8006860:	08006897 	.word	0x08006897
 8006864:	08006897 	.word	0x08006897
 8006868:	08006897 	.word	0x08006897
 800686c:	0800688f 	.word	0x0800688f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006870:	f7fd f93c 	bl	8003aec <HAL_RCC_GetPCLK1Freq>
 8006874:	61b8      	str	r0, [r7, #24]
        break;
 8006876:	e013      	b.n	80068a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006878:	f7fd f94c 	bl	8003b14 <HAL_RCC_GetPCLK2Freq>
 800687c:	61b8      	str	r0, [r7, #24]
        break;
 800687e:	e00f      	b.n	80068a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006880:	4b4b      	ldr	r3, [pc, #300]	; (80069b0 <UART_SetConfig+0x4c4>)
 8006882:	61bb      	str	r3, [r7, #24]
        break;
 8006884:	e00c      	b.n	80068a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006886:	f7fd f81f 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 800688a:	61b8      	str	r0, [r7, #24]
        break;
 800688c:	e008      	b.n	80068a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800688e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006892:	61bb      	str	r3, [r7, #24]
        break;
 8006894:	e004      	b.n	80068a0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006896:	2300      	movs	r3, #0
 8006898:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	77bb      	strb	r3, [r7, #30]
        break;
 800689e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d074      	beq.n	8006990 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	005a      	lsls	r2, r3, #1
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	085b      	lsrs	r3, r3, #1
 80068b0:	441a      	add	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	2b0f      	cmp	r3, #15
 80068c0:	d916      	bls.n	80068f0 <UART_SetConfig+0x404>
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c8:	d212      	bcs.n	80068f0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f023 030f 	bic.w	r3, r3, #15
 80068d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	085b      	lsrs	r3, r3, #1
 80068d8:	b29b      	uxth	r3, r3
 80068da:	f003 0307 	and.w	r3, r3, #7
 80068de:	b29a      	uxth	r2, r3
 80068e0:	89fb      	ldrh	r3, [r7, #14]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	89fa      	ldrh	r2, [r7, #14]
 80068ec:	60da      	str	r2, [r3, #12]
 80068ee:	e04f      	b.n	8006990 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	77bb      	strb	r3, [r7, #30]
 80068f4:	e04c      	b.n	8006990 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068f6:	7ffb      	ldrb	r3, [r7, #31]
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d828      	bhi.n	800694e <UART_SetConfig+0x462>
 80068fc:	a201      	add	r2, pc, #4	; (adr r2, 8006904 <UART_SetConfig+0x418>)
 80068fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006902:	bf00      	nop
 8006904:	08006929 	.word	0x08006929
 8006908:	08006931 	.word	0x08006931
 800690c:	08006939 	.word	0x08006939
 8006910:	0800694f 	.word	0x0800694f
 8006914:	0800693f 	.word	0x0800693f
 8006918:	0800694f 	.word	0x0800694f
 800691c:	0800694f 	.word	0x0800694f
 8006920:	0800694f 	.word	0x0800694f
 8006924:	08006947 	.word	0x08006947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006928:	f7fd f8e0 	bl	8003aec <HAL_RCC_GetPCLK1Freq>
 800692c:	61b8      	str	r0, [r7, #24]
        break;
 800692e:	e013      	b.n	8006958 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006930:	f7fd f8f0 	bl	8003b14 <HAL_RCC_GetPCLK2Freq>
 8006934:	61b8      	str	r0, [r7, #24]
        break;
 8006936:	e00f      	b.n	8006958 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006938:	4b1d      	ldr	r3, [pc, #116]	; (80069b0 <UART_SetConfig+0x4c4>)
 800693a:	61bb      	str	r3, [r7, #24]
        break;
 800693c:	e00c      	b.n	8006958 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800693e:	f7fc ffc3 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 8006942:	61b8      	str	r0, [r7, #24]
        break;
 8006944:	e008      	b.n	8006958 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800694a:	61bb      	str	r3, [r7, #24]
        break;
 800694c:	e004      	b.n	8006958 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	77bb      	strb	r3, [r7, #30]
        break;
 8006956:	bf00      	nop
    }

    if (pclk != 0U)
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d018      	beq.n	8006990 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	085a      	lsrs	r2, r3, #1
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	441a      	add	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006970:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	2b0f      	cmp	r3, #15
 8006976:	d909      	bls.n	800698c <UART_SetConfig+0x4a0>
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800697e:	d205      	bcs.n	800698c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	b29a      	uxth	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	60da      	str	r2, [r3, #12]
 800698a:	e001      	b.n	8006990 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800699c:	7fbb      	ldrb	r3, [r7, #30]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3720      	adds	r7, #32
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	40007c00 	.word	0x40007c00
 80069ac:	40023800 	.word	0x40023800
 80069b0:	00f42400 	.word	0x00f42400

080069b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00a      	beq.n	8006a22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	f003 0308 	and.w	r3, r3, #8
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	430a      	orrs	r2, r1
 8006a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	f003 0310 	and.w	r3, r3, #16
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00a      	beq.n	8006a66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d01a      	beq.n	8006aca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ab2:	d10a      	bne.n	8006aca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00a      	beq.n	8006aec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	605a      	str	r2, [r3, #4]
  }
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af02      	add	r7, sp, #8
 8006afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b08:	f7fb faec 	bl	80020e4 <HAL_GetTick>
 8006b0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	d10e      	bne.n	8006b3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f81b 	bl	8006b66 <UART_WaitOnFlagUntilTimeout>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e011      	b.n	8006b5e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b09c      	sub	sp, #112	; 0x70
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	60f8      	str	r0, [r7, #12]
 8006b6e:	60b9      	str	r1, [r7, #8]
 8006b70:	603b      	str	r3, [r7, #0]
 8006b72:	4613      	mov	r3, r2
 8006b74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b76:	e0a7      	b.n	8006cc8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7e:	f000 80a3 	beq.w	8006cc8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b82:	f7fb faaf 	bl	80020e4 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d302      	bcc.n	8006b98 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d13f      	bne.n	8006c18 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bac:	667b      	str	r3, [r7, #100]	; 0x64
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bb8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006bbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006bbe:	e841 2300 	strex	r3, r2, [r1]
 8006bc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1e6      	bne.n	8006b98 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3308      	adds	r3, #8
 8006bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd4:	e853 3f00 	ldrex	r3, [r3]
 8006bd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bdc:	f023 0301 	bic.w	r3, r3, #1
 8006be0:	663b      	str	r3, [r7, #96]	; 0x60
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3308      	adds	r3, #8
 8006be8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bea:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bf2:	e841 2300 	strex	r3, r2, [r1]
 8006bf6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1e5      	bne.n	8006bca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2220      	movs	r2, #32
 8006c02:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2220      	movs	r2, #32
 8006c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e068      	b.n	8006cea <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0304 	and.w	r3, r3, #4
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d050      	beq.n	8006cc8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c34:	d148      	bne.n	8006cc8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c3e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c60:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c66:	e841 2300 	strex	r3, r2, [r1]
 8006c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1e6      	bne.n	8006c40 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3308      	adds	r3, #8
 8006c78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	e853 3f00 	ldrex	r3, [r3]
 8006c80:	613b      	str	r3, [r7, #16]
   return(result);
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f023 0301 	bic.w	r3, r3, #1
 8006c88:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3308      	adds	r3, #8
 8006c90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c92:	623a      	str	r2, [r7, #32]
 8006c94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c96:	69f9      	ldr	r1, [r7, #28]
 8006c98:	6a3a      	ldr	r2, [r7, #32]
 8006c9a:	e841 2300 	strex	r3, r2, [r1]
 8006c9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1e5      	bne.n	8006c72 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e010      	b.n	8006cea <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	69da      	ldr	r2, [r3, #28]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	bf0c      	ite	eq
 8006cd8:	2301      	moveq	r3, #1
 8006cda:	2300      	movne	r3, #0
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	461a      	mov	r2, r3
 8006ce0:	79fb      	ldrb	r3, [r7, #7]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	f43f af48 	beq.w	8006b78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3770      	adds	r7, #112	; 0x70
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
	...

08006cf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b097      	sub	sp, #92	; 0x5c
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	88fa      	ldrh	r2, [r7, #6]
 8006d0c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	88fa      	ldrh	r2, [r7, #6]
 8006d14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d26:	d10e      	bne.n	8006d46 <UART_Start_Receive_IT+0x52>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d105      	bne.n	8006d3c <UART_Start_Receive_IT+0x48>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006d36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d3a:	e02d      	b.n	8006d98 <UART_Start_Receive_IT+0xa4>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	22ff      	movs	r2, #255	; 0xff
 8006d40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d44:	e028      	b.n	8006d98 <UART_Start_Receive_IT+0xa4>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10d      	bne.n	8006d6a <UART_Start_Receive_IT+0x76>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d104      	bne.n	8006d60 <UART_Start_Receive_IT+0x6c>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	22ff      	movs	r2, #255	; 0xff
 8006d5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d5e:	e01b      	b.n	8006d98 <UART_Start_Receive_IT+0xa4>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	227f      	movs	r2, #127	; 0x7f
 8006d64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d68:	e016      	b.n	8006d98 <UART_Start_Receive_IT+0xa4>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d72:	d10d      	bne.n	8006d90 <UART_Start_Receive_IT+0x9c>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d104      	bne.n	8006d86 <UART_Start_Receive_IT+0x92>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	227f      	movs	r2, #127	; 0x7f
 8006d80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d84:	e008      	b.n	8006d98 <UART_Start_Receive_IT+0xa4>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	223f      	movs	r2, #63	; 0x3f
 8006d8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d8e:	e003      	b.n	8006d98 <UART_Start_Receive_IT+0xa4>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2222      	movs	r2, #34	; 0x22
 8006da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3308      	adds	r3, #8
 8006dae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db2:	e853 3f00 	ldrex	r3, [r3]
 8006db6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dba:	f043 0301 	orr.w	r3, r3, #1
 8006dbe:	657b      	str	r3, [r7, #84]	; 0x54
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006dc8:	64ba      	str	r2, [r7, #72]	; 0x48
 8006dca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dcc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006dce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dd0:	e841 2300 	strex	r3, r2, [r1]
 8006dd4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1e5      	bne.n	8006da8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de4:	d107      	bne.n	8006df6 <UART_Start_Receive_IT+0x102>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d103      	bne.n	8006df6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	4a21      	ldr	r2, [pc, #132]	; (8006e78 <UART_Start_Receive_IT+0x184>)
 8006df2:	669a      	str	r2, [r3, #104]	; 0x68
 8006df4:	e002      	b.n	8006dfc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4a20      	ldr	r2, [pc, #128]	; (8006e7c <UART_Start_Receive_IT+0x188>)
 8006dfa:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d019      	beq.n	8006e38 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0c:	e853 3f00 	ldrex	r3, [r3]
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006e18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e22:	637b      	str	r3, [r7, #52]	; 0x34
 8006e24:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e2a:	e841 2300 	strex	r3, r2, [r1]
 8006e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1e6      	bne.n	8006e04 <UART_Start_Receive_IT+0x110>
 8006e36:	e018      	b.n	8006e6a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	e853 3f00 	ldrex	r3, [r3]
 8006e44:	613b      	str	r3, [r7, #16]
   return(result);
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f043 0320 	orr.w	r3, r3, #32
 8006e4c:	653b      	str	r3, [r7, #80]	; 0x50
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e56:	623b      	str	r3, [r7, #32]
 8006e58:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5a:	69f9      	ldr	r1, [r7, #28]
 8006e5c:	6a3a      	ldr	r2, [r7, #32]
 8006e5e:	e841 2300 	strex	r3, r2, [r1]
 8006e62:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1e6      	bne.n	8006e38 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	375c      	adds	r7, #92	; 0x5c
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr
 8006e78:	0800712f 	.word	0x0800712f
 8006e7c:	08006fc9 	.word	0x08006fc9

08006e80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b095      	sub	sp, #84	; 0x54
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e90:	e853 3f00 	ldrex	r3, [r3]
 8006e94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ea8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006eac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006eae:	e841 2300 	strex	r3, r2, [r1]
 8006eb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1e6      	bne.n	8006e88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	e853 3f00 	ldrex	r3, [r3]
 8006ec8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	f023 0301 	bic.w	r3, r3, #1
 8006ed0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006edc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ede:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ee2:	e841 2300 	strex	r3, r2, [r1]
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1e5      	bne.n	8006eba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d118      	bne.n	8006f28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	e853 3f00 	ldrex	r3, [r3]
 8006f02:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f023 0310 	bic.w	r3, r3, #16
 8006f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	461a      	mov	r2, r3
 8006f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f14:	61bb      	str	r3, [r7, #24]
 8006f16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f18:	6979      	ldr	r1, [r7, #20]
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	e841 2300 	strex	r3, r2, [r1]
 8006f20:	613b      	str	r3, [r7, #16]
   return(result);
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1e6      	bne.n	8006ef6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f3c:	bf00      	nop
 8006f3e:	3754      	adds	r7, #84	; 0x54
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f7ff faaa 	bl	80064c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f6c:	bf00      	nop
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	e853 3f00 	ldrex	r3, [r3]
 8006f88:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f90:	61fb      	str	r3, [r7, #28]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	61bb      	str	r3, [r7, #24]
 8006f9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	6979      	ldr	r1, [r7, #20]
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e6      	bne.n	8006f7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff fa76 	bl	80064ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fc0:	bf00      	nop
 8006fc2:	3720      	adds	r7, #32
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b096      	sub	sp, #88	; 0x58
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006fd6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fe0:	2b22      	cmp	r3, #34	; 0x22
 8006fe2:	f040 8098 	bne.w	8007116 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ff0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006ff4:	b2d9      	uxtb	r1, r3
 8006ff6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007000:	400a      	ands	r2, r1
 8007002:	b2d2      	uxtb	r2, r2
 8007004:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007016:	b29b      	uxth	r3, r3
 8007018:	3b01      	subs	r3, #1
 800701a:	b29a      	uxth	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007028:	b29b      	uxth	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d17b      	bne.n	8007126 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007036:	e853 3f00 	ldrex	r3, [r3]
 800703a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800703c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800703e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007042:	653b      	str	r3, [r7, #80]	; 0x50
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	461a      	mov	r2, r3
 800704a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800704c:	647b      	str	r3, [r7, #68]	; 0x44
 800704e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007050:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007054:	e841 2300 	strex	r3, r2, [r1]
 8007058:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800705a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e6      	bne.n	800702e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3308      	adds	r3, #8
 8007066:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	623b      	str	r3, [r7, #32]
   return(result);
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	f023 0301 	bic.w	r3, r3, #1
 8007076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3308      	adds	r3, #8
 800707e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007080:	633a      	str	r2, [r7, #48]	; 0x30
 8007082:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007084:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007088:	e841 2300 	strex	r3, r2, [r1]
 800708c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800708e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e5      	bne.n	8007060 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2220      	movs	r2, #32
 8007098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d12e      	bne.n	800710e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	e853 3f00 	ldrex	r3, [r3]
 80070c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0310 	bic.w	r3, r3, #16
 80070ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	461a      	mov	r2, r3
 80070d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070d4:	61fb      	str	r3, [r7, #28]
 80070d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d8:	69b9      	ldr	r1, [r7, #24]
 80070da:	69fa      	ldr	r2, [r7, #28]
 80070dc:	e841 2300 	strex	r3, r2, [r1]
 80070e0:	617b      	str	r3, [r7, #20]
   return(result);
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1e6      	bne.n	80070b6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	f003 0310 	and.w	r3, r3, #16
 80070f2:	2b10      	cmp	r3, #16
 80070f4:	d103      	bne.n	80070fe <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2210      	movs	r2, #16
 80070fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7ff f9e4 	bl	80064d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800710c:	e00b      	b.n	8007126 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7f9 ff3e 	bl	8000f90 <HAL_UART_RxCpltCallback>
}
 8007114:	e007      	b.n	8007126 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	699a      	ldr	r2, [r3, #24]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f042 0208 	orr.w	r2, r2, #8
 8007124:	619a      	str	r2, [r3, #24]
}
 8007126:	bf00      	nop
 8007128:	3758      	adds	r7, #88	; 0x58
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b096      	sub	sp, #88	; 0x58
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800713c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007146:	2b22      	cmp	r3, #34	; 0x22
 8007148:	f040 8098 	bne.w	800727c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800715a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800715c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007160:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007164:	4013      	ands	r3, r2
 8007166:	b29a      	uxth	r2, r3
 8007168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800716a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007170:	1c9a      	adds	r2, r3, #2
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800718e:	b29b      	uxth	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d17b      	bne.n	800728c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719c:	e853 3f00 	ldrex	r3, [r3]
 80071a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b2:	643b      	str	r3, [r7, #64]	; 0x40
 80071b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071ba:	e841 2300 	strex	r3, r2, [r1]
 80071be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1e6      	bne.n	8007194 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3308      	adds	r3, #8
 80071cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	e853 3f00 	ldrex	r3, [r3]
 80071d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	f023 0301 	bic.w	r3, r3, #1
 80071dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3308      	adds	r3, #8
 80071e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071ee:	e841 2300 	strex	r3, r2, [r1]
 80071f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1e5      	bne.n	80071c6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2220      	movs	r2, #32
 80071fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007212:	2b01      	cmp	r3, #1
 8007214:	d12e      	bne.n	8007274 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	60bb      	str	r3, [r7, #8]
   return(result);
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f023 0310 	bic.w	r3, r3, #16
 8007230:	647b      	str	r3, [r7, #68]	; 0x44
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800723a:	61bb      	str	r3, [r7, #24]
 800723c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	6979      	ldr	r1, [r7, #20]
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	e841 2300 	strex	r3, r2, [r1]
 8007246:	613b      	str	r3, [r7, #16]
   return(result);
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1e6      	bne.n	800721c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	f003 0310 	and.w	r3, r3, #16
 8007258:	2b10      	cmp	r3, #16
 800725a:	d103      	bne.n	8007264 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2210      	movs	r2, #16
 8007262:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7ff f931 	bl	80064d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007272:	e00b      	b.n	800728c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7f9 fe8b 	bl	8000f90 <HAL_UART_RxCpltCallback>
}
 800727a:	e007      	b.n	800728c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	699a      	ldr	r2, [r3, #24]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f042 0208 	orr.w	r2, r2, #8
 800728a:	619a      	str	r2, [r3, #24]
}
 800728c:	bf00      	nop
 800728e:	3758      	adds	r7, #88	; 0x58
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007294:	b084      	sub	sp, #16
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	f107 001c 	add.w	r0, r7, #28
 80072a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d120      	bne.n	80072ee <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68da      	ldr	r2, [r3, #12]
 80072bc:	4b20      	ldr	r3, [pc, #128]	; (8007340 <USB_CoreInit+0xac>)
 80072be:	4013      	ands	r3, r2
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80072d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d105      	bne.n	80072e2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fa96 	bl	8007814 <USB_CoreReset>
 80072e8:	4603      	mov	r3, r0
 80072ea:	73fb      	strb	r3, [r7, #15]
 80072ec:	e010      	b.n	8007310 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fa8a 	bl	8007814 <USB_CoreReset>
 8007300:	4603      	mov	r3, r0
 8007302:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007308:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007312:	2b01      	cmp	r3, #1
 8007314:	d10b      	bne.n	800732e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f043 0206 	orr.w	r2, r3, #6
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f043 0220 	orr.w	r2, r3, #32
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800732e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800733a:	b004      	add	sp, #16
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	ffbdffbf 	.word	0xffbdffbf

08007344 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f023 0201 	bic.w	r2, r3, #1
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	460b      	mov	r3, r1
 8007370:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007382:	78fb      	ldrb	r3, [r7, #3]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d115      	bne.n	80073b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007394:	2001      	movs	r0, #1
 8007396:	f7fa feb1 	bl	80020fc <HAL_Delay>
      ms++;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3301      	adds	r3, #1
 800739e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fa29 	bl	80077f8 <USB_GetMode>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d01e      	beq.n	80073ea <USB_SetCurrentMode+0x84>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2b31      	cmp	r3, #49	; 0x31
 80073b0:	d9f0      	bls.n	8007394 <USB_SetCurrentMode+0x2e>
 80073b2:	e01a      	b.n	80073ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80073b4:	78fb      	ldrb	r3, [r7, #3]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d115      	bne.n	80073e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80073c6:	2001      	movs	r0, #1
 80073c8:	f7fa fe98 	bl	80020fc <HAL_Delay>
      ms++;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3301      	adds	r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fa10 	bl	80077f8 <USB_GetMode>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <USB_SetCurrentMode+0x84>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b31      	cmp	r3, #49	; 0x31
 80073e2:	d9f0      	bls.n	80073c6 <USB_SetCurrentMode+0x60>
 80073e4:	e001      	b.n	80073ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e005      	b.n	80073f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2b32      	cmp	r3, #50	; 0x32
 80073ee:	d101      	bne.n	80073f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e000      	b.n	80073f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007400:	b084      	sub	sp, #16
 8007402:	b580      	push	{r7, lr}
 8007404:	b086      	sub	sp, #24
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800740e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800741a:	2300      	movs	r3, #0
 800741c:	613b      	str	r3, [r7, #16]
 800741e:	e009      	b.n	8007434 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	3340      	adds	r3, #64	; 0x40
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	2200      	movs	r2, #0
 800742c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	3301      	adds	r3, #1
 8007432:	613b      	str	r3, [r7, #16]
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	2b0e      	cmp	r3, #14
 8007438:	d9f2      	bls.n	8007420 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800743a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800743c:	2b00      	cmp	r3, #0
 800743e:	d11c      	bne.n	800747a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800744e:	f043 0302 	orr.w	r3, r3, #2
 8007452:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007458:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	e005      	b.n	8007486 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800748c:	461a      	mov	r2, r3
 800748e:	2300      	movs	r3, #0
 8007490:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007498:	4619      	mov	r1, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a0:	461a      	mov	r2, r3
 80074a2:	680b      	ldr	r3, [r1, #0]
 80074a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d10c      	bne.n	80074c6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80074ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d104      	bne.n	80074bc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80074b2:	2100      	movs	r1, #0
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f965 	bl	8007784 <USB_SetDevSpeed>
 80074ba:	e008      	b.n	80074ce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80074bc:	2101      	movs	r1, #1
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f960 	bl	8007784 <USB_SetDevSpeed>
 80074c4:	e003      	b.n	80074ce <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80074c6:	2103      	movs	r1, #3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f95b 	bl	8007784 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074ce:	2110      	movs	r1, #16
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f8f3 	bl	80076bc <USB_FlushTxFifo>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f91f 	bl	8007724 <USB_FlushRxFifo>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f6:	461a      	mov	r2, r3
 80074f8:	2300      	movs	r3, #0
 80074fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007502:	461a      	mov	r2, r3
 8007504:	2300      	movs	r3, #0
 8007506:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800750e:	461a      	mov	r2, r3
 8007510:	2300      	movs	r3, #0
 8007512:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007514:	2300      	movs	r3, #0
 8007516:	613b      	str	r3, [r7, #16]
 8007518:	e043      	b.n	80075a2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800752c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007530:	d118      	bne.n	8007564 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10a      	bne.n	800754e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4413      	add	r3, r2
 8007540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007544:	461a      	mov	r2, r3
 8007546:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800754a:	6013      	str	r3, [r2, #0]
 800754c:	e013      	b.n	8007576 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	4413      	add	r3, r2
 8007556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755a:	461a      	mov	r2, r3
 800755c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007560:	6013      	str	r3, [r2, #0]
 8007562:	e008      	b.n	8007576 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	015a      	lsls	r2, r3, #5
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	4413      	add	r3, r2
 800756c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007570:	461a      	mov	r2, r3
 8007572:	2300      	movs	r3, #0
 8007574:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007582:	461a      	mov	r2, r3
 8007584:	2300      	movs	r3, #0
 8007586:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4413      	add	r3, r2
 8007590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007594:	461a      	mov	r2, r3
 8007596:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800759a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	3301      	adds	r3, #1
 80075a0:	613b      	str	r3, [r7, #16]
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d3b7      	bcc.n	800751a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075aa:	2300      	movs	r3, #0
 80075ac:	613b      	str	r3, [r7, #16]
 80075ae:	e043      	b.n	8007638 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075c6:	d118      	bne.n	80075fa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10a      	bne.n	80075e4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075da:	461a      	mov	r2, r3
 80075dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	e013      	b.n	800760c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f0:	461a      	mov	r2, r3
 80075f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80075f6:	6013      	str	r3, [r2, #0]
 80075f8:	e008      	b.n	800760c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	4413      	add	r3, r2
 8007602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007606:	461a      	mov	r2, r3
 8007608:	2300      	movs	r3, #0
 800760a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4413      	add	r3, r2
 8007614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007618:	461a      	mov	r2, r3
 800761a:	2300      	movs	r3, #0
 800761c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	4413      	add	r3, r2
 8007626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762a:	461a      	mov	r2, r3
 800762c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007630:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	3301      	adds	r3, #1
 8007636:	613b      	str	r3, [r7, #16]
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	429a      	cmp	r2, r3
 800763e:	d3b7      	bcc.n	80075b0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800764e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007652:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007660:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007664:	2b00      	cmp	r3, #0
 8007666:	d105      	bne.n	8007674 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	f043 0210 	orr.w	r2, r3, #16
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	699a      	ldr	r2, [r3, #24]
 8007678:	4b0e      	ldr	r3, [pc, #56]	; (80076b4 <USB_DevInit+0x2b4>)
 800767a:	4313      	orrs	r3, r2
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007682:	2b00      	cmp	r3, #0
 8007684:	d005      	beq.n	8007692 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	f043 0208 	orr.w	r2, r3, #8
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007694:	2b01      	cmp	r3, #1
 8007696:	d105      	bne.n	80076a4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	699a      	ldr	r2, [r3, #24]
 800769c:	4b06      	ldr	r3, [pc, #24]	; (80076b8 <USB_DevInit+0x2b8>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076b0:	b004      	add	sp, #16
 80076b2:	4770      	bx	lr
 80076b4:	803c3800 	.word	0x803c3800
 80076b8:	40000004 	.word	0x40000004

080076bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	3301      	adds	r3, #1
 80076ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4a13      	ldr	r2, [pc, #76]	; (8007720 <USB_FlushTxFifo+0x64>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d901      	bls.n	80076dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e01b      	b.n	8007714 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	daf2      	bge.n	80076ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80076e4:	2300      	movs	r3, #0
 80076e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	019b      	lsls	r3, r3, #6
 80076ec:	f043 0220 	orr.w	r2, r3, #32
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	3301      	adds	r3, #1
 80076f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	4a08      	ldr	r2, [pc, #32]	; (8007720 <USB_FlushTxFifo+0x64>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d901      	bls.n	8007706 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e006      	b.n	8007714 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	f003 0320 	and.w	r3, r3, #32
 800770e:	2b20      	cmp	r3, #32
 8007710:	d0f0      	beq.n	80076f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	00030d40 	.word	0x00030d40

08007724 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3301      	adds	r3, #1
 8007734:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4a11      	ldr	r2, [pc, #68]	; (8007780 <USB_FlushRxFifo+0x5c>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d901      	bls.n	8007742 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e018      	b.n	8007774 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	daf2      	bge.n	8007730 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2210      	movs	r2, #16
 8007752:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3301      	adds	r3, #1
 8007758:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	4a08      	ldr	r2, [pc, #32]	; (8007780 <USB_FlushRxFifo+0x5c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d901      	bls.n	8007766 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007762:	2303      	movs	r3, #3
 8007764:	e006      	b.n	8007774 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f003 0310 	and.w	r3, r3, #16
 800776e:	2b10      	cmp	r3, #16
 8007770:	d0f0      	beq.n	8007754 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	00030d40 	.word	0x00030d40

08007784 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	460b      	mov	r3, r1
 800778e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	78fb      	ldrb	r3, [r7, #3]
 800779e:	68f9      	ldr	r1, [r7, #12]
 80077a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077a4:	4313      	orrs	r3, r2
 80077a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b085      	sub	sp, #20
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077d0:	f023 0303 	bic.w	r3, r3, #3
 80077d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077e4:	f043 0302 	orr.w	r3, r3, #2
 80077e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	f003 0301 	and.w	r3, r3, #1
}
 8007808:	4618      	mov	r0, r3
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800781c:	2300      	movs	r3, #0
 800781e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	3301      	adds	r3, #1
 8007824:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	4a13      	ldr	r2, [pc, #76]	; (8007878 <USB_CoreReset+0x64>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d901      	bls.n	8007832 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e01b      	b.n	800786a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	daf2      	bge.n	8007820 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800783a:	2300      	movs	r3, #0
 800783c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	f043 0201 	orr.w	r2, r3, #1
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3301      	adds	r3, #1
 800784e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	4a09      	ldr	r2, [pc, #36]	; (8007878 <USB_CoreReset+0x64>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d901      	bls.n	800785c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e006      	b.n	800786a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	2b01      	cmp	r3, #1
 8007866:	d0f0      	beq.n	800784a <USB_CoreReset+0x36>

  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	00030d40 	.word	0x00030d40

0800787c <siprintf>:
 800787c:	b40e      	push	{r1, r2, r3}
 800787e:	b500      	push	{lr}
 8007880:	b09c      	sub	sp, #112	; 0x70
 8007882:	ab1d      	add	r3, sp, #116	; 0x74
 8007884:	9002      	str	r0, [sp, #8]
 8007886:	9006      	str	r0, [sp, #24]
 8007888:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800788c:	4809      	ldr	r0, [pc, #36]	; (80078b4 <siprintf+0x38>)
 800788e:	9107      	str	r1, [sp, #28]
 8007890:	9104      	str	r1, [sp, #16]
 8007892:	4909      	ldr	r1, [pc, #36]	; (80078b8 <siprintf+0x3c>)
 8007894:	f853 2b04 	ldr.w	r2, [r3], #4
 8007898:	9105      	str	r1, [sp, #20]
 800789a:	6800      	ldr	r0, [r0, #0]
 800789c:	9301      	str	r3, [sp, #4]
 800789e:	a902      	add	r1, sp, #8
 80078a0:	f000 f9ce 	bl	8007c40 <_svfiprintf_r>
 80078a4:	9b02      	ldr	r3, [sp, #8]
 80078a6:	2200      	movs	r2, #0
 80078a8:	701a      	strb	r2, [r3, #0]
 80078aa:	b01c      	add	sp, #112	; 0x70
 80078ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80078b0:	b003      	add	sp, #12
 80078b2:	4770      	bx	lr
 80078b4:	2000006c 	.word	0x2000006c
 80078b8:	ffff0208 	.word	0xffff0208

080078bc <siscanf>:
 80078bc:	b40e      	push	{r1, r2, r3}
 80078be:	b510      	push	{r4, lr}
 80078c0:	b09f      	sub	sp, #124	; 0x7c
 80078c2:	ac21      	add	r4, sp, #132	; 0x84
 80078c4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80078c8:	f854 2b04 	ldr.w	r2, [r4], #4
 80078cc:	9201      	str	r2, [sp, #4]
 80078ce:	f8ad 101c 	strh.w	r1, [sp, #28]
 80078d2:	9004      	str	r0, [sp, #16]
 80078d4:	9008      	str	r0, [sp, #32]
 80078d6:	f7f8 fc9b 	bl	8000210 <strlen>
 80078da:	4b0c      	ldr	r3, [pc, #48]	; (800790c <siscanf+0x50>)
 80078dc:	9005      	str	r0, [sp, #20]
 80078de:	9009      	str	r0, [sp, #36]	; 0x24
 80078e0:	930d      	str	r3, [sp, #52]	; 0x34
 80078e2:	480b      	ldr	r0, [pc, #44]	; (8007910 <siscanf+0x54>)
 80078e4:	9a01      	ldr	r2, [sp, #4]
 80078e6:	6800      	ldr	r0, [r0, #0]
 80078e8:	9403      	str	r4, [sp, #12]
 80078ea:	2300      	movs	r3, #0
 80078ec:	9311      	str	r3, [sp, #68]	; 0x44
 80078ee:	9316      	str	r3, [sp, #88]	; 0x58
 80078f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078f4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80078f8:	a904      	add	r1, sp, #16
 80078fa:	4623      	mov	r3, r4
 80078fc:	f000 faf8 	bl	8007ef0 <__ssvfiscanf_r>
 8007900:	b01f      	add	sp, #124	; 0x7c
 8007902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007906:	b003      	add	sp, #12
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	08007915 	.word	0x08007915
 8007910:	2000006c 	.word	0x2000006c

08007914 <__seofread>:
 8007914:	2000      	movs	r0, #0
 8007916:	4770      	bx	lr

08007918 <memset>:
 8007918:	4402      	add	r2, r0
 800791a:	4603      	mov	r3, r0
 800791c:	4293      	cmp	r3, r2
 800791e:	d100      	bne.n	8007922 <memset+0xa>
 8007920:	4770      	bx	lr
 8007922:	f803 1b01 	strb.w	r1, [r3], #1
 8007926:	e7f9      	b.n	800791c <memset+0x4>

08007928 <__errno>:
 8007928:	4b01      	ldr	r3, [pc, #4]	; (8007930 <__errno+0x8>)
 800792a:	6818      	ldr	r0, [r3, #0]
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	2000006c 	.word	0x2000006c

08007934 <__libc_init_array>:
 8007934:	b570      	push	{r4, r5, r6, lr}
 8007936:	4d0d      	ldr	r5, [pc, #52]	; (800796c <__libc_init_array+0x38>)
 8007938:	4c0d      	ldr	r4, [pc, #52]	; (8007970 <__libc_init_array+0x3c>)
 800793a:	1b64      	subs	r4, r4, r5
 800793c:	10a4      	asrs	r4, r4, #2
 800793e:	2600      	movs	r6, #0
 8007940:	42a6      	cmp	r6, r4
 8007942:	d109      	bne.n	8007958 <__libc_init_array+0x24>
 8007944:	4d0b      	ldr	r5, [pc, #44]	; (8007974 <__libc_init_array+0x40>)
 8007946:	4c0c      	ldr	r4, [pc, #48]	; (8007978 <__libc_init_array+0x44>)
 8007948:	f001 f8f6 	bl	8008b38 <_init>
 800794c:	1b64      	subs	r4, r4, r5
 800794e:	10a4      	asrs	r4, r4, #2
 8007950:	2600      	movs	r6, #0
 8007952:	42a6      	cmp	r6, r4
 8007954:	d105      	bne.n	8007962 <__libc_init_array+0x2e>
 8007956:	bd70      	pop	{r4, r5, r6, pc}
 8007958:	f855 3b04 	ldr.w	r3, [r5], #4
 800795c:	4798      	blx	r3
 800795e:	3601      	adds	r6, #1
 8007960:	e7ee      	b.n	8007940 <__libc_init_array+0xc>
 8007962:	f855 3b04 	ldr.w	r3, [r5], #4
 8007966:	4798      	blx	r3
 8007968:	3601      	adds	r6, #1
 800796a:	e7f2      	b.n	8007952 <__libc_init_array+0x1e>
 800796c:	08008d68 	.word	0x08008d68
 8007970:	08008d68 	.word	0x08008d68
 8007974:	08008d68 	.word	0x08008d68
 8007978:	08008d6c 	.word	0x08008d6c

0800797c <__retarget_lock_acquire_recursive>:
 800797c:	4770      	bx	lr

0800797e <__retarget_lock_release_recursive>:
 800797e:	4770      	bx	lr

08007980 <memcpy>:
 8007980:	440a      	add	r2, r1
 8007982:	4291      	cmp	r1, r2
 8007984:	f100 33ff 	add.w	r3, r0, #4294967295
 8007988:	d100      	bne.n	800798c <memcpy+0xc>
 800798a:	4770      	bx	lr
 800798c:	b510      	push	{r4, lr}
 800798e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007992:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007996:	4291      	cmp	r1, r2
 8007998:	d1f9      	bne.n	800798e <memcpy+0xe>
 800799a:	bd10      	pop	{r4, pc}

0800799c <_free_r>:
 800799c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800799e:	2900      	cmp	r1, #0
 80079a0:	d044      	beq.n	8007a2c <_free_r+0x90>
 80079a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079a6:	9001      	str	r0, [sp, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f1a1 0404 	sub.w	r4, r1, #4
 80079ae:	bfb8      	it	lt
 80079b0:	18e4      	addlt	r4, r4, r3
 80079b2:	f000 f8df 	bl	8007b74 <__malloc_lock>
 80079b6:	4a1e      	ldr	r2, [pc, #120]	; (8007a30 <_free_r+0x94>)
 80079b8:	9801      	ldr	r0, [sp, #4]
 80079ba:	6813      	ldr	r3, [r2, #0]
 80079bc:	b933      	cbnz	r3, 80079cc <_free_r+0x30>
 80079be:	6063      	str	r3, [r4, #4]
 80079c0:	6014      	str	r4, [r2, #0]
 80079c2:	b003      	add	sp, #12
 80079c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079c8:	f000 b8da 	b.w	8007b80 <__malloc_unlock>
 80079cc:	42a3      	cmp	r3, r4
 80079ce:	d908      	bls.n	80079e2 <_free_r+0x46>
 80079d0:	6825      	ldr	r5, [r4, #0]
 80079d2:	1961      	adds	r1, r4, r5
 80079d4:	428b      	cmp	r3, r1
 80079d6:	bf01      	itttt	eq
 80079d8:	6819      	ldreq	r1, [r3, #0]
 80079da:	685b      	ldreq	r3, [r3, #4]
 80079dc:	1949      	addeq	r1, r1, r5
 80079de:	6021      	streq	r1, [r4, #0]
 80079e0:	e7ed      	b.n	80079be <_free_r+0x22>
 80079e2:	461a      	mov	r2, r3
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	b10b      	cbz	r3, 80079ec <_free_r+0x50>
 80079e8:	42a3      	cmp	r3, r4
 80079ea:	d9fa      	bls.n	80079e2 <_free_r+0x46>
 80079ec:	6811      	ldr	r1, [r2, #0]
 80079ee:	1855      	adds	r5, r2, r1
 80079f0:	42a5      	cmp	r5, r4
 80079f2:	d10b      	bne.n	8007a0c <_free_r+0x70>
 80079f4:	6824      	ldr	r4, [r4, #0]
 80079f6:	4421      	add	r1, r4
 80079f8:	1854      	adds	r4, r2, r1
 80079fa:	42a3      	cmp	r3, r4
 80079fc:	6011      	str	r1, [r2, #0]
 80079fe:	d1e0      	bne.n	80079c2 <_free_r+0x26>
 8007a00:	681c      	ldr	r4, [r3, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	6053      	str	r3, [r2, #4]
 8007a06:	440c      	add	r4, r1
 8007a08:	6014      	str	r4, [r2, #0]
 8007a0a:	e7da      	b.n	80079c2 <_free_r+0x26>
 8007a0c:	d902      	bls.n	8007a14 <_free_r+0x78>
 8007a0e:	230c      	movs	r3, #12
 8007a10:	6003      	str	r3, [r0, #0]
 8007a12:	e7d6      	b.n	80079c2 <_free_r+0x26>
 8007a14:	6825      	ldr	r5, [r4, #0]
 8007a16:	1961      	adds	r1, r4, r5
 8007a18:	428b      	cmp	r3, r1
 8007a1a:	bf04      	itt	eq
 8007a1c:	6819      	ldreq	r1, [r3, #0]
 8007a1e:	685b      	ldreq	r3, [r3, #4]
 8007a20:	6063      	str	r3, [r4, #4]
 8007a22:	bf04      	itt	eq
 8007a24:	1949      	addeq	r1, r1, r5
 8007a26:	6021      	streq	r1, [r4, #0]
 8007a28:	6054      	str	r4, [r2, #4]
 8007a2a:	e7ca      	b.n	80079c2 <_free_r+0x26>
 8007a2c:	b003      	add	sp, #12
 8007a2e:	bd30      	pop	{r4, r5, pc}
 8007a30:	20000b68 	.word	0x20000b68

08007a34 <sbrk_aligned>:
 8007a34:	b570      	push	{r4, r5, r6, lr}
 8007a36:	4e0e      	ldr	r6, [pc, #56]	; (8007a70 <sbrk_aligned+0x3c>)
 8007a38:	460c      	mov	r4, r1
 8007a3a:	6831      	ldr	r1, [r6, #0]
 8007a3c:	4605      	mov	r5, r0
 8007a3e:	b911      	cbnz	r1, 8007a46 <sbrk_aligned+0x12>
 8007a40:	f000 ff3a 	bl	80088b8 <_sbrk_r>
 8007a44:	6030      	str	r0, [r6, #0]
 8007a46:	4621      	mov	r1, r4
 8007a48:	4628      	mov	r0, r5
 8007a4a:	f000 ff35 	bl	80088b8 <_sbrk_r>
 8007a4e:	1c43      	adds	r3, r0, #1
 8007a50:	d00a      	beq.n	8007a68 <sbrk_aligned+0x34>
 8007a52:	1cc4      	adds	r4, r0, #3
 8007a54:	f024 0403 	bic.w	r4, r4, #3
 8007a58:	42a0      	cmp	r0, r4
 8007a5a:	d007      	beq.n	8007a6c <sbrk_aligned+0x38>
 8007a5c:	1a21      	subs	r1, r4, r0
 8007a5e:	4628      	mov	r0, r5
 8007a60:	f000 ff2a 	bl	80088b8 <_sbrk_r>
 8007a64:	3001      	adds	r0, #1
 8007a66:	d101      	bne.n	8007a6c <sbrk_aligned+0x38>
 8007a68:	f04f 34ff 	mov.w	r4, #4294967295
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	20000b6c 	.word	0x20000b6c

08007a74 <_malloc_r>:
 8007a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a78:	1ccd      	adds	r5, r1, #3
 8007a7a:	f025 0503 	bic.w	r5, r5, #3
 8007a7e:	3508      	adds	r5, #8
 8007a80:	2d0c      	cmp	r5, #12
 8007a82:	bf38      	it	cc
 8007a84:	250c      	movcc	r5, #12
 8007a86:	2d00      	cmp	r5, #0
 8007a88:	4607      	mov	r7, r0
 8007a8a:	db01      	blt.n	8007a90 <_malloc_r+0x1c>
 8007a8c:	42a9      	cmp	r1, r5
 8007a8e:	d905      	bls.n	8007a9c <_malloc_r+0x28>
 8007a90:	230c      	movs	r3, #12
 8007a92:	603b      	str	r3, [r7, #0]
 8007a94:	2600      	movs	r6, #0
 8007a96:	4630      	mov	r0, r6
 8007a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b70 <_malloc_r+0xfc>
 8007aa0:	f000 f868 	bl	8007b74 <__malloc_lock>
 8007aa4:	f8d8 3000 	ldr.w	r3, [r8]
 8007aa8:	461c      	mov	r4, r3
 8007aaa:	bb5c      	cbnz	r4, 8007b04 <_malloc_r+0x90>
 8007aac:	4629      	mov	r1, r5
 8007aae:	4638      	mov	r0, r7
 8007ab0:	f7ff ffc0 	bl	8007a34 <sbrk_aligned>
 8007ab4:	1c43      	adds	r3, r0, #1
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	d155      	bne.n	8007b66 <_malloc_r+0xf2>
 8007aba:	f8d8 4000 	ldr.w	r4, [r8]
 8007abe:	4626      	mov	r6, r4
 8007ac0:	2e00      	cmp	r6, #0
 8007ac2:	d145      	bne.n	8007b50 <_malloc_r+0xdc>
 8007ac4:	2c00      	cmp	r4, #0
 8007ac6:	d048      	beq.n	8007b5a <_malloc_r+0xe6>
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	4631      	mov	r1, r6
 8007acc:	4638      	mov	r0, r7
 8007ace:	eb04 0903 	add.w	r9, r4, r3
 8007ad2:	f000 fef1 	bl	80088b8 <_sbrk_r>
 8007ad6:	4581      	cmp	r9, r0
 8007ad8:	d13f      	bne.n	8007b5a <_malloc_r+0xe6>
 8007ada:	6821      	ldr	r1, [r4, #0]
 8007adc:	1a6d      	subs	r5, r5, r1
 8007ade:	4629      	mov	r1, r5
 8007ae0:	4638      	mov	r0, r7
 8007ae2:	f7ff ffa7 	bl	8007a34 <sbrk_aligned>
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	d037      	beq.n	8007b5a <_malloc_r+0xe6>
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	442b      	add	r3, r5
 8007aee:	6023      	str	r3, [r4, #0]
 8007af0:	f8d8 3000 	ldr.w	r3, [r8]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d038      	beq.n	8007b6a <_malloc_r+0xf6>
 8007af8:	685a      	ldr	r2, [r3, #4]
 8007afa:	42a2      	cmp	r2, r4
 8007afc:	d12b      	bne.n	8007b56 <_malloc_r+0xe2>
 8007afe:	2200      	movs	r2, #0
 8007b00:	605a      	str	r2, [r3, #4]
 8007b02:	e00f      	b.n	8007b24 <_malloc_r+0xb0>
 8007b04:	6822      	ldr	r2, [r4, #0]
 8007b06:	1b52      	subs	r2, r2, r5
 8007b08:	d41f      	bmi.n	8007b4a <_malloc_r+0xd6>
 8007b0a:	2a0b      	cmp	r2, #11
 8007b0c:	d917      	bls.n	8007b3e <_malloc_r+0xca>
 8007b0e:	1961      	adds	r1, r4, r5
 8007b10:	42a3      	cmp	r3, r4
 8007b12:	6025      	str	r5, [r4, #0]
 8007b14:	bf18      	it	ne
 8007b16:	6059      	strne	r1, [r3, #4]
 8007b18:	6863      	ldr	r3, [r4, #4]
 8007b1a:	bf08      	it	eq
 8007b1c:	f8c8 1000 	streq.w	r1, [r8]
 8007b20:	5162      	str	r2, [r4, r5]
 8007b22:	604b      	str	r3, [r1, #4]
 8007b24:	4638      	mov	r0, r7
 8007b26:	f104 060b 	add.w	r6, r4, #11
 8007b2a:	f000 f829 	bl	8007b80 <__malloc_unlock>
 8007b2e:	f026 0607 	bic.w	r6, r6, #7
 8007b32:	1d23      	adds	r3, r4, #4
 8007b34:	1af2      	subs	r2, r6, r3
 8007b36:	d0ae      	beq.n	8007a96 <_malloc_r+0x22>
 8007b38:	1b9b      	subs	r3, r3, r6
 8007b3a:	50a3      	str	r3, [r4, r2]
 8007b3c:	e7ab      	b.n	8007a96 <_malloc_r+0x22>
 8007b3e:	42a3      	cmp	r3, r4
 8007b40:	6862      	ldr	r2, [r4, #4]
 8007b42:	d1dd      	bne.n	8007b00 <_malloc_r+0x8c>
 8007b44:	f8c8 2000 	str.w	r2, [r8]
 8007b48:	e7ec      	b.n	8007b24 <_malloc_r+0xb0>
 8007b4a:	4623      	mov	r3, r4
 8007b4c:	6864      	ldr	r4, [r4, #4]
 8007b4e:	e7ac      	b.n	8007aaa <_malloc_r+0x36>
 8007b50:	4634      	mov	r4, r6
 8007b52:	6876      	ldr	r6, [r6, #4]
 8007b54:	e7b4      	b.n	8007ac0 <_malloc_r+0x4c>
 8007b56:	4613      	mov	r3, r2
 8007b58:	e7cc      	b.n	8007af4 <_malloc_r+0x80>
 8007b5a:	230c      	movs	r3, #12
 8007b5c:	603b      	str	r3, [r7, #0]
 8007b5e:	4638      	mov	r0, r7
 8007b60:	f000 f80e 	bl	8007b80 <__malloc_unlock>
 8007b64:	e797      	b.n	8007a96 <_malloc_r+0x22>
 8007b66:	6025      	str	r5, [r4, #0]
 8007b68:	e7dc      	b.n	8007b24 <_malloc_r+0xb0>
 8007b6a:	605b      	str	r3, [r3, #4]
 8007b6c:	deff      	udf	#255	; 0xff
 8007b6e:	bf00      	nop
 8007b70:	20000b68 	.word	0x20000b68

08007b74 <__malloc_lock>:
 8007b74:	4801      	ldr	r0, [pc, #4]	; (8007b7c <__malloc_lock+0x8>)
 8007b76:	f7ff bf01 	b.w	800797c <__retarget_lock_acquire_recursive>
 8007b7a:	bf00      	nop
 8007b7c:	20000b64 	.word	0x20000b64

08007b80 <__malloc_unlock>:
 8007b80:	4801      	ldr	r0, [pc, #4]	; (8007b88 <__malloc_unlock+0x8>)
 8007b82:	f7ff befc 	b.w	800797e <__retarget_lock_release_recursive>
 8007b86:	bf00      	nop
 8007b88:	20000b64 	.word	0x20000b64

08007b8c <__ssputs_r>:
 8007b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b90:	688e      	ldr	r6, [r1, #8]
 8007b92:	461f      	mov	r7, r3
 8007b94:	42be      	cmp	r6, r7
 8007b96:	680b      	ldr	r3, [r1, #0]
 8007b98:	4682      	mov	sl, r0
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	4690      	mov	r8, r2
 8007b9e:	d82c      	bhi.n	8007bfa <__ssputs_r+0x6e>
 8007ba0:	898a      	ldrh	r2, [r1, #12]
 8007ba2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ba6:	d026      	beq.n	8007bf6 <__ssputs_r+0x6a>
 8007ba8:	6965      	ldr	r5, [r4, #20]
 8007baa:	6909      	ldr	r1, [r1, #16]
 8007bac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bb0:	eba3 0901 	sub.w	r9, r3, r1
 8007bb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bb8:	1c7b      	adds	r3, r7, #1
 8007bba:	444b      	add	r3, r9
 8007bbc:	106d      	asrs	r5, r5, #1
 8007bbe:	429d      	cmp	r5, r3
 8007bc0:	bf38      	it	cc
 8007bc2:	461d      	movcc	r5, r3
 8007bc4:	0553      	lsls	r3, r2, #21
 8007bc6:	d527      	bpl.n	8007c18 <__ssputs_r+0x8c>
 8007bc8:	4629      	mov	r1, r5
 8007bca:	f7ff ff53 	bl	8007a74 <_malloc_r>
 8007bce:	4606      	mov	r6, r0
 8007bd0:	b360      	cbz	r0, 8007c2c <__ssputs_r+0xa0>
 8007bd2:	6921      	ldr	r1, [r4, #16]
 8007bd4:	464a      	mov	r2, r9
 8007bd6:	f7ff fed3 	bl	8007980 <memcpy>
 8007bda:	89a3      	ldrh	r3, [r4, #12]
 8007bdc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be4:	81a3      	strh	r3, [r4, #12]
 8007be6:	6126      	str	r6, [r4, #16]
 8007be8:	6165      	str	r5, [r4, #20]
 8007bea:	444e      	add	r6, r9
 8007bec:	eba5 0509 	sub.w	r5, r5, r9
 8007bf0:	6026      	str	r6, [r4, #0]
 8007bf2:	60a5      	str	r5, [r4, #8]
 8007bf4:	463e      	mov	r6, r7
 8007bf6:	42be      	cmp	r6, r7
 8007bf8:	d900      	bls.n	8007bfc <__ssputs_r+0x70>
 8007bfa:	463e      	mov	r6, r7
 8007bfc:	6820      	ldr	r0, [r4, #0]
 8007bfe:	4632      	mov	r2, r6
 8007c00:	4641      	mov	r1, r8
 8007c02:	f000 fe3e 	bl	8008882 <memmove>
 8007c06:	68a3      	ldr	r3, [r4, #8]
 8007c08:	1b9b      	subs	r3, r3, r6
 8007c0a:	60a3      	str	r3, [r4, #8]
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	4433      	add	r3, r6
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	2000      	movs	r0, #0
 8007c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c18:	462a      	mov	r2, r5
 8007c1a:	f000 fe5d 	bl	80088d8 <_realloc_r>
 8007c1e:	4606      	mov	r6, r0
 8007c20:	2800      	cmp	r0, #0
 8007c22:	d1e0      	bne.n	8007be6 <__ssputs_r+0x5a>
 8007c24:	6921      	ldr	r1, [r4, #16]
 8007c26:	4650      	mov	r0, sl
 8007c28:	f7ff feb8 	bl	800799c <_free_r>
 8007c2c:	230c      	movs	r3, #12
 8007c2e:	f8ca 3000 	str.w	r3, [sl]
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c38:	81a3      	strh	r3, [r4, #12]
 8007c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3e:	e7e9      	b.n	8007c14 <__ssputs_r+0x88>

08007c40 <_svfiprintf_r>:
 8007c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c44:	4698      	mov	r8, r3
 8007c46:	898b      	ldrh	r3, [r1, #12]
 8007c48:	061b      	lsls	r3, r3, #24
 8007c4a:	b09d      	sub	sp, #116	; 0x74
 8007c4c:	4607      	mov	r7, r0
 8007c4e:	460d      	mov	r5, r1
 8007c50:	4614      	mov	r4, r2
 8007c52:	d50e      	bpl.n	8007c72 <_svfiprintf_r+0x32>
 8007c54:	690b      	ldr	r3, [r1, #16]
 8007c56:	b963      	cbnz	r3, 8007c72 <_svfiprintf_r+0x32>
 8007c58:	2140      	movs	r1, #64	; 0x40
 8007c5a:	f7ff ff0b 	bl	8007a74 <_malloc_r>
 8007c5e:	6028      	str	r0, [r5, #0]
 8007c60:	6128      	str	r0, [r5, #16]
 8007c62:	b920      	cbnz	r0, 8007c6e <_svfiprintf_r+0x2e>
 8007c64:	230c      	movs	r3, #12
 8007c66:	603b      	str	r3, [r7, #0]
 8007c68:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6c:	e0d0      	b.n	8007e10 <_svfiprintf_r+0x1d0>
 8007c6e:	2340      	movs	r3, #64	; 0x40
 8007c70:	616b      	str	r3, [r5, #20]
 8007c72:	2300      	movs	r3, #0
 8007c74:	9309      	str	r3, [sp, #36]	; 0x24
 8007c76:	2320      	movs	r3, #32
 8007c78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c80:	2330      	movs	r3, #48	; 0x30
 8007c82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007e28 <_svfiprintf_r+0x1e8>
 8007c86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c8a:	f04f 0901 	mov.w	r9, #1
 8007c8e:	4623      	mov	r3, r4
 8007c90:	469a      	mov	sl, r3
 8007c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c96:	b10a      	cbz	r2, 8007c9c <_svfiprintf_r+0x5c>
 8007c98:	2a25      	cmp	r2, #37	; 0x25
 8007c9a:	d1f9      	bne.n	8007c90 <_svfiprintf_r+0x50>
 8007c9c:	ebba 0b04 	subs.w	fp, sl, r4
 8007ca0:	d00b      	beq.n	8007cba <_svfiprintf_r+0x7a>
 8007ca2:	465b      	mov	r3, fp
 8007ca4:	4622      	mov	r2, r4
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	4638      	mov	r0, r7
 8007caa:	f7ff ff6f 	bl	8007b8c <__ssputs_r>
 8007cae:	3001      	adds	r0, #1
 8007cb0:	f000 80a9 	beq.w	8007e06 <_svfiprintf_r+0x1c6>
 8007cb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cb6:	445a      	add	r2, fp
 8007cb8:	9209      	str	r2, [sp, #36]	; 0x24
 8007cba:	f89a 3000 	ldrb.w	r3, [sl]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 80a1 	beq.w	8007e06 <_svfiprintf_r+0x1c6>
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cce:	f10a 0a01 	add.w	sl, sl, #1
 8007cd2:	9304      	str	r3, [sp, #16]
 8007cd4:	9307      	str	r3, [sp, #28]
 8007cd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cda:	931a      	str	r3, [sp, #104]	; 0x68
 8007cdc:	4654      	mov	r4, sl
 8007cde:	2205      	movs	r2, #5
 8007ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce4:	4850      	ldr	r0, [pc, #320]	; (8007e28 <_svfiprintf_r+0x1e8>)
 8007ce6:	f7f8 fa9b 	bl	8000220 <memchr>
 8007cea:	9a04      	ldr	r2, [sp, #16]
 8007cec:	b9d8      	cbnz	r0, 8007d26 <_svfiprintf_r+0xe6>
 8007cee:	06d0      	lsls	r0, r2, #27
 8007cf0:	bf44      	itt	mi
 8007cf2:	2320      	movmi	r3, #32
 8007cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cf8:	0711      	lsls	r1, r2, #28
 8007cfa:	bf44      	itt	mi
 8007cfc:	232b      	movmi	r3, #43	; 0x2b
 8007cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d02:	f89a 3000 	ldrb.w	r3, [sl]
 8007d06:	2b2a      	cmp	r3, #42	; 0x2a
 8007d08:	d015      	beq.n	8007d36 <_svfiprintf_r+0xf6>
 8007d0a:	9a07      	ldr	r2, [sp, #28]
 8007d0c:	4654      	mov	r4, sl
 8007d0e:	2000      	movs	r0, #0
 8007d10:	f04f 0c0a 	mov.w	ip, #10
 8007d14:	4621      	mov	r1, r4
 8007d16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d1a:	3b30      	subs	r3, #48	; 0x30
 8007d1c:	2b09      	cmp	r3, #9
 8007d1e:	d94d      	bls.n	8007dbc <_svfiprintf_r+0x17c>
 8007d20:	b1b0      	cbz	r0, 8007d50 <_svfiprintf_r+0x110>
 8007d22:	9207      	str	r2, [sp, #28]
 8007d24:	e014      	b.n	8007d50 <_svfiprintf_r+0x110>
 8007d26:	eba0 0308 	sub.w	r3, r0, r8
 8007d2a:	fa09 f303 	lsl.w	r3, r9, r3
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	9304      	str	r3, [sp, #16]
 8007d32:	46a2      	mov	sl, r4
 8007d34:	e7d2      	b.n	8007cdc <_svfiprintf_r+0x9c>
 8007d36:	9b03      	ldr	r3, [sp, #12]
 8007d38:	1d19      	adds	r1, r3, #4
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	9103      	str	r1, [sp, #12]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	bfbb      	ittet	lt
 8007d42:	425b      	neglt	r3, r3
 8007d44:	f042 0202 	orrlt.w	r2, r2, #2
 8007d48:	9307      	strge	r3, [sp, #28]
 8007d4a:	9307      	strlt	r3, [sp, #28]
 8007d4c:	bfb8      	it	lt
 8007d4e:	9204      	strlt	r2, [sp, #16]
 8007d50:	7823      	ldrb	r3, [r4, #0]
 8007d52:	2b2e      	cmp	r3, #46	; 0x2e
 8007d54:	d10c      	bne.n	8007d70 <_svfiprintf_r+0x130>
 8007d56:	7863      	ldrb	r3, [r4, #1]
 8007d58:	2b2a      	cmp	r3, #42	; 0x2a
 8007d5a:	d134      	bne.n	8007dc6 <_svfiprintf_r+0x186>
 8007d5c:	9b03      	ldr	r3, [sp, #12]
 8007d5e:	1d1a      	adds	r2, r3, #4
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	9203      	str	r2, [sp, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	bfb8      	it	lt
 8007d68:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d6c:	3402      	adds	r4, #2
 8007d6e:	9305      	str	r3, [sp, #20]
 8007d70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007e38 <_svfiprintf_r+0x1f8>
 8007d74:	7821      	ldrb	r1, [r4, #0]
 8007d76:	2203      	movs	r2, #3
 8007d78:	4650      	mov	r0, sl
 8007d7a:	f7f8 fa51 	bl	8000220 <memchr>
 8007d7e:	b138      	cbz	r0, 8007d90 <_svfiprintf_r+0x150>
 8007d80:	9b04      	ldr	r3, [sp, #16]
 8007d82:	eba0 000a 	sub.w	r0, r0, sl
 8007d86:	2240      	movs	r2, #64	; 0x40
 8007d88:	4082      	lsls	r2, r0
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	3401      	adds	r4, #1
 8007d8e:	9304      	str	r3, [sp, #16]
 8007d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d94:	4825      	ldr	r0, [pc, #148]	; (8007e2c <_svfiprintf_r+0x1ec>)
 8007d96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d9a:	2206      	movs	r2, #6
 8007d9c:	f7f8 fa40 	bl	8000220 <memchr>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d038      	beq.n	8007e16 <_svfiprintf_r+0x1d6>
 8007da4:	4b22      	ldr	r3, [pc, #136]	; (8007e30 <_svfiprintf_r+0x1f0>)
 8007da6:	bb1b      	cbnz	r3, 8007df0 <_svfiprintf_r+0x1b0>
 8007da8:	9b03      	ldr	r3, [sp, #12]
 8007daa:	3307      	adds	r3, #7
 8007dac:	f023 0307 	bic.w	r3, r3, #7
 8007db0:	3308      	adds	r3, #8
 8007db2:	9303      	str	r3, [sp, #12]
 8007db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db6:	4433      	add	r3, r6
 8007db8:	9309      	str	r3, [sp, #36]	; 0x24
 8007dba:	e768      	b.n	8007c8e <_svfiprintf_r+0x4e>
 8007dbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dc0:	460c      	mov	r4, r1
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	e7a6      	b.n	8007d14 <_svfiprintf_r+0xd4>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	3401      	adds	r4, #1
 8007dca:	9305      	str	r3, [sp, #20]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	f04f 0c0a 	mov.w	ip, #10
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dd8:	3a30      	subs	r2, #48	; 0x30
 8007dda:	2a09      	cmp	r2, #9
 8007ddc:	d903      	bls.n	8007de6 <_svfiprintf_r+0x1a6>
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0c6      	beq.n	8007d70 <_svfiprintf_r+0x130>
 8007de2:	9105      	str	r1, [sp, #20]
 8007de4:	e7c4      	b.n	8007d70 <_svfiprintf_r+0x130>
 8007de6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dea:	4604      	mov	r4, r0
 8007dec:	2301      	movs	r3, #1
 8007dee:	e7f0      	b.n	8007dd2 <_svfiprintf_r+0x192>
 8007df0:	ab03      	add	r3, sp, #12
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	462a      	mov	r2, r5
 8007df6:	4b0f      	ldr	r3, [pc, #60]	; (8007e34 <_svfiprintf_r+0x1f4>)
 8007df8:	a904      	add	r1, sp, #16
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	f3af 8000 	nop.w
 8007e00:	1c42      	adds	r2, r0, #1
 8007e02:	4606      	mov	r6, r0
 8007e04:	d1d6      	bne.n	8007db4 <_svfiprintf_r+0x174>
 8007e06:	89ab      	ldrh	r3, [r5, #12]
 8007e08:	065b      	lsls	r3, r3, #25
 8007e0a:	f53f af2d 	bmi.w	8007c68 <_svfiprintf_r+0x28>
 8007e0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e10:	b01d      	add	sp, #116	; 0x74
 8007e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e16:	ab03      	add	r3, sp, #12
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	462a      	mov	r2, r5
 8007e1c:	4b05      	ldr	r3, [pc, #20]	; (8007e34 <_svfiprintf_r+0x1f4>)
 8007e1e:	a904      	add	r1, sp, #16
 8007e20:	4638      	mov	r0, r7
 8007e22:	f000 fa4b 	bl	80082bc <_printf_i>
 8007e26:	e7eb      	b.n	8007e00 <_svfiprintf_r+0x1c0>
 8007e28:	08008c10 	.word	0x08008c10
 8007e2c:	08008c1a 	.word	0x08008c1a
 8007e30:	00000000 	.word	0x00000000
 8007e34:	08007b8d 	.word	0x08007b8d
 8007e38:	08008c16 	.word	0x08008c16

08007e3c <_sungetc_r>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	1c4b      	adds	r3, r1, #1
 8007e40:	4614      	mov	r4, r2
 8007e42:	d103      	bne.n	8007e4c <_sungetc_r+0x10>
 8007e44:	f04f 35ff 	mov.w	r5, #4294967295
 8007e48:	4628      	mov	r0, r5
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	8993      	ldrh	r3, [r2, #12]
 8007e4e:	f023 0320 	bic.w	r3, r3, #32
 8007e52:	8193      	strh	r3, [r2, #12]
 8007e54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e56:	6852      	ldr	r2, [r2, #4]
 8007e58:	b2cd      	uxtb	r5, r1
 8007e5a:	b18b      	cbz	r3, 8007e80 <_sungetc_r+0x44>
 8007e5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	dd08      	ble.n	8007e74 <_sungetc_r+0x38>
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	1e5a      	subs	r2, r3, #1
 8007e66:	6022      	str	r2, [r4, #0]
 8007e68:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007e6c:	6863      	ldr	r3, [r4, #4]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	6063      	str	r3, [r4, #4]
 8007e72:	e7e9      	b.n	8007e48 <_sungetc_r+0xc>
 8007e74:	4621      	mov	r1, r4
 8007e76:	f000 fcca 	bl	800880e <__submore>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	d0f1      	beq.n	8007e62 <_sungetc_r+0x26>
 8007e7e:	e7e1      	b.n	8007e44 <_sungetc_r+0x8>
 8007e80:	6921      	ldr	r1, [r4, #16]
 8007e82:	6823      	ldr	r3, [r4, #0]
 8007e84:	b151      	cbz	r1, 8007e9c <_sungetc_r+0x60>
 8007e86:	4299      	cmp	r1, r3
 8007e88:	d208      	bcs.n	8007e9c <_sungetc_r+0x60>
 8007e8a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007e8e:	42a9      	cmp	r1, r5
 8007e90:	d104      	bne.n	8007e9c <_sungetc_r+0x60>
 8007e92:	3b01      	subs	r3, #1
 8007e94:	3201      	adds	r2, #1
 8007e96:	6023      	str	r3, [r4, #0]
 8007e98:	6062      	str	r2, [r4, #4]
 8007e9a:	e7d5      	b.n	8007e48 <_sungetc_r+0xc>
 8007e9c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007ea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ea4:	6363      	str	r3, [r4, #52]	; 0x34
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	63a3      	str	r3, [r4, #56]	; 0x38
 8007eaa:	4623      	mov	r3, r4
 8007eac:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007eb0:	6023      	str	r3, [r4, #0]
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e7dc      	b.n	8007e70 <_sungetc_r+0x34>

08007eb6 <__ssrefill_r>:
 8007eb6:	b510      	push	{r4, lr}
 8007eb8:	460c      	mov	r4, r1
 8007eba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007ebc:	b169      	cbz	r1, 8007eda <__ssrefill_r+0x24>
 8007ebe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ec2:	4299      	cmp	r1, r3
 8007ec4:	d001      	beq.n	8007eca <__ssrefill_r+0x14>
 8007ec6:	f7ff fd69 	bl	800799c <_free_r>
 8007eca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ecc:	6063      	str	r3, [r4, #4]
 8007ece:	2000      	movs	r0, #0
 8007ed0:	6360      	str	r0, [r4, #52]	; 0x34
 8007ed2:	b113      	cbz	r3, 8007eda <__ssrefill_r+0x24>
 8007ed4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007ed6:	6023      	str	r3, [r4, #0]
 8007ed8:	bd10      	pop	{r4, pc}
 8007eda:	6923      	ldr	r3, [r4, #16]
 8007edc:	6023      	str	r3, [r4, #0]
 8007ede:	2300      	movs	r3, #0
 8007ee0:	6063      	str	r3, [r4, #4]
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	f043 0320 	orr.w	r3, r3, #32
 8007ee8:	81a3      	strh	r3, [r4, #12]
 8007eea:	f04f 30ff 	mov.w	r0, #4294967295
 8007eee:	e7f3      	b.n	8007ed8 <__ssrefill_r+0x22>

08007ef0 <__ssvfiscanf_r>:
 8007ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef4:	460c      	mov	r4, r1
 8007ef6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007efa:	2100      	movs	r1, #0
 8007efc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007f00:	49a6      	ldr	r1, [pc, #664]	; (800819c <__ssvfiscanf_r+0x2ac>)
 8007f02:	91a0      	str	r1, [sp, #640]	; 0x280
 8007f04:	f10d 0804 	add.w	r8, sp, #4
 8007f08:	49a5      	ldr	r1, [pc, #660]	; (80081a0 <__ssvfiscanf_r+0x2b0>)
 8007f0a:	4fa6      	ldr	r7, [pc, #664]	; (80081a4 <__ssvfiscanf_r+0x2b4>)
 8007f0c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80081a8 <__ssvfiscanf_r+0x2b8>
 8007f10:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007f14:	4606      	mov	r6, r0
 8007f16:	91a1      	str	r1, [sp, #644]	; 0x284
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	7813      	ldrb	r3, [r2, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f000 815a 	beq.w	80081d6 <__ssvfiscanf_r+0x2e6>
 8007f22:	5cf9      	ldrb	r1, [r7, r3]
 8007f24:	f011 0108 	ands.w	r1, r1, #8
 8007f28:	f102 0501 	add.w	r5, r2, #1
 8007f2c:	d019      	beq.n	8007f62 <__ssvfiscanf_r+0x72>
 8007f2e:	6863      	ldr	r3, [r4, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	dd0f      	ble.n	8007f54 <__ssvfiscanf_r+0x64>
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	781a      	ldrb	r2, [r3, #0]
 8007f38:	5cba      	ldrb	r2, [r7, r2]
 8007f3a:	0712      	lsls	r2, r2, #28
 8007f3c:	d401      	bmi.n	8007f42 <__ssvfiscanf_r+0x52>
 8007f3e:	462a      	mov	r2, r5
 8007f40:	e7eb      	b.n	8007f1a <__ssvfiscanf_r+0x2a>
 8007f42:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007f44:	3201      	adds	r2, #1
 8007f46:	9245      	str	r2, [sp, #276]	; 0x114
 8007f48:	6862      	ldr	r2, [r4, #4]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	3a01      	subs	r2, #1
 8007f4e:	6062      	str	r2, [r4, #4]
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	e7ec      	b.n	8007f2e <__ssvfiscanf_r+0x3e>
 8007f54:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007f56:	4621      	mov	r1, r4
 8007f58:	4630      	mov	r0, r6
 8007f5a:	4798      	blx	r3
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	d0e9      	beq.n	8007f34 <__ssvfiscanf_r+0x44>
 8007f60:	e7ed      	b.n	8007f3e <__ssvfiscanf_r+0x4e>
 8007f62:	2b25      	cmp	r3, #37	; 0x25
 8007f64:	d012      	beq.n	8007f8c <__ssvfiscanf_r+0x9c>
 8007f66:	469a      	mov	sl, r3
 8007f68:	6863      	ldr	r3, [r4, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f340 8091 	ble.w	8008092 <__ssvfiscanf_r+0x1a2>
 8007f70:	6822      	ldr	r2, [r4, #0]
 8007f72:	7813      	ldrb	r3, [r2, #0]
 8007f74:	4553      	cmp	r3, sl
 8007f76:	f040 812e 	bne.w	80081d6 <__ssvfiscanf_r+0x2e6>
 8007f7a:	6863      	ldr	r3, [r4, #4]
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	6063      	str	r3, [r4, #4]
 8007f80:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007f82:	3201      	adds	r2, #1
 8007f84:	3301      	adds	r3, #1
 8007f86:	6022      	str	r2, [r4, #0]
 8007f88:	9345      	str	r3, [sp, #276]	; 0x114
 8007f8a:	e7d8      	b.n	8007f3e <__ssvfiscanf_r+0x4e>
 8007f8c:	9141      	str	r1, [sp, #260]	; 0x104
 8007f8e:	9143      	str	r1, [sp, #268]	; 0x10c
 8007f90:	7853      	ldrb	r3, [r2, #1]
 8007f92:	2b2a      	cmp	r3, #42	; 0x2a
 8007f94:	bf02      	ittt	eq
 8007f96:	2310      	moveq	r3, #16
 8007f98:	1c95      	addeq	r5, r2, #2
 8007f9a:	9341      	streq	r3, [sp, #260]	; 0x104
 8007f9c:	220a      	movs	r2, #10
 8007f9e:	46aa      	mov	sl, r5
 8007fa0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007fa4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007fa8:	2b09      	cmp	r3, #9
 8007faa:	d91c      	bls.n	8007fe6 <__ssvfiscanf_r+0xf6>
 8007fac:	487e      	ldr	r0, [pc, #504]	; (80081a8 <__ssvfiscanf_r+0x2b8>)
 8007fae:	2203      	movs	r2, #3
 8007fb0:	f7f8 f936 	bl	8000220 <memchr>
 8007fb4:	b138      	cbz	r0, 8007fc6 <__ssvfiscanf_r+0xd6>
 8007fb6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007fb8:	eba0 0009 	sub.w	r0, r0, r9
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	4083      	lsls	r3, r0
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	9341      	str	r3, [sp, #260]	; 0x104
 8007fc4:	4655      	mov	r5, sl
 8007fc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007fca:	2b78      	cmp	r3, #120	; 0x78
 8007fcc:	d806      	bhi.n	8007fdc <__ssvfiscanf_r+0xec>
 8007fce:	2b57      	cmp	r3, #87	; 0x57
 8007fd0:	d810      	bhi.n	8007ff4 <__ssvfiscanf_r+0x104>
 8007fd2:	2b25      	cmp	r3, #37	; 0x25
 8007fd4:	d0c7      	beq.n	8007f66 <__ssvfiscanf_r+0x76>
 8007fd6:	d857      	bhi.n	8008088 <__ssvfiscanf_r+0x198>
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d065      	beq.n	80080a8 <__ssvfiscanf_r+0x1b8>
 8007fdc:	2303      	movs	r3, #3
 8007fde:	9347      	str	r3, [sp, #284]	; 0x11c
 8007fe0:	230a      	movs	r3, #10
 8007fe2:	9342      	str	r3, [sp, #264]	; 0x108
 8007fe4:	e076      	b.n	80080d4 <__ssvfiscanf_r+0x1e4>
 8007fe6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007fe8:	fb02 1103 	mla	r1, r2, r3, r1
 8007fec:	3930      	subs	r1, #48	; 0x30
 8007fee:	9143      	str	r1, [sp, #268]	; 0x10c
 8007ff0:	4655      	mov	r5, sl
 8007ff2:	e7d4      	b.n	8007f9e <__ssvfiscanf_r+0xae>
 8007ff4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007ff8:	2a20      	cmp	r2, #32
 8007ffa:	d8ef      	bhi.n	8007fdc <__ssvfiscanf_r+0xec>
 8007ffc:	a101      	add	r1, pc, #4	; (adr r1, 8008004 <__ssvfiscanf_r+0x114>)
 8007ffe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008002:	bf00      	nop
 8008004:	080080b7 	.word	0x080080b7
 8008008:	08007fdd 	.word	0x08007fdd
 800800c:	08007fdd 	.word	0x08007fdd
 8008010:	08008115 	.word	0x08008115
 8008014:	08007fdd 	.word	0x08007fdd
 8008018:	08007fdd 	.word	0x08007fdd
 800801c:	08007fdd 	.word	0x08007fdd
 8008020:	08007fdd 	.word	0x08007fdd
 8008024:	08007fdd 	.word	0x08007fdd
 8008028:	08007fdd 	.word	0x08007fdd
 800802c:	08007fdd 	.word	0x08007fdd
 8008030:	0800812b 	.word	0x0800812b
 8008034:	08008111 	.word	0x08008111
 8008038:	0800808f 	.word	0x0800808f
 800803c:	0800808f 	.word	0x0800808f
 8008040:	0800808f 	.word	0x0800808f
 8008044:	08007fdd 	.word	0x08007fdd
 8008048:	080080cd 	.word	0x080080cd
 800804c:	08007fdd 	.word	0x08007fdd
 8008050:	08007fdd 	.word	0x08007fdd
 8008054:	08007fdd 	.word	0x08007fdd
 8008058:	08007fdd 	.word	0x08007fdd
 800805c:	0800813b 	.word	0x0800813b
 8008060:	08008109 	.word	0x08008109
 8008064:	080080af 	.word	0x080080af
 8008068:	08007fdd 	.word	0x08007fdd
 800806c:	08007fdd 	.word	0x08007fdd
 8008070:	08008137 	.word	0x08008137
 8008074:	08007fdd 	.word	0x08007fdd
 8008078:	08008111 	.word	0x08008111
 800807c:	08007fdd 	.word	0x08007fdd
 8008080:	08007fdd 	.word	0x08007fdd
 8008084:	080080b7 	.word	0x080080b7
 8008088:	3b45      	subs	r3, #69	; 0x45
 800808a:	2b02      	cmp	r3, #2
 800808c:	d8a6      	bhi.n	8007fdc <__ssvfiscanf_r+0xec>
 800808e:	2305      	movs	r3, #5
 8008090:	e01f      	b.n	80080d2 <__ssvfiscanf_r+0x1e2>
 8008092:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008094:	4621      	mov	r1, r4
 8008096:	4630      	mov	r0, r6
 8008098:	4798      	blx	r3
 800809a:	2800      	cmp	r0, #0
 800809c:	f43f af68 	beq.w	8007f70 <__ssvfiscanf_r+0x80>
 80080a0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80080a2:	2800      	cmp	r0, #0
 80080a4:	f040 808d 	bne.w	80081c2 <__ssvfiscanf_r+0x2d2>
 80080a8:	f04f 30ff 	mov.w	r0, #4294967295
 80080ac:	e08f      	b.n	80081ce <__ssvfiscanf_r+0x2de>
 80080ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80080b0:	f042 0220 	orr.w	r2, r2, #32
 80080b4:	9241      	str	r2, [sp, #260]	; 0x104
 80080b6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80080b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080bc:	9241      	str	r2, [sp, #260]	; 0x104
 80080be:	2210      	movs	r2, #16
 80080c0:	2b6f      	cmp	r3, #111	; 0x6f
 80080c2:	9242      	str	r2, [sp, #264]	; 0x108
 80080c4:	bf34      	ite	cc
 80080c6:	2303      	movcc	r3, #3
 80080c8:	2304      	movcs	r3, #4
 80080ca:	e002      	b.n	80080d2 <__ssvfiscanf_r+0x1e2>
 80080cc:	2300      	movs	r3, #0
 80080ce:	9342      	str	r3, [sp, #264]	; 0x108
 80080d0:	2303      	movs	r3, #3
 80080d2:	9347      	str	r3, [sp, #284]	; 0x11c
 80080d4:	6863      	ldr	r3, [r4, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	dd3d      	ble.n	8008156 <__ssvfiscanf_r+0x266>
 80080da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80080dc:	0659      	lsls	r1, r3, #25
 80080de:	d404      	bmi.n	80080ea <__ssvfiscanf_r+0x1fa>
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	781a      	ldrb	r2, [r3, #0]
 80080e4:	5cba      	ldrb	r2, [r7, r2]
 80080e6:	0712      	lsls	r2, r2, #28
 80080e8:	d43c      	bmi.n	8008164 <__ssvfiscanf_r+0x274>
 80080ea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	dc4b      	bgt.n	8008188 <__ssvfiscanf_r+0x298>
 80080f0:	466b      	mov	r3, sp
 80080f2:	4622      	mov	r2, r4
 80080f4:	a941      	add	r1, sp, #260	; 0x104
 80080f6:	4630      	mov	r0, r6
 80080f8:	f000 fa02 	bl	8008500 <_scanf_chars>
 80080fc:	2801      	cmp	r0, #1
 80080fe:	d06a      	beq.n	80081d6 <__ssvfiscanf_r+0x2e6>
 8008100:	2802      	cmp	r0, #2
 8008102:	f47f af1c 	bne.w	8007f3e <__ssvfiscanf_r+0x4e>
 8008106:	e7cb      	b.n	80080a0 <__ssvfiscanf_r+0x1b0>
 8008108:	2308      	movs	r3, #8
 800810a:	9342      	str	r3, [sp, #264]	; 0x108
 800810c:	2304      	movs	r3, #4
 800810e:	e7e0      	b.n	80080d2 <__ssvfiscanf_r+0x1e2>
 8008110:	220a      	movs	r2, #10
 8008112:	e7d5      	b.n	80080c0 <__ssvfiscanf_r+0x1d0>
 8008114:	4629      	mov	r1, r5
 8008116:	4640      	mov	r0, r8
 8008118:	f000 fb40 	bl	800879c <__sccl>
 800811c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800811e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008122:	9341      	str	r3, [sp, #260]	; 0x104
 8008124:	4605      	mov	r5, r0
 8008126:	2301      	movs	r3, #1
 8008128:	e7d3      	b.n	80080d2 <__ssvfiscanf_r+0x1e2>
 800812a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800812c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008130:	9341      	str	r3, [sp, #260]	; 0x104
 8008132:	2300      	movs	r3, #0
 8008134:	e7cd      	b.n	80080d2 <__ssvfiscanf_r+0x1e2>
 8008136:	2302      	movs	r3, #2
 8008138:	e7cb      	b.n	80080d2 <__ssvfiscanf_r+0x1e2>
 800813a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800813c:	06c3      	lsls	r3, r0, #27
 800813e:	f53f aefe 	bmi.w	8007f3e <__ssvfiscanf_r+0x4e>
 8008142:	9b00      	ldr	r3, [sp, #0]
 8008144:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008146:	1d19      	adds	r1, r3, #4
 8008148:	9100      	str	r1, [sp, #0]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	07c0      	lsls	r0, r0, #31
 800814e:	bf4c      	ite	mi
 8008150:	801a      	strhmi	r2, [r3, #0]
 8008152:	601a      	strpl	r2, [r3, #0]
 8008154:	e6f3      	b.n	8007f3e <__ssvfiscanf_r+0x4e>
 8008156:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008158:	4621      	mov	r1, r4
 800815a:	4630      	mov	r0, r6
 800815c:	4798      	blx	r3
 800815e:	2800      	cmp	r0, #0
 8008160:	d0bb      	beq.n	80080da <__ssvfiscanf_r+0x1ea>
 8008162:	e79d      	b.n	80080a0 <__ssvfiscanf_r+0x1b0>
 8008164:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008166:	3201      	adds	r2, #1
 8008168:	9245      	str	r2, [sp, #276]	; 0x114
 800816a:	6862      	ldr	r2, [r4, #4]
 800816c:	3a01      	subs	r2, #1
 800816e:	2a00      	cmp	r2, #0
 8008170:	6062      	str	r2, [r4, #4]
 8008172:	dd02      	ble.n	800817a <__ssvfiscanf_r+0x28a>
 8008174:	3301      	adds	r3, #1
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	e7b2      	b.n	80080e0 <__ssvfiscanf_r+0x1f0>
 800817a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800817c:	4621      	mov	r1, r4
 800817e:	4630      	mov	r0, r6
 8008180:	4798      	blx	r3
 8008182:	2800      	cmp	r0, #0
 8008184:	d0ac      	beq.n	80080e0 <__ssvfiscanf_r+0x1f0>
 8008186:	e78b      	b.n	80080a0 <__ssvfiscanf_r+0x1b0>
 8008188:	2b04      	cmp	r3, #4
 800818a:	dc0f      	bgt.n	80081ac <__ssvfiscanf_r+0x2bc>
 800818c:	466b      	mov	r3, sp
 800818e:	4622      	mov	r2, r4
 8008190:	a941      	add	r1, sp, #260	; 0x104
 8008192:	4630      	mov	r0, r6
 8008194:	f000 fa0e 	bl	80085b4 <_scanf_i>
 8008198:	e7b0      	b.n	80080fc <__ssvfiscanf_r+0x20c>
 800819a:	bf00      	nop
 800819c:	08007e3d 	.word	0x08007e3d
 80081a0:	08007eb7 	.word	0x08007eb7
 80081a4:	08008c5f 	.word	0x08008c5f
 80081a8:	08008c16 	.word	0x08008c16
 80081ac:	4b0b      	ldr	r3, [pc, #44]	; (80081dc <__ssvfiscanf_r+0x2ec>)
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f43f aec5 	beq.w	8007f3e <__ssvfiscanf_r+0x4e>
 80081b4:	466b      	mov	r3, sp
 80081b6:	4622      	mov	r2, r4
 80081b8:	a941      	add	r1, sp, #260	; 0x104
 80081ba:	4630      	mov	r0, r6
 80081bc:	f3af 8000 	nop.w
 80081c0:	e79c      	b.n	80080fc <__ssvfiscanf_r+0x20c>
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80081c8:	bf18      	it	ne
 80081ca:	f04f 30ff 	movne.w	r0, #4294967295
 80081ce:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80081d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80081d8:	e7f9      	b.n	80081ce <__ssvfiscanf_r+0x2de>
 80081da:	bf00      	nop
 80081dc:	00000000 	.word	0x00000000

080081e0 <_printf_common>:
 80081e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e4:	4616      	mov	r6, r2
 80081e6:	4699      	mov	r9, r3
 80081e8:	688a      	ldr	r2, [r1, #8]
 80081ea:	690b      	ldr	r3, [r1, #16]
 80081ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081f0:	4293      	cmp	r3, r2
 80081f2:	bfb8      	it	lt
 80081f4:	4613      	movlt	r3, r2
 80081f6:	6033      	str	r3, [r6, #0]
 80081f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081fc:	4607      	mov	r7, r0
 80081fe:	460c      	mov	r4, r1
 8008200:	b10a      	cbz	r2, 8008206 <_printf_common+0x26>
 8008202:	3301      	adds	r3, #1
 8008204:	6033      	str	r3, [r6, #0]
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	0699      	lsls	r1, r3, #26
 800820a:	bf42      	ittt	mi
 800820c:	6833      	ldrmi	r3, [r6, #0]
 800820e:	3302      	addmi	r3, #2
 8008210:	6033      	strmi	r3, [r6, #0]
 8008212:	6825      	ldr	r5, [r4, #0]
 8008214:	f015 0506 	ands.w	r5, r5, #6
 8008218:	d106      	bne.n	8008228 <_printf_common+0x48>
 800821a:	f104 0a19 	add.w	sl, r4, #25
 800821e:	68e3      	ldr	r3, [r4, #12]
 8008220:	6832      	ldr	r2, [r6, #0]
 8008222:	1a9b      	subs	r3, r3, r2
 8008224:	42ab      	cmp	r3, r5
 8008226:	dc26      	bgt.n	8008276 <_printf_common+0x96>
 8008228:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800822c:	1e13      	subs	r3, r2, #0
 800822e:	6822      	ldr	r2, [r4, #0]
 8008230:	bf18      	it	ne
 8008232:	2301      	movne	r3, #1
 8008234:	0692      	lsls	r2, r2, #26
 8008236:	d42b      	bmi.n	8008290 <_printf_common+0xb0>
 8008238:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800823c:	4649      	mov	r1, r9
 800823e:	4638      	mov	r0, r7
 8008240:	47c0      	blx	r8
 8008242:	3001      	adds	r0, #1
 8008244:	d01e      	beq.n	8008284 <_printf_common+0xa4>
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	6922      	ldr	r2, [r4, #16]
 800824a:	f003 0306 	and.w	r3, r3, #6
 800824e:	2b04      	cmp	r3, #4
 8008250:	bf02      	ittt	eq
 8008252:	68e5      	ldreq	r5, [r4, #12]
 8008254:	6833      	ldreq	r3, [r6, #0]
 8008256:	1aed      	subeq	r5, r5, r3
 8008258:	68a3      	ldr	r3, [r4, #8]
 800825a:	bf0c      	ite	eq
 800825c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008260:	2500      	movne	r5, #0
 8008262:	4293      	cmp	r3, r2
 8008264:	bfc4      	itt	gt
 8008266:	1a9b      	subgt	r3, r3, r2
 8008268:	18ed      	addgt	r5, r5, r3
 800826a:	2600      	movs	r6, #0
 800826c:	341a      	adds	r4, #26
 800826e:	42b5      	cmp	r5, r6
 8008270:	d11a      	bne.n	80082a8 <_printf_common+0xc8>
 8008272:	2000      	movs	r0, #0
 8008274:	e008      	b.n	8008288 <_printf_common+0xa8>
 8008276:	2301      	movs	r3, #1
 8008278:	4652      	mov	r2, sl
 800827a:	4649      	mov	r1, r9
 800827c:	4638      	mov	r0, r7
 800827e:	47c0      	blx	r8
 8008280:	3001      	adds	r0, #1
 8008282:	d103      	bne.n	800828c <_printf_common+0xac>
 8008284:	f04f 30ff 	mov.w	r0, #4294967295
 8008288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800828c:	3501      	adds	r5, #1
 800828e:	e7c6      	b.n	800821e <_printf_common+0x3e>
 8008290:	18e1      	adds	r1, r4, r3
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	2030      	movs	r0, #48	; 0x30
 8008296:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800829a:	4422      	add	r2, r4
 800829c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082a4:	3302      	adds	r3, #2
 80082a6:	e7c7      	b.n	8008238 <_printf_common+0x58>
 80082a8:	2301      	movs	r3, #1
 80082aa:	4622      	mov	r2, r4
 80082ac:	4649      	mov	r1, r9
 80082ae:	4638      	mov	r0, r7
 80082b0:	47c0      	blx	r8
 80082b2:	3001      	adds	r0, #1
 80082b4:	d0e6      	beq.n	8008284 <_printf_common+0xa4>
 80082b6:	3601      	adds	r6, #1
 80082b8:	e7d9      	b.n	800826e <_printf_common+0x8e>
	...

080082bc <_printf_i>:
 80082bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082c0:	7e0f      	ldrb	r7, [r1, #24]
 80082c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082c4:	2f78      	cmp	r7, #120	; 0x78
 80082c6:	4691      	mov	r9, r2
 80082c8:	4680      	mov	r8, r0
 80082ca:	460c      	mov	r4, r1
 80082cc:	469a      	mov	sl, r3
 80082ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082d2:	d807      	bhi.n	80082e4 <_printf_i+0x28>
 80082d4:	2f62      	cmp	r7, #98	; 0x62
 80082d6:	d80a      	bhi.n	80082ee <_printf_i+0x32>
 80082d8:	2f00      	cmp	r7, #0
 80082da:	f000 80d4 	beq.w	8008486 <_printf_i+0x1ca>
 80082de:	2f58      	cmp	r7, #88	; 0x58
 80082e0:	f000 80c0 	beq.w	8008464 <_printf_i+0x1a8>
 80082e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082ec:	e03a      	b.n	8008364 <_printf_i+0xa8>
 80082ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082f2:	2b15      	cmp	r3, #21
 80082f4:	d8f6      	bhi.n	80082e4 <_printf_i+0x28>
 80082f6:	a101      	add	r1, pc, #4	; (adr r1, 80082fc <_printf_i+0x40>)
 80082f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082fc:	08008355 	.word	0x08008355
 8008300:	08008369 	.word	0x08008369
 8008304:	080082e5 	.word	0x080082e5
 8008308:	080082e5 	.word	0x080082e5
 800830c:	080082e5 	.word	0x080082e5
 8008310:	080082e5 	.word	0x080082e5
 8008314:	08008369 	.word	0x08008369
 8008318:	080082e5 	.word	0x080082e5
 800831c:	080082e5 	.word	0x080082e5
 8008320:	080082e5 	.word	0x080082e5
 8008324:	080082e5 	.word	0x080082e5
 8008328:	0800846d 	.word	0x0800846d
 800832c:	08008395 	.word	0x08008395
 8008330:	08008427 	.word	0x08008427
 8008334:	080082e5 	.word	0x080082e5
 8008338:	080082e5 	.word	0x080082e5
 800833c:	0800848f 	.word	0x0800848f
 8008340:	080082e5 	.word	0x080082e5
 8008344:	08008395 	.word	0x08008395
 8008348:	080082e5 	.word	0x080082e5
 800834c:	080082e5 	.word	0x080082e5
 8008350:	0800842f 	.word	0x0800842f
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	1d1a      	adds	r2, r3, #4
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	602a      	str	r2, [r5, #0]
 800835c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008360:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008364:	2301      	movs	r3, #1
 8008366:	e09f      	b.n	80084a8 <_printf_i+0x1ec>
 8008368:	6820      	ldr	r0, [r4, #0]
 800836a:	682b      	ldr	r3, [r5, #0]
 800836c:	0607      	lsls	r7, r0, #24
 800836e:	f103 0104 	add.w	r1, r3, #4
 8008372:	6029      	str	r1, [r5, #0]
 8008374:	d501      	bpl.n	800837a <_printf_i+0xbe>
 8008376:	681e      	ldr	r6, [r3, #0]
 8008378:	e003      	b.n	8008382 <_printf_i+0xc6>
 800837a:	0646      	lsls	r6, r0, #25
 800837c:	d5fb      	bpl.n	8008376 <_printf_i+0xba>
 800837e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008382:	2e00      	cmp	r6, #0
 8008384:	da03      	bge.n	800838e <_printf_i+0xd2>
 8008386:	232d      	movs	r3, #45	; 0x2d
 8008388:	4276      	negs	r6, r6
 800838a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800838e:	485a      	ldr	r0, [pc, #360]	; (80084f8 <_printf_i+0x23c>)
 8008390:	230a      	movs	r3, #10
 8008392:	e012      	b.n	80083ba <_printf_i+0xfe>
 8008394:	682b      	ldr	r3, [r5, #0]
 8008396:	6820      	ldr	r0, [r4, #0]
 8008398:	1d19      	adds	r1, r3, #4
 800839a:	6029      	str	r1, [r5, #0]
 800839c:	0605      	lsls	r5, r0, #24
 800839e:	d501      	bpl.n	80083a4 <_printf_i+0xe8>
 80083a0:	681e      	ldr	r6, [r3, #0]
 80083a2:	e002      	b.n	80083aa <_printf_i+0xee>
 80083a4:	0641      	lsls	r1, r0, #25
 80083a6:	d5fb      	bpl.n	80083a0 <_printf_i+0xe4>
 80083a8:	881e      	ldrh	r6, [r3, #0]
 80083aa:	4853      	ldr	r0, [pc, #332]	; (80084f8 <_printf_i+0x23c>)
 80083ac:	2f6f      	cmp	r7, #111	; 0x6f
 80083ae:	bf0c      	ite	eq
 80083b0:	2308      	moveq	r3, #8
 80083b2:	230a      	movne	r3, #10
 80083b4:	2100      	movs	r1, #0
 80083b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083ba:	6865      	ldr	r5, [r4, #4]
 80083bc:	60a5      	str	r5, [r4, #8]
 80083be:	2d00      	cmp	r5, #0
 80083c0:	bfa2      	ittt	ge
 80083c2:	6821      	ldrge	r1, [r4, #0]
 80083c4:	f021 0104 	bicge.w	r1, r1, #4
 80083c8:	6021      	strge	r1, [r4, #0]
 80083ca:	b90e      	cbnz	r6, 80083d0 <_printf_i+0x114>
 80083cc:	2d00      	cmp	r5, #0
 80083ce:	d04b      	beq.n	8008468 <_printf_i+0x1ac>
 80083d0:	4615      	mov	r5, r2
 80083d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80083d6:	fb03 6711 	mls	r7, r3, r1, r6
 80083da:	5dc7      	ldrb	r7, [r0, r7]
 80083dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083e0:	4637      	mov	r7, r6
 80083e2:	42bb      	cmp	r3, r7
 80083e4:	460e      	mov	r6, r1
 80083e6:	d9f4      	bls.n	80083d2 <_printf_i+0x116>
 80083e8:	2b08      	cmp	r3, #8
 80083ea:	d10b      	bne.n	8008404 <_printf_i+0x148>
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	07de      	lsls	r6, r3, #31
 80083f0:	d508      	bpl.n	8008404 <_printf_i+0x148>
 80083f2:	6923      	ldr	r3, [r4, #16]
 80083f4:	6861      	ldr	r1, [r4, #4]
 80083f6:	4299      	cmp	r1, r3
 80083f8:	bfde      	ittt	le
 80083fa:	2330      	movle	r3, #48	; 0x30
 80083fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008400:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008404:	1b52      	subs	r2, r2, r5
 8008406:	6122      	str	r2, [r4, #16]
 8008408:	f8cd a000 	str.w	sl, [sp]
 800840c:	464b      	mov	r3, r9
 800840e:	aa03      	add	r2, sp, #12
 8008410:	4621      	mov	r1, r4
 8008412:	4640      	mov	r0, r8
 8008414:	f7ff fee4 	bl	80081e0 <_printf_common>
 8008418:	3001      	adds	r0, #1
 800841a:	d14a      	bne.n	80084b2 <_printf_i+0x1f6>
 800841c:	f04f 30ff 	mov.w	r0, #4294967295
 8008420:	b004      	add	sp, #16
 8008422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008426:	6823      	ldr	r3, [r4, #0]
 8008428:	f043 0320 	orr.w	r3, r3, #32
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	4833      	ldr	r0, [pc, #204]	; (80084fc <_printf_i+0x240>)
 8008430:	2778      	movs	r7, #120	; 0x78
 8008432:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	6829      	ldr	r1, [r5, #0]
 800843a:	061f      	lsls	r7, r3, #24
 800843c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008440:	d402      	bmi.n	8008448 <_printf_i+0x18c>
 8008442:	065f      	lsls	r7, r3, #25
 8008444:	bf48      	it	mi
 8008446:	b2b6      	uxthmi	r6, r6
 8008448:	07df      	lsls	r7, r3, #31
 800844a:	bf48      	it	mi
 800844c:	f043 0320 	orrmi.w	r3, r3, #32
 8008450:	6029      	str	r1, [r5, #0]
 8008452:	bf48      	it	mi
 8008454:	6023      	strmi	r3, [r4, #0]
 8008456:	b91e      	cbnz	r6, 8008460 <_printf_i+0x1a4>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	f023 0320 	bic.w	r3, r3, #32
 800845e:	6023      	str	r3, [r4, #0]
 8008460:	2310      	movs	r3, #16
 8008462:	e7a7      	b.n	80083b4 <_printf_i+0xf8>
 8008464:	4824      	ldr	r0, [pc, #144]	; (80084f8 <_printf_i+0x23c>)
 8008466:	e7e4      	b.n	8008432 <_printf_i+0x176>
 8008468:	4615      	mov	r5, r2
 800846a:	e7bd      	b.n	80083e8 <_printf_i+0x12c>
 800846c:	682b      	ldr	r3, [r5, #0]
 800846e:	6826      	ldr	r6, [r4, #0]
 8008470:	6961      	ldr	r1, [r4, #20]
 8008472:	1d18      	adds	r0, r3, #4
 8008474:	6028      	str	r0, [r5, #0]
 8008476:	0635      	lsls	r5, r6, #24
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	d501      	bpl.n	8008480 <_printf_i+0x1c4>
 800847c:	6019      	str	r1, [r3, #0]
 800847e:	e002      	b.n	8008486 <_printf_i+0x1ca>
 8008480:	0670      	lsls	r0, r6, #25
 8008482:	d5fb      	bpl.n	800847c <_printf_i+0x1c0>
 8008484:	8019      	strh	r1, [r3, #0]
 8008486:	2300      	movs	r3, #0
 8008488:	6123      	str	r3, [r4, #16]
 800848a:	4615      	mov	r5, r2
 800848c:	e7bc      	b.n	8008408 <_printf_i+0x14c>
 800848e:	682b      	ldr	r3, [r5, #0]
 8008490:	1d1a      	adds	r2, r3, #4
 8008492:	602a      	str	r2, [r5, #0]
 8008494:	681d      	ldr	r5, [r3, #0]
 8008496:	6862      	ldr	r2, [r4, #4]
 8008498:	2100      	movs	r1, #0
 800849a:	4628      	mov	r0, r5
 800849c:	f7f7 fec0 	bl	8000220 <memchr>
 80084a0:	b108      	cbz	r0, 80084a6 <_printf_i+0x1ea>
 80084a2:	1b40      	subs	r0, r0, r5
 80084a4:	6060      	str	r0, [r4, #4]
 80084a6:	6863      	ldr	r3, [r4, #4]
 80084a8:	6123      	str	r3, [r4, #16]
 80084aa:	2300      	movs	r3, #0
 80084ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084b0:	e7aa      	b.n	8008408 <_printf_i+0x14c>
 80084b2:	6923      	ldr	r3, [r4, #16]
 80084b4:	462a      	mov	r2, r5
 80084b6:	4649      	mov	r1, r9
 80084b8:	4640      	mov	r0, r8
 80084ba:	47d0      	blx	sl
 80084bc:	3001      	adds	r0, #1
 80084be:	d0ad      	beq.n	800841c <_printf_i+0x160>
 80084c0:	6823      	ldr	r3, [r4, #0]
 80084c2:	079b      	lsls	r3, r3, #30
 80084c4:	d413      	bmi.n	80084ee <_printf_i+0x232>
 80084c6:	68e0      	ldr	r0, [r4, #12]
 80084c8:	9b03      	ldr	r3, [sp, #12]
 80084ca:	4298      	cmp	r0, r3
 80084cc:	bfb8      	it	lt
 80084ce:	4618      	movlt	r0, r3
 80084d0:	e7a6      	b.n	8008420 <_printf_i+0x164>
 80084d2:	2301      	movs	r3, #1
 80084d4:	4632      	mov	r2, r6
 80084d6:	4649      	mov	r1, r9
 80084d8:	4640      	mov	r0, r8
 80084da:	47d0      	blx	sl
 80084dc:	3001      	adds	r0, #1
 80084de:	d09d      	beq.n	800841c <_printf_i+0x160>
 80084e0:	3501      	adds	r5, #1
 80084e2:	68e3      	ldr	r3, [r4, #12]
 80084e4:	9903      	ldr	r1, [sp, #12]
 80084e6:	1a5b      	subs	r3, r3, r1
 80084e8:	42ab      	cmp	r3, r5
 80084ea:	dcf2      	bgt.n	80084d2 <_printf_i+0x216>
 80084ec:	e7eb      	b.n	80084c6 <_printf_i+0x20a>
 80084ee:	2500      	movs	r5, #0
 80084f0:	f104 0619 	add.w	r6, r4, #25
 80084f4:	e7f5      	b.n	80084e2 <_printf_i+0x226>
 80084f6:	bf00      	nop
 80084f8:	08008c21 	.word	0x08008c21
 80084fc:	08008c32 	.word	0x08008c32

08008500 <_scanf_chars>:
 8008500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008504:	4615      	mov	r5, r2
 8008506:	688a      	ldr	r2, [r1, #8]
 8008508:	4680      	mov	r8, r0
 800850a:	460c      	mov	r4, r1
 800850c:	b932      	cbnz	r2, 800851c <_scanf_chars+0x1c>
 800850e:	698a      	ldr	r2, [r1, #24]
 8008510:	2a00      	cmp	r2, #0
 8008512:	bf0c      	ite	eq
 8008514:	2201      	moveq	r2, #1
 8008516:	f04f 32ff 	movne.w	r2, #4294967295
 800851a:	608a      	str	r2, [r1, #8]
 800851c:	6822      	ldr	r2, [r4, #0]
 800851e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80085b0 <_scanf_chars+0xb0>
 8008522:	06d1      	lsls	r1, r2, #27
 8008524:	bf5f      	itttt	pl
 8008526:	681a      	ldrpl	r2, [r3, #0]
 8008528:	1d11      	addpl	r1, r2, #4
 800852a:	6019      	strpl	r1, [r3, #0]
 800852c:	6816      	ldrpl	r6, [r2, #0]
 800852e:	2700      	movs	r7, #0
 8008530:	69a0      	ldr	r0, [r4, #24]
 8008532:	b188      	cbz	r0, 8008558 <_scanf_chars+0x58>
 8008534:	2801      	cmp	r0, #1
 8008536:	d107      	bne.n	8008548 <_scanf_chars+0x48>
 8008538:	682a      	ldr	r2, [r5, #0]
 800853a:	7811      	ldrb	r1, [r2, #0]
 800853c:	6962      	ldr	r2, [r4, #20]
 800853e:	5c52      	ldrb	r2, [r2, r1]
 8008540:	b952      	cbnz	r2, 8008558 <_scanf_chars+0x58>
 8008542:	2f00      	cmp	r7, #0
 8008544:	d031      	beq.n	80085aa <_scanf_chars+0xaa>
 8008546:	e022      	b.n	800858e <_scanf_chars+0x8e>
 8008548:	2802      	cmp	r0, #2
 800854a:	d120      	bne.n	800858e <_scanf_chars+0x8e>
 800854c:	682b      	ldr	r3, [r5, #0]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008554:	071b      	lsls	r3, r3, #28
 8008556:	d41a      	bmi.n	800858e <_scanf_chars+0x8e>
 8008558:	6823      	ldr	r3, [r4, #0]
 800855a:	06da      	lsls	r2, r3, #27
 800855c:	bf5e      	ittt	pl
 800855e:	682b      	ldrpl	r3, [r5, #0]
 8008560:	781b      	ldrbpl	r3, [r3, #0]
 8008562:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008566:	682a      	ldr	r2, [r5, #0]
 8008568:	686b      	ldr	r3, [r5, #4]
 800856a:	3201      	adds	r2, #1
 800856c:	602a      	str	r2, [r5, #0]
 800856e:	68a2      	ldr	r2, [r4, #8]
 8008570:	3b01      	subs	r3, #1
 8008572:	3a01      	subs	r2, #1
 8008574:	606b      	str	r3, [r5, #4]
 8008576:	3701      	adds	r7, #1
 8008578:	60a2      	str	r2, [r4, #8]
 800857a:	b142      	cbz	r2, 800858e <_scanf_chars+0x8e>
 800857c:	2b00      	cmp	r3, #0
 800857e:	dcd7      	bgt.n	8008530 <_scanf_chars+0x30>
 8008580:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008584:	4629      	mov	r1, r5
 8008586:	4640      	mov	r0, r8
 8008588:	4798      	blx	r3
 800858a:	2800      	cmp	r0, #0
 800858c:	d0d0      	beq.n	8008530 <_scanf_chars+0x30>
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	f013 0310 	ands.w	r3, r3, #16
 8008594:	d105      	bne.n	80085a2 <_scanf_chars+0xa2>
 8008596:	68e2      	ldr	r2, [r4, #12]
 8008598:	3201      	adds	r2, #1
 800859a:	60e2      	str	r2, [r4, #12]
 800859c:	69a2      	ldr	r2, [r4, #24]
 800859e:	b102      	cbz	r2, 80085a2 <_scanf_chars+0xa2>
 80085a0:	7033      	strb	r3, [r6, #0]
 80085a2:	6923      	ldr	r3, [r4, #16]
 80085a4:	443b      	add	r3, r7
 80085a6:	6123      	str	r3, [r4, #16]
 80085a8:	2000      	movs	r0, #0
 80085aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ae:	bf00      	nop
 80085b0:	08008c5f 	.word	0x08008c5f

080085b4 <_scanf_i>:
 80085b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b8:	4698      	mov	r8, r3
 80085ba:	4b74      	ldr	r3, [pc, #464]	; (800878c <_scanf_i+0x1d8>)
 80085bc:	460c      	mov	r4, r1
 80085be:	4682      	mov	sl, r0
 80085c0:	4616      	mov	r6, r2
 80085c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80085c6:	b087      	sub	sp, #28
 80085c8:	ab03      	add	r3, sp, #12
 80085ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80085ce:	4b70      	ldr	r3, [pc, #448]	; (8008790 <_scanf_i+0x1dc>)
 80085d0:	69a1      	ldr	r1, [r4, #24]
 80085d2:	4a70      	ldr	r2, [pc, #448]	; (8008794 <_scanf_i+0x1e0>)
 80085d4:	2903      	cmp	r1, #3
 80085d6:	bf18      	it	ne
 80085d8:	461a      	movne	r2, r3
 80085da:	68a3      	ldr	r3, [r4, #8]
 80085dc:	9201      	str	r2, [sp, #4]
 80085de:	1e5a      	subs	r2, r3, #1
 80085e0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80085e4:	bf88      	it	hi
 80085e6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80085ea:	4627      	mov	r7, r4
 80085ec:	bf82      	ittt	hi
 80085ee:	eb03 0905 	addhi.w	r9, r3, r5
 80085f2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80085f6:	60a3      	strhi	r3, [r4, #8]
 80085f8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80085fc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008600:	bf98      	it	ls
 8008602:	f04f 0900 	movls.w	r9, #0
 8008606:	6023      	str	r3, [r4, #0]
 8008608:	463d      	mov	r5, r7
 800860a:	f04f 0b00 	mov.w	fp, #0
 800860e:	6831      	ldr	r1, [r6, #0]
 8008610:	ab03      	add	r3, sp, #12
 8008612:	7809      	ldrb	r1, [r1, #0]
 8008614:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008618:	2202      	movs	r2, #2
 800861a:	f7f7 fe01 	bl	8000220 <memchr>
 800861e:	b328      	cbz	r0, 800866c <_scanf_i+0xb8>
 8008620:	f1bb 0f01 	cmp.w	fp, #1
 8008624:	d159      	bne.n	80086da <_scanf_i+0x126>
 8008626:	6862      	ldr	r2, [r4, #4]
 8008628:	b92a      	cbnz	r2, 8008636 <_scanf_i+0x82>
 800862a:	6822      	ldr	r2, [r4, #0]
 800862c:	2308      	movs	r3, #8
 800862e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008632:	6063      	str	r3, [r4, #4]
 8008634:	6022      	str	r2, [r4, #0]
 8008636:	6822      	ldr	r2, [r4, #0]
 8008638:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800863c:	6022      	str	r2, [r4, #0]
 800863e:	68a2      	ldr	r2, [r4, #8]
 8008640:	1e51      	subs	r1, r2, #1
 8008642:	60a1      	str	r1, [r4, #8]
 8008644:	b192      	cbz	r2, 800866c <_scanf_i+0xb8>
 8008646:	6832      	ldr	r2, [r6, #0]
 8008648:	1c51      	adds	r1, r2, #1
 800864a:	6031      	str	r1, [r6, #0]
 800864c:	7812      	ldrb	r2, [r2, #0]
 800864e:	f805 2b01 	strb.w	r2, [r5], #1
 8008652:	6872      	ldr	r2, [r6, #4]
 8008654:	3a01      	subs	r2, #1
 8008656:	2a00      	cmp	r2, #0
 8008658:	6072      	str	r2, [r6, #4]
 800865a:	dc07      	bgt.n	800866c <_scanf_i+0xb8>
 800865c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008660:	4631      	mov	r1, r6
 8008662:	4650      	mov	r0, sl
 8008664:	4790      	blx	r2
 8008666:	2800      	cmp	r0, #0
 8008668:	f040 8085 	bne.w	8008776 <_scanf_i+0x1c2>
 800866c:	f10b 0b01 	add.w	fp, fp, #1
 8008670:	f1bb 0f03 	cmp.w	fp, #3
 8008674:	d1cb      	bne.n	800860e <_scanf_i+0x5a>
 8008676:	6863      	ldr	r3, [r4, #4]
 8008678:	b90b      	cbnz	r3, 800867e <_scanf_i+0xca>
 800867a:	230a      	movs	r3, #10
 800867c:	6063      	str	r3, [r4, #4]
 800867e:	6863      	ldr	r3, [r4, #4]
 8008680:	4945      	ldr	r1, [pc, #276]	; (8008798 <_scanf_i+0x1e4>)
 8008682:	6960      	ldr	r0, [r4, #20]
 8008684:	1ac9      	subs	r1, r1, r3
 8008686:	f000 f889 	bl	800879c <__sccl>
 800868a:	f04f 0b00 	mov.w	fp, #0
 800868e:	68a3      	ldr	r3, [r4, #8]
 8008690:	6822      	ldr	r2, [r4, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d03d      	beq.n	8008712 <_scanf_i+0x15e>
 8008696:	6831      	ldr	r1, [r6, #0]
 8008698:	6960      	ldr	r0, [r4, #20]
 800869a:	f891 c000 	ldrb.w	ip, [r1]
 800869e:	f810 000c 	ldrb.w	r0, [r0, ip]
 80086a2:	2800      	cmp	r0, #0
 80086a4:	d035      	beq.n	8008712 <_scanf_i+0x15e>
 80086a6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80086aa:	d124      	bne.n	80086f6 <_scanf_i+0x142>
 80086ac:	0510      	lsls	r0, r2, #20
 80086ae:	d522      	bpl.n	80086f6 <_scanf_i+0x142>
 80086b0:	f10b 0b01 	add.w	fp, fp, #1
 80086b4:	f1b9 0f00 	cmp.w	r9, #0
 80086b8:	d003      	beq.n	80086c2 <_scanf_i+0x10e>
 80086ba:	3301      	adds	r3, #1
 80086bc:	f109 39ff 	add.w	r9, r9, #4294967295
 80086c0:	60a3      	str	r3, [r4, #8]
 80086c2:	6873      	ldr	r3, [r6, #4]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	6073      	str	r3, [r6, #4]
 80086ca:	dd1b      	ble.n	8008704 <_scanf_i+0x150>
 80086cc:	6833      	ldr	r3, [r6, #0]
 80086ce:	3301      	adds	r3, #1
 80086d0:	6033      	str	r3, [r6, #0]
 80086d2:	68a3      	ldr	r3, [r4, #8]
 80086d4:	3b01      	subs	r3, #1
 80086d6:	60a3      	str	r3, [r4, #8]
 80086d8:	e7d9      	b.n	800868e <_scanf_i+0xda>
 80086da:	f1bb 0f02 	cmp.w	fp, #2
 80086de:	d1ae      	bne.n	800863e <_scanf_i+0x8a>
 80086e0:	6822      	ldr	r2, [r4, #0]
 80086e2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80086e6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80086ea:	d1bf      	bne.n	800866c <_scanf_i+0xb8>
 80086ec:	2310      	movs	r3, #16
 80086ee:	6063      	str	r3, [r4, #4]
 80086f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086f4:	e7a2      	b.n	800863c <_scanf_i+0x88>
 80086f6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80086fa:	6022      	str	r2, [r4, #0]
 80086fc:	780b      	ldrb	r3, [r1, #0]
 80086fe:	f805 3b01 	strb.w	r3, [r5], #1
 8008702:	e7de      	b.n	80086c2 <_scanf_i+0x10e>
 8008704:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008708:	4631      	mov	r1, r6
 800870a:	4650      	mov	r0, sl
 800870c:	4798      	blx	r3
 800870e:	2800      	cmp	r0, #0
 8008710:	d0df      	beq.n	80086d2 <_scanf_i+0x11e>
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	05d9      	lsls	r1, r3, #23
 8008716:	d50d      	bpl.n	8008734 <_scanf_i+0x180>
 8008718:	42bd      	cmp	r5, r7
 800871a:	d909      	bls.n	8008730 <_scanf_i+0x17c>
 800871c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008720:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008724:	4632      	mov	r2, r6
 8008726:	4650      	mov	r0, sl
 8008728:	4798      	blx	r3
 800872a:	f105 39ff 	add.w	r9, r5, #4294967295
 800872e:	464d      	mov	r5, r9
 8008730:	42bd      	cmp	r5, r7
 8008732:	d028      	beq.n	8008786 <_scanf_i+0x1d2>
 8008734:	6822      	ldr	r2, [r4, #0]
 8008736:	f012 0210 	ands.w	r2, r2, #16
 800873a:	d113      	bne.n	8008764 <_scanf_i+0x1b0>
 800873c:	702a      	strb	r2, [r5, #0]
 800873e:	6863      	ldr	r3, [r4, #4]
 8008740:	9e01      	ldr	r6, [sp, #4]
 8008742:	4639      	mov	r1, r7
 8008744:	4650      	mov	r0, sl
 8008746:	47b0      	blx	r6
 8008748:	f8d8 3000 	ldr.w	r3, [r8]
 800874c:	6821      	ldr	r1, [r4, #0]
 800874e:	1d1a      	adds	r2, r3, #4
 8008750:	f8c8 2000 	str.w	r2, [r8]
 8008754:	f011 0f20 	tst.w	r1, #32
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	d00f      	beq.n	800877c <_scanf_i+0x1c8>
 800875c:	6018      	str	r0, [r3, #0]
 800875e:	68e3      	ldr	r3, [r4, #12]
 8008760:	3301      	adds	r3, #1
 8008762:	60e3      	str	r3, [r4, #12]
 8008764:	6923      	ldr	r3, [r4, #16]
 8008766:	1bed      	subs	r5, r5, r7
 8008768:	445d      	add	r5, fp
 800876a:	442b      	add	r3, r5
 800876c:	6123      	str	r3, [r4, #16]
 800876e:	2000      	movs	r0, #0
 8008770:	b007      	add	sp, #28
 8008772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008776:	f04f 0b00 	mov.w	fp, #0
 800877a:	e7ca      	b.n	8008712 <_scanf_i+0x15e>
 800877c:	07ca      	lsls	r2, r1, #31
 800877e:	bf4c      	ite	mi
 8008780:	8018      	strhmi	r0, [r3, #0]
 8008782:	6018      	strpl	r0, [r3, #0]
 8008784:	e7eb      	b.n	800875e <_scanf_i+0x1aa>
 8008786:	2001      	movs	r0, #1
 8008788:	e7f2      	b.n	8008770 <_scanf_i+0x1bc>
 800878a:	bf00      	nop
 800878c:	08008bec 	.word	0x08008bec
 8008790:	08008b25 	.word	0x08008b25
 8008794:	08008a3d 	.word	0x08008a3d
 8008798:	08008c53 	.word	0x08008c53

0800879c <__sccl>:
 800879c:	b570      	push	{r4, r5, r6, lr}
 800879e:	780b      	ldrb	r3, [r1, #0]
 80087a0:	4604      	mov	r4, r0
 80087a2:	2b5e      	cmp	r3, #94	; 0x5e
 80087a4:	bf0b      	itete	eq
 80087a6:	784b      	ldrbeq	r3, [r1, #1]
 80087a8:	1c4a      	addne	r2, r1, #1
 80087aa:	1c8a      	addeq	r2, r1, #2
 80087ac:	2100      	movne	r1, #0
 80087ae:	bf08      	it	eq
 80087b0:	2101      	moveq	r1, #1
 80087b2:	3801      	subs	r0, #1
 80087b4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80087b8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80087bc:	42a8      	cmp	r0, r5
 80087be:	d1fb      	bne.n	80087b8 <__sccl+0x1c>
 80087c0:	b90b      	cbnz	r3, 80087c6 <__sccl+0x2a>
 80087c2:	1e50      	subs	r0, r2, #1
 80087c4:	bd70      	pop	{r4, r5, r6, pc}
 80087c6:	f081 0101 	eor.w	r1, r1, #1
 80087ca:	54e1      	strb	r1, [r4, r3]
 80087cc:	4610      	mov	r0, r2
 80087ce:	4602      	mov	r2, r0
 80087d0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80087d4:	2d2d      	cmp	r5, #45	; 0x2d
 80087d6:	d005      	beq.n	80087e4 <__sccl+0x48>
 80087d8:	2d5d      	cmp	r5, #93	; 0x5d
 80087da:	d016      	beq.n	800880a <__sccl+0x6e>
 80087dc:	2d00      	cmp	r5, #0
 80087de:	d0f1      	beq.n	80087c4 <__sccl+0x28>
 80087e0:	462b      	mov	r3, r5
 80087e2:	e7f2      	b.n	80087ca <__sccl+0x2e>
 80087e4:	7846      	ldrb	r6, [r0, #1]
 80087e6:	2e5d      	cmp	r6, #93	; 0x5d
 80087e8:	d0fa      	beq.n	80087e0 <__sccl+0x44>
 80087ea:	42b3      	cmp	r3, r6
 80087ec:	dcf8      	bgt.n	80087e0 <__sccl+0x44>
 80087ee:	3002      	adds	r0, #2
 80087f0:	461a      	mov	r2, r3
 80087f2:	3201      	adds	r2, #1
 80087f4:	4296      	cmp	r6, r2
 80087f6:	54a1      	strb	r1, [r4, r2]
 80087f8:	dcfb      	bgt.n	80087f2 <__sccl+0x56>
 80087fa:	1af2      	subs	r2, r6, r3
 80087fc:	3a01      	subs	r2, #1
 80087fe:	1c5d      	adds	r5, r3, #1
 8008800:	42b3      	cmp	r3, r6
 8008802:	bfa8      	it	ge
 8008804:	2200      	movge	r2, #0
 8008806:	18ab      	adds	r3, r5, r2
 8008808:	e7e1      	b.n	80087ce <__sccl+0x32>
 800880a:	4610      	mov	r0, r2
 800880c:	e7da      	b.n	80087c4 <__sccl+0x28>

0800880e <__submore>:
 800880e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008812:	460c      	mov	r4, r1
 8008814:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008816:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800881a:	4299      	cmp	r1, r3
 800881c:	d11d      	bne.n	800885a <__submore+0x4c>
 800881e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008822:	f7ff f927 	bl	8007a74 <_malloc_r>
 8008826:	b918      	cbnz	r0, 8008830 <__submore+0x22>
 8008828:	f04f 30ff 	mov.w	r0, #4294967295
 800882c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008834:	63a3      	str	r3, [r4, #56]	; 0x38
 8008836:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800883a:	6360      	str	r0, [r4, #52]	; 0x34
 800883c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008840:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008844:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008848:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800884c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008850:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008854:	6020      	str	r0, [r4, #0]
 8008856:	2000      	movs	r0, #0
 8008858:	e7e8      	b.n	800882c <__submore+0x1e>
 800885a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800885c:	0077      	lsls	r7, r6, #1
 800885e:	463a      	mov	r2, r7
 8008860:	f000 f83a 	bl	80088d8 <_realloc_r>
 8008864:	4605      	mov	r5, r0
 8008866:	2800      	cmp	r0, #0
 8008868:	d0de      	beq.n	8008828 <__submore+0x1a>
 800886a:	eb00 0806 	add.w	r8, r0, r6
 800886e:	4601      	mov	r1, r0
 8008870:	4632      	mov	r2, r6
 8008872:	4640      	mov	r0, r8
 8008874:	f7ff f884 	bl	8007980 <memcpy>
 8008878:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800887c:	f8c4 8000 	str.w	r8, [r4]
 8008880:	e7e9      	b.n	8008856 <__submore+0x48>

08008882 <memmove>:
 8008882:	4288      	cmp	r0, r1
 8008884:	b510      	push	{r4, lr}
 8008886:	eb01 0402 	add.w	r4, r1, r2
 800888a:	d902      	bls.n	8008892 <memmove+0x10>
 800888c:	4284      	cmp	r4, r0
 800888e:	4623      	mov	r3, r4
 8008890:	d807      	bhi.n	80088a2 <memmove+0x20>
 8008892:	1e43      	subs	r3, r0, #1
 8008894:	42a1      	cmp	r1, r4
 8008896:	d008      	beq.n	80088aa <memmove+0x28>
 8008898:	f811 2b01 	ldrb.w	r2, [r1], #1
 800889c:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088a0:	e7f8      	b.n	8008894 <memmove+0x12>
 80088a2:	4402      	add	r2, r0
 80088a4:	4601      	mov	r1, r0
 80088a6:	428a      	cmp	r2, r1
 80088a8:	d100      	bne.n	80088ac <memmove+0x2a>
 80088aa:	bd10      	pop	{r4, pc}
 80088ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088b4:	e7f7      	b.n	80088a6 <memmove+0x24>
	...

080088b8 <_sbrk_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4d06      	ldr	r5, [pc, #24]	; (80088d4 <_sbrk_r+0x1c>)
 80088bc:	2300      	movs	r3, #0
 80088be:	4604      	mov	r4, r0
 80088c0:	4608      	mov	r0, r1
 80088c2:	602b      	str	r3, [r5, #0]
 80088c4:	f7f9 fb4c 	bl	8001f60 <_sbrk>
 80088c8:	1c43      	adds	r3, r0, #1
 80088ca:	d102      	bne.n	80088d2 <_sbrk_r+0x1a>
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	b103      	cbz	r3, 80088d2 <_sbrk_r+0x1a>
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	20000b60 	.word	0x20000b60

080088d8 <_realloc_r>:
 80088d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088dc:	4680      	mov	r8, r0
 80088de:	4614      	mov	r4, r2
 80088e0:	460e      	mov	r6, r1
 80088e2:	b921      	cbnz	r1, 80088ee <_realloc_r+0x16>
 80088e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088e8:	4611      	mov	r1, r2
 80088ea:	f7ff b8c3 	b.w	8007a74 <_malloc_r>
 80088ee:	b92a      	cbnz	r2, 80088fc <_realloc_r+0x24>
 80088f0:	f7ff f854 	bl	800799c <_free_r>
 80088f4:	4625      	mov	r5, r4
 80088f6:	4628      	mov	r0, r5
 80088f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088fc:	f000 f914 	bl	8008b28 <_malloc_usable_size_r>
 8008900:	4284      	cmp	r4, r0
 8008902:	4607      	mov	r7, r0
 8008904:	d802      	bhi.n	800890c <_realloc_r+0x34>
 8008906:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800890a:	d812      	bhi.n	8008932 <_realloc_r+0x5a>
 800890c:	4621      	mov	r1, r4
 800890e:	4640      	mov	r0, r8
 8008910:	f7ff f8b0 	bl	8007a74 <_malloc_r>
 8008914:	4605      	mov	r5, r0
 8008916:	2800      	cmp	r0, #0
 8008918:	d0ed      	beq.n	80088f6 <_realloc_r+0x1e>
 800891a:	42bc      	cmp	r4, r7
 800891c:	4622      	mov	r2, r4
 800891e:	4631      	mov	r1, r6
 8008920:	bf28      	it	cs
 8008922:	463a      	movcs	r2, r7
 8008924:	f7ff f82c 	bl	8007980 <memcpy>
 8008928:	4631      	mov	r1, r6
 800892a:	4640      	mov	r0, r8
 800892c:	f7ff f836 	bl	800799c <_free_r>
 8008930:	e7e1      	b.n	80088f6 <_realloc_r+0x1e>
 8008932:	4635      	mov	r5, r6
 8008934:	e7df      	b.n	80088f6 <_realloc_r+0x1e>
	...

08008938 <_strtol_l.constprop.0>:
 8008938:	2b01      	cmp	r3, #1
 800893a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800893e:	d001      	beq.n	8008944 <_strtol_l.constprop.0+0xc>
 8008940:	2b24      	cmp	r3, #36	; 0x24
 8008942:	d906      	bls.n	8008952 <_strtol_l.constprop.0+0x1a>
 8008944:	f7fe fff0 	bl	8007928 <__errno>
 8008948:	2316      	movs	r3, #22
 800894a:	6003      	str	r3, [r0, #0]
 800894c:	2000      	movs	r0, #0
 800894e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008952:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008a38 <_strtol_l.constprop.0+0x100>
 8008956:	460d      	mov	r5, r1
 8008958:	462e      	mov	r6, r5
 800895a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800895e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008962:	f017 0708 	ands.w	r7, r7, #8
 8008966:	d1f7      	bne.n	8008958 <_strtol_l.constprop.0+0x20>
 8008968:	2c2d      	cmp	r4, #45	; 0x2d
 800896a:	d132      	bne.n	80089d2 <_strtol_l.constprop.0+0x9a>
 800896c:	782c      	ldrb	r4, [r5, #0]
 800896e:	2701      	movs	r7, #1
 8008970:	1cb5      	adds	r5, r6, #2
 8008972:	2b00      	cmp	r3, #0
 8008974:	d05b      	beq.n	8008a2e <_strtol_l.constprop.0+0xf6>
 8008976:	2b10      	cmp	r3, #16
 8008978:	d109      	bne.n	800898e <_strtol_l.constprop.0+0x56>
 800897a:	2c30      	cmp	r4, #48	; 0x30
 800897c:	d107      	bne.n	800898e <_strtol_l.constprop.0+0x56>
 800897e:	782c      	ldrb	r4, [r5, #0]
 8008980:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008984:	2c58      	cmp	r4, #88	; 0x58
 8008986:	d14d      	bne.n	8008a24 <_strtol_l.constprop.0+0xec>
 8008988:	786c      	ldrb	r4, [r5, #1]
 800898a:	2310      	movs	r3, #16
 800898c:	3502      	adds	r5, #2
 800898e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008992:	f108 38ff 	add.w	r8, r8, #4294967295
 8008996:	f04f 0e00 	mov.w	lr, #0
 800899a:	fbb8 f9f3 	udiv	r9, r8, r3
 800899e:	4676      	mov	r6, lr
 80089a0:	fb03 8a19 	mls	sl, r3, r9, r8
 80089a4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80089a8:	f1bc 0f09 	cmp.w	ip, #9
 80089ac:	d816      	bhi.n	80089dc <_strtol_l.constprop.0+0xa4>
 80089ae:	4664      	mov	r4, ip
 80089b0:	42a3      	cmp	r3, r4
 80089b2:	dd24      	ble.n	80089fe <_strtol_l.constprop.0+0xc6>
 80089b4:	f1be 3fff 	cmp.w	lr, #4294967295
 80089b8:	d008      	beq.n	80089cc <_strtol_l.constprop.0+0x94>
 80089ba:	45b1      	cmp	r9, r6
 80089bc:	d31c      	bcc.n	80089f8 <_strtol_l.constprop.0+0xc0>
 80089be:	d101      	bne.n	80089c4 <_strtol_l.constprop.0+0x8c>
 80089c0:	45a2      	cmp	sl, r4
 80089c2:	db19      	blt.n	80089f8 <_strtol_l.constprop.0+0xc0>
 80089c4:	fb06 4603 	mla	r6, r6, r3, r4
 80089c8:	f04f 0e01 	mov.w	lr, #1
 80089cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089d0:	e7e8      	b.n	80089a4 <_strtol_l.constprop.0+0x6c>
 80089d2:	2c2b      	cmp	r4, #43	; 0x2b
 80089d4:	bf04      	itt	eq
 80089d6:	782c      	ldrbeq	r4, [r5, #0]
 80089d8:	1cb5      	addeq	r5, r6, #2
 80089da:	e7ca      	b.n	8008972 <_strtol_l.constprop.0+0x3a>
 80089dc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80089e0:	f1bc 0f19 	cmp.w	ip, #25
 80089e4:	d801      	bhi.n	80089ea <_strtol_l.constprop.0+0xb2>
 80089e6:	3c37      	subs	r4, #55	; 0x37
 80089e8:	e7e2      	b.n	80089b0 <_strtol_l.constprop.0+0x78>
 80089ea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80089ee:	f1bc 0f19 	cmp.w	ip, #25
 80089f2:	d804      	bhi.n	80089fe <_strtol_l.constprop.0+0xc6>
 80089f4:	3c57      	subs	r4, #87	; 0x57
 80089f6:	e7db      	b.n	80089b0 <_strtol_l.constprop.0+0x78>
 80089f8:	f04f 3eff 	mov.w	lr, #4294967295
 80089fc:	e7e6      	b.n	80089cc <_strtol_l.constprop.0+0x94>
 80089fe:	f1be 3fff 	cmp.w	lr, #4294967295
 8008a02:	d105      	bne.n	8008a10 <_strtol_l.constprop.0+0xd8>
 8008a04:	2322      	movs	r3, #34	; 0x22
 8008a06:	6003      	str	r3, [r0, #0]
 8008a08:	4646      	mov	r6, r8
 8008a0a:	b942      	cbnz	r2, 8008a1e <_strtol_l.constprop.0+0xe6>
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	e79e      	b.n	800894e <_strtol_l.constprop.0+0x16>
 8008a10:	b107      	cbz	r7, 8008a14 <_strtol_l.constprop.0+0xdc>
 8008a12:	4276      	negs	r6, r6
 8008a14:	2a00      	cmp	r2, #0
 8008a16:	d0f9      	beq.n	8008a0c <_strtol_l.constprop.0+0xd4>
 8008a18:	f1be 0f00 	cmp.w	lr, #0
 8008a1c:	d000      	beq.n	8008a20 <_strtol_l.constprop.0+0xe8>
 8008a1e:	1e69      	subs	r1, r5, #1
 8008a20:	6011      	str	r1, [r2, #0]
 8008a22:	e7f3      	b.n	8008a0c <_strtol_l.constprop.0+0xd4>
 8008a24:	2430      	movs	r4, #48	; 0x30
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1b1      	bne.n	800898e <_strtol_l.constprop.0+0x56>
 8008a2a:	2308      	movs	r3, #8
 8008a2c:	e7af      	b.n	800898e <_strtol_l.constprop.0+0x56>
 8008a2e:	2c30      	cmp	r4, #48	; 0x30
 8008a30:	d0a5      	beq.n	800897e <_strtol_l.constprop.0+0x46>
 8008a32:	230a      	movs	r3, #10
 8008a34:	e7ab      	b.n	800898e <_strtol_l.constprop.0+0x56>
 8008a36:	bf00      	nop
 8008a38:	08008c5f 	.word	0x08008c5f

08008a3c <_strtol_r>:
 8008a3c:	f7ff bf7c 	b.w	8008938 <_strtol_l.constprop.0>

08008a40 <_strtoul_l.constprop.0>:
 8008a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a44:	4f36      	ldr	r7, [pc, #216]	; (8008b20 <_strtoul_l.constprop.0+0xe0>)
 8008a46:	4686      	mov	lr, r0
 8008a48:	460d      	mov	r5, r1
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a50:	5d3e      	ldrb	r6, [r7, r4]
 8008a52:	f016 0608 	ands.w	r6, r6, #8
 8008a56:	d1f8      	bne.n	8008a4a <_strtoul_l.constprop.0+0xa>
 8008a58:	2c2d      	cmp	r4, #45	; 0x2d
 8008a5a:	d130      	bne.n	8008abe <_strtoul_l.constprop.0+0x7e>
 8008a5c:	782c      	ldrb	r4, [r5, #0]
 8008a5e:	2601      	movs	r6, #1
 8008a60:	1c85      	adds	r5, r0, #2
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d057      	beq.n	8008b16 <_strtoul_l.constprop.0+0xd6>
 8008a66:	2b10      	cmp	r3, #16
 8008a68:	d109      	bne.n	8008a7e <_strtoul_l.constprop.0+0x3e>
 8008a6a:	2c30      	cmp	r4, #48	; 0x30
 8008a6c:	d107      	bne.n	8008a7e <_strtoul_l.constprop.0+0x3e>
 8008a6e:	7828      	ldrb	r0, [r5, #0]
 8008a70:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008a74:	2858      	cmp	r0, #88	; 0x58
 8008a76:	d149      	bne.n	8008b0c <_strtoul_l.constprop.0+0xcc>
 8008a78:	786c      	ldrb	r4, [r5, #1]
 8008a7a:	2310      	movs	r3, #16
 8008a7c:	3502      	adds	r5, #2
 8008a7e:	f04f 38ff 	mov.w	r8, #4294967295
 8008a82:	2700      	movs	r7, #0
 8008a84:	fbb8 f8f3 	udiv	r8, r8, r3
 8008a88:	fb03 f908 	mul.w	r9, r3, r8
 8008a8c:	ea6f 0909 	mvn.w	r9, r9
 8008a90:	4638      	mov	r0, r7
 8008a92:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008a96:	f1bc 0f09 	cmp.w	ip, #9
 8008a9a:	d815      	bhi.n	8008ac8 <_strtoul_l.constprop.0+0x88>
 8008a9c:	4664      	mov	r4, ip
 8008a9e:	42a3      	cmp	r3, r4
 8008aa0:	dd23      	ble.n	8008aea <_strtoul_l.constprop.0+0xaa>
 8008aa2:	f1b7 3fff 	cmp.w	r7, #4294967295
 8008aa6:	d007      	beq.n	8008ab8 <_strtoul_l.constprop.0+0x78>
 8008aa8:	4580      	cmp	r8, r0
 8008aaa:	d31b      	bcc.n	8008ae4 <_strtoul_l.constprop.0+0xa4>
 8008aac:	d101      	bne.n	8008ab2 <_strtoul_l.constprop.0+0x72>
 8008aae:	45a1      	cmp	r9, r4
 8008ab0:	db18      	blt.n	8008ae4 <_strtoul_l.constprop.0+0xa4>
 8008ab2:	fb00 4003 	mla	r0, r0, r3, r4
 8008ab6:	2701      	movs	r7, #1
 8008ab8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008abc:	e7e9      	b.n	8008a92 <_strtoul_l.constprop.0+0x52>
 8008abe:	2c2b      	cmp	r4, #43	; 0x2b
 8008ac0:	bf04      	itt	eq
 8008ac2:	782c      	ldrbeq	r4, [r5, #0]
 8008ac4:	1c85      	addeq	r5, r0, #2
 8008ac6:	e7cc      	b.n	8008a62 <_strtoul_l.constprop.0+0x22>
 8008ac8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008acc:	f1bc 0f19 	cmp.w	ip, #25
 8008ad0:	d801      	bhi.n	8008ad6 <_strtoul_l.constprop.0+0x96>
 8008ad2:	3c37      	subs	r4, #55	; 0x37
 8008ad4:	e7e3      	b.n	8008a9e <_strtoul_l.constprop.0+0x5e>
 8008ad6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008ada:	f1bc 0f19 	cmp.w	ip, #25
 8008ade:	d804      	bhi.n	8008aea <_strtoul_l.constprop.0+0xaa>
 8008ae0:	3c57      	subs	r4, #87	; 0x57
 8008ae2:	e7dc      	b.n	8008a9e <_strtoul_l.constprop.0+0x5e>
 8008ae4:	f04f 37ff 	mov.w	r7, #4294967295
 8008ae8:	e7e6      	b.n	8008ab8 <_strtoul_l.constprop.0+0x78>
 8008aea:	1c7b      	adds	r3, r7, #1
 8008aec:	d106      	bne.n	8008afc <_strtoul_l.constprop.0+0xbc>
 8008aee:	2322      	movs	r3, #34	; 0x22
 8008af0:	f8ce 3000 	str.w	r3, [lr]
 8008af4:	4638      	mov	r0, r7
 8008af6:	b932      	cbnz	r2, 8008b06 <_strtoul_l.constprop.0+0xc6>
 8008af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008afc:	b106      	cbz	r6, 8008b00 <_strtoul_l.constprop.0+0xc0>
 8008afe:	4240      	negs	r0, r0
 8008b00:	2a00      	cmp	r2, #0
 8008b02:	d0f9      	beq.n	8008af8 <_strtoul_l.constprop.0+0xb8>
 8008b04:	b107      	cbz	r7, 8008b08 <_strtoul_l.constprop.0+0xc8>
 8008b06:	1e69      	subs	r1, r5, #1
 8008b08:	6011      	str	r1, [r2, #0]
 8008b0a:	e7f5      	b.n	8008af8 <_strtoul_l.constprop.0+0xb8>
 8008b0c:	2430      	movs	r4, #48	; 0x30
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1b5      	bne.n	8008a7e <_strtoul_l.constprop.0+0x3e>
 8008b12:	2308      	movs	r3, #8
 8008b14:	e7b3      	b.n	8008a7e <_strtoul_l.constprop.0+0x3e>
 8008b16:	2c30      	cmp	r4, #48	; 0x30
 8008b18:	d0a9      	beq.n	8008a6e <_strtoul_l.constprop.0+0x2e>
 8008b1a:	230a      	movs	r3, #10
 8008b1c:	e7af      	b.n	8008a7e <_strtoul_l.constprop.0+0x3e>
 8008b1e:	bf00      	nop
 8008b20:	08008c5f 	.word	0x08008c5f

08008b24 <_strtoul_r>:
 8008b24:	f7ff bf8c 	b.w	8008a40 <_strtoul_l.constprop.0>

08008b28 <_malloc_usable_size_r>:
 8008b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b2c:	1f18      	subs	r0, r3, #4
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	bfbc      	itt	lt
 8008b32:	580b      	ldrlt	r3, [r1, r0]
 8008b34:	18c0      	addlt	r0, r0, r3
 8008b36:	4770      	bx	lr

08008b38 <_init>:
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	bf00      	nop
 8008b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3e:	bc08      	pop	{r3}
 8008b40:	469e      	mov	lr, r3
 8008b42:	4770      	bx	lr

08008b44 <_fini>:
 8008b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b46:	bf00      	nop
 8008b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4a:	bc08      	pop	{r3}
 8008b4c:	469e      	mov	lr, r3
 8008b4e:	4770      	bx	lr
